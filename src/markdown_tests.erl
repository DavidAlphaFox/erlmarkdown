unit_test_() -> 
    [
%%     ?_assert(conv("AT&T has an ampersand in their name.\n\nAT&amp;T is another way to write it.\n\nThis & that.\n\n4 < 5.\n\n6 > 5.\n\nHere's a [link] [1] with an ampersand in the URL.\n\nHere's a link with an amersand in the link text: [AT&T] [2].\n\nHere's an inline [link](/script?foo=1&bar=2).\n\nHere's an inline [link](</script?foo=1&bar=2>).\n\n\n[1]: http://example.com/?foo=1&bar=2\n[2]: http://att.com/  \"AT&T\"") == "<p>AT&amp;T has an ampersand in their name.</p>\n\n<p>AT&amp;T is another way to write it.</p>\n\n<p>This &amp; that.</p>\n\n<p>4 &lt; 5.</p>\n\n<p>6 > 5.</p>\n\n<p>Here's a <a href=\"http://example.com/?foo=1&amp;bar=2\">link</a> with an ampersand in the URL.</p>\n\n<p>Here's a link with an amersand in the link text: <a href=\"http://att.com/\" title=\"AT&amp;T\">AT&amp;T</a>.</p>\n\n<p>Here's an inline <a href=\"/script?foo=1&amp;bar=2\">link</a>.</p>\n\n<p>Here's an inline <a href=\"/script?foo=1&amp;bar=2\">link</a>.</p>"),
%%     ?_assert(conv("Link: <http://example.com/>.\n\nWith an ampersand: <http://example.com/?foo=1&bar=2>\n\n* In a list?\n* <http://example.com/>\n* It should.\n\n> Blockquoted: <http://example.com/>\n\nAuto-links should not occur here: `<http://example.com/>`\n\n\tor here: <http://example.com/>") == "<p>Link: <a href=\"http://example.com/\">http://example.com/</a>.</p>\n\n<p>With an ampersand: <a href=\"http://example.com/?foo=1&amp;bar=2\">http://example.com/?foo=1&amp;bar=2</a></p>\n\n<ul>\n<li>In a list?</li>\n<li><a href=\"http://example.com/\">http://example.com/</a></li>\n<li>It should.</li>\n</ul>\n\n<blockquote>\n  <p>Blockquoted: <a href=\"http://example.com/\">http://example.com/</a></p>\n</blockquote>\n\n<p>Auto-links should not occur here: <code>&lt;http://example.com/&gt;</code></p>\n\n<pre><code>or here: &lt;http://example.com/&gt;\n</code></pre>"),
%%     ?_assert(conv("These should all get escaped:\n\nBackslash: \\\\\n\nBacktick: \\`\n\nAsterisk: \\*\n\nUnderscore: \\_\n\nLeft brace: \\{\n\nRight brace: \\}\n\nLeft bracket: \\[\n\nRight bracket: \\]\n\nLeft paren: \\(\n\nRight paren: \\)\n\nGreater-than: \\>\n\nHash: \\#\n\nPeriod: \\.\n\nBang: \\!\n\nPlus: \\+\n\nMinus: \\-\n\n\n\nThese should not, because they occur within a code block:\n\n\tBackslash: \\\\\n\n\tBacktick: \\`\n\n\tAsterisk: \\*\n\n\tUnderscore: \\_\n\n\tLeft brace: \\{\n\n\tRight brace: \\}\n\n\tLeft bracket: \\[\n\n\tRight bracket: \\]\n\n\tLeft paren: \\(\n\n\tRight paren: \\)\n\n\tGreater-than: \\>\n\n\tHash: \\#\n\n\tPeriod: \\.\n\n\tBang: \\!\n\n\tPlus: \\+\n\n\tMinus: \\-\n\n\nNor should these, which occur in code spans:\n\nBackslash: `\\\\`\n\nBacktick: `` \\` ``\n\nAsterisk: `\\*`\n\nUnderscore: `\\_`\n\nLeft brace: `\\{`\n\nRight brace: `\\}`\n\nLeft bracket: `\\[`\n\nRight bracket: `\\]`\n\nLeft paren: `\\(`\n\nRight paren: `\\)`\n\nGreater-than: `\\>`\n\nHash: `\\#`\n\nPeriod: `\\.`\n\nBang: `\\!`\n\nPlus: `\\+`\n\nMinus: `\\-`\n\n\nThese should get escaped, even though they're matching pairs for\nother Markdown constructs:\n\n\\*asterisks\\*\n\n\\_underscores\\_\n\n\\`backticks\\`\n\nThis is a code span with a literal backslash-backtick sequence: `` \\` ``\n\nThis is a tag with unescaped backticks <span attr='`ticks`'>bar</span>.\n\nThis is a tag with backslashes <span attr='\\\\backslashes\\\\'>bar</span>.\n") == "<p>These should all get escaped:</p>\n\n<p>Backslash: \\</p>\n\n<p>Backtick: `</p>\n\n<p>Asterisk: *</p>\n\n<p>Underscore: _</p>\n\n<p>Left brace: {</p>\n\n<p>Right brace: }</p>\n\n<p>Left bracket: [</p>\n\n<p>Right bracket: ]</p>\n\n<p>Left paren: (</p>\n\n<p>Right paren: )</p>\n\n<p>Greater-than: ></p>\n\n<p>Hash: #</p>\n\n<p>Period: .</p>\n\n<p>Bang: !</p>\n\n<p>Plus: +</p>\n\n<p>Minus: -</p>\n\n<p>These should not, because they occur within a code block:</p>\n\n<pre><code>Backslash: \\\\\n\nBacktick: \\`\n\nAsterisk: \\*\n\nUnderscore: \\_\n\nLeft brace: \\{\n\nRight brace: \\}\n\nLeft bracket: \\[\n\nRight bracket: \\]\n\nLeft paren: \\(\n\nRight paren: \\)\n\nGreater-than: \\&gt;\n\nHash: \\#\n\nPeriod: \\.\n\nBang: \\!\n\nPlus: \\+\n\nMinus: \\-\n</code></pre>\n\n<p>Nor should these, which occur in code spans:</p>\n\n<p>Backslash: <code>\\\\</code></p>\n\n<p>Backtick: <code>\\`</code></p>\n\n<p>Asterisk: <code>\\*</code></p>\n\n<p>Underscore: <code>\\_</code></p>\n\n<p>Left brace: <code>\\{</code></p>\n\n<p>Right brace: <code>\\}</code></p>\n\n<p>Left bracket: <code>\\[</code></p>\n\n<p>Right bracket: <code>\\]</code></p>\n\n<p>Left paren: <code>\\(</code></p>\n\n<p>Right paren: <code>\\)</code></p>\n\n<p>Greater-than: <code>\\&gt;</code></p>\n\n<p>Hash: <code>\\#</code></p>\n\n<p>Period: <code>\\.</code></p>\n\n<p>Bang: <code>\\!</code></p>\n\n<p>Plus: <code>\\+</code></p>\n\n<p>Minus: <code>\\-</code></p>\n\n<p>These should get escaped, even though they're matching pairs for\nother Markdown constructs:</p>\n\n<p>*asterisks*</p>\n\n<p>_underscores_</p>\n\n<p>`backticks`</p>\n\n<p>This is a code span with a literal backslash-backtick sequence: <code>\\`</code></p>\n\n<p>This is a tag with unescaped backticks <span attr='`ticks`'>bar</span>.</p>\n\n<p>This is a tag with backslashes <span attr='\\\\backslashes\\\\'>bar</span>.</p>"),
%%     ?_assert(conv("> Example:\n> \n>     sub status {\n>         print \"working\";\n>     }\n> \n> Or:\n> \n>     sub status {\n>         return \"working\";\n>     }\n") == "<blockquote>\n  <p>Example:</p>\n\n<pre><code>sub status {\n    print \"working\";\n}\n</code></pre>\n  \n  <p>Or:</p>\n\n<pre><code>sub status {\n    return \"working\";\n}\n</code></pre>\n</blockquote>"),
%%     ?_assert(conv("\tcode block on the first line\n\t\nRegular text.\n\n    code block indented by spaces\n\nRegular text.\n\n\tthe lines in this block  \n\tall contain trailing spaces  \n\nRegular Text.\n\n\tcode block on the last line") == "<pre><code>code block on the first line\n</code></pre>\n\n<p>Regular text.</p>\n\n<pre><code>code block indented by spaces\n</code></pre>\n\n<p>Regular text.</p>\n\n<pre><code>the lines in this block  \nall contain trailing spaces  \n</code></pre>\n\n<p>Regular Text.</p>\n\n<pre><code>code block on the last line\n</code></pre>"),
%%     ?_assert(conv("`<test a=\"` content of attribute `\">`\n\nFix for backticks within HTML tag: <span attr='`ticks`'>like this</span>\n\nHere's how you put `` `backticks` `` in a code span.") == "<p><code>&lt;test a=\"</code> content of attribute <code>\"&gt;</code></p>\n\n<p>Fix for backticks within HTML tag: <span attr='`ticks`'>like this</span></p>\n\n<p>Here's how you put <code>`backticks`</code> in a code span.</p>"),
%%     ?_assert(conv("In Markdown 1.0.0 and earlier. Version\n8. This line turns into a list item.\nBecause a hard-wrapped line in the\nmiddle of a paragraph looked like a\nlist item.\n\nHere's one with a bullet.\n* criminey.\n") == "<p>In Markdown 1.0.0 and earlier. Version\n8. This line turns into a list item.\nBecause a hard-wrapped line in the\nmiddle of a paragraph looked like a\nlist item.</p>\n\n<p>Here's one with a bullet.\n* criminey.</p>"),
%%     ?_assert(conv("Dashes:\n\n---\n\n ---\n \n  ---\n\n   ---\n\n\t---\n\n- - -\n\n - - -\n \n  - - -\n\n   - - -\n\n\t- - -\n\n\nAsterisks:\n\n***\n\n ***\n \n  ***\n\n   ***\n\n\t***\n\n* * *\n\n * * *\n \n  * * *\n\n   * * *\n\n\t* * *\n\n\nUnderscores:\n\n___\n\n ___\n \n  ___\n\n   ___\n\n    ___\n\n_ _ _\n\n _ _ _\n \n  _ _ _\n\n   _ _ _\n\n    _ _ _\n") == "<p>Dashes:</p>\n\n<hr />\n\n<hr />\n\n<hr />\n\n<hr />\n\n<pre><code>---\n</code></pre>\n\n<hr />\n\n<hr />\n\n<hr />\n\n<hr />\n\n<pre><code>- - -\n</code></pre>\n\n<p>Asterisks:</p>\n\n<hr />\n\n<hr />\n\n<hr />\n\n<hr />\n\n<pre><code>***\n</code></pre>\n\n<hr />\n\n<hr />\n\n<hr />\n\n<hr />\n\n<pre><code>* * *\n</code></pre>\n\n<p>Underscores:</p>\n\n<hr />\n\n<hr />\n\n<hr />\n\n<hr />\n\n<pre><code>___\n</code></pre>\n\n<hr />\n\n<hr />\n\n<hr />\n\n<hr />\n\n<pre><code>_ _ _\n</code></pre>"),
%%     ?_assert(conv("![Alt text](/path/to/img.jpg)\n\n![Alt text](/path/to/img.jpg \"Optional title\")\n\nInline within a paragraph: [alt text](/url/).\n\n![alt text](/url/  \"title preceded by two spaces\")\n\n![alt text](/url/  \"title has spaces afterward\"  )\n\n![alt text](</url/>)\n\n![alt text](</url/> \"with a title\").\n\n![Empty]()\n\n![this is a stupid URL](http://example.com/(parens).jpg)\n\n\n![alt text][foo]\n\n  [foo]: /url/\n\n![alt text][bar]\n\n  [bar]: /url/ \"Title here\"") == "<p><img src=\"/path/to/img.jpg\" alt=\"Alt text\" title=\"\" /></p>\n\n<p><img src=\"/path/to/img.jpg\" alt=\"Alt text\" title=\"Optional title\" /></p>\n\n<p>Inline within a paragraph: <a href=\"/url/\">alt text</a>.</p>\n\n<p><img src=\"/url/\" alt=\"alt text\" title=\"title preceded by two spaces\" /></p>\n\n<p><img src=\"/url/\" alt=\"alt text\" title=\"title has spaces afterward\" /></p>\n\n<p><img src=\"/url/\" alt=\"alt text\" title=\"\" /></p>\n\n<p><img src=\"/url/\" alt=\"alt text\" title=\"with a title\" />.</p>\n\n<p>!<a href=\"\">Empty</a></p>\n\n<p><img src=\"http://example.com/(parens\" alt=\"this is a stupid URL\" title=\"\" />.jpg)</p>\n\n<p><img src=\"/url/\" alt=\"alt text\" title=\"\" /></p>\n\n<p><img src=\"/url/\" alt=\"alt text\" title=\"Title here\" /></p>"),
%%     ?_assert(conv("Simple block on one line:\n\n<div>foo</div>\n\nAnd nested without indentation:\n\n<div>\n<div>\n<div>\nfoo\n</div>\n<div style=\">\"/>\n</div>\n<div>bar</div>\n</div>\n\nAnd with attributes:\n\n<div>\n\t<div id=\"foo\">\n\t</div>\n</div>\n\nThis was broken in 1.0.2b7:\n\n<div class=\"inlinepage\">\n<div class=\"toggleableend\">\nfoo\n</div>\n</div>\n") == "<p>Simple block on one line:</p>\n\n<div>foo</div>\n\nAnd nested without indentation:\n\n<div>\n<div>\n<div>\nfoo\n</div>\n\n<div style=\">\"/>\n</div>\n\n<div>bar</div>\n</div>\n\n<p>And with attributes:</p>\n\n<div>\n    <div id=\"foo\">\n    </div>\n</div>\n\n<p>This was broken in 1.0.2b7:</p>\n\n<div class=\"inlinepage\">\n<div class=\"toggleableend\">\nfoo\n</div>\n\n<p></div></p>"),
%%     ?_assert(conv("Here's a simple block:\n\n<div>\n\tfoo\n</div>\n\nThis should be a code block, though:\n\n\t<div>\n\t\tfoo\n\t</div>\n\nAs should this:\n\n\t<div>foo</div>\n\nNow, nested:\n\n<div>\n\t<div>\n\t\t<div>\n\t\t\tfoo\n\t\t</div>\n\t</div>\n</div>\n\nThis should just be an HTML comment:\n\n<!-- Comment -->\n\nMultiline:\n\n<!--\nBlah\nBlah\n-->\n\nCode block:\n\n\t<!-- Comment -->\n\nJust plain comment, with trailing spaces on the line:\n\n<!-- foo -->   \n\nCode:\n\n\t<hr />\n\t\nHr's:\n\n<hr>\n\n<hr/>\n\n<hr />\n\n<hr>   \n\n<hr/>  \n\n<hr /> \n\n<hr class=\"foo\" id=\"bar\" />\n\n<hr class=\"foo\" id=\"bar\"/>\n\n<hr class=\"foo\" id=\"bar\" >\n\n") == "<p>Here's a simple block:</p>\n\n<div>\n    foo\n</div>\n\n<p>This should be a code block, though:</p>\n\n<pre><code>&lt;div&gt;\n    foo\n&lt;/div&gt;\n</code></pre>\n\n<p>As should this:</p>\n\n<pre><code>&lt;div&gt;foo&lt;/div&gt;\n</code></pre>\n\n<p>Now, nested:</p>\n\n<div>\n    <div>\n        <div>\n            foo\n        </div>\n    </div>\n</div>\n\n<p>This should just be an HTML comment:</p>\n\n<!-- Comment -->\n\n<p>Multiline:</p>\n\n<!--\nBlah\nBlah\n-->\n\n<p>Code block:</p>\n\n<pre><code>&lt;!-- Comment --&gt;\n</code></pre>\n\n<p>Just plain comment, with trailing spaces on the line:</p>\n\n<!-- foo -->   \n\n<p>Code:</p>\n\n<pre><code>&lt;hr /&gt;\n</code></pre>\n\n<p>Hr's:</p>\n\n<hr>\n\n<hr/>\n\n<hr />\n\n<hr>   \n\n<hr/>  \n\n<hr /> \n\n<hr class=\"foo\" id=\"bar\" />\n\n<hr class=\"foo\" id=\"bar\"/>\n\n<hr class=\"foo\" id=\"bar\" >"),
%%     ?_assert(conv("Paragraph one.\n\n<!-- This is a simple comment -->\n\n<!--\n\tThis is another comment.\n-->\n\nParagraph two.\n\n<!-- one comment block -- -- with two comments -->\n\nThe end.\n") == "<p>Paragraph one.</p>\n\n<!-- This is a simple comment -->\n\n<!--\n    This is another comment.\n-->\n\n<p>Paragraph two.</p>\n\n<!-- one comment block -- -- with two comments -->\n\n<p>The end.</p>"),
%%     ?_assert(conv("Just a [URL](/url/).\n\n[URL and title](/url/ \"title\").\n\n[URL and title](/url/  \"title preceded by two spaces\").\n\n[URL and title](/url/\t\"title preceded by a tab\").\n\n[URL and title](/url/ \"title has spaces afterward\"  ).\n\n[URL wrapped in angle brackets](</url/>).\n\n[URL w/ angle brackets + title](</url/> \"Here's the title\").\n\n[Empty]().\n\n[With parens in the URL](http://en.wikipedia.org/wiki/WIMP_(computing))\n\n(With outer parens and [parens in url](/foo(bar)))\n\n\n[With parens in the URL](/foo(bar) \"and a title\")\n\n(With outer parens and [parens in url](/foo(bar) \"and a title\"))\n") == "<p>Just a <a href=\"/url/\">URL</a>.</p>\n\n<p><a href=\"/url/\" title=\"title\">URL and title</a>.</p>\n\n<p><a href=\"/url/\" title=\"title preceded by two spaces\">URL and title</a>.</p>\n\n<p><a href=\"/url/\" title=\"title preceded by a tab\">URL and title</a>.</p>\n\n<p><a href=\"/url/\" title=\"title has spaces afterward\">URL and title</a>.</p>\n\n<p><a href=\"/url/\">URL wrapped in angle brackets</a>.</p>\n\n<p><a href=\"/url/\" title=\"Here's the title\">URL w/ angle brackets + title</a>.</p>\n\n<p><a href=\"\">Empty</a>.</p>\n\n<p><a href=\"http://en.wikipedia.org/wiki/WIMP_(computing\">With parens in the URL</a>)</p>\n\n<p>(With outer parens and <a href=\"/foo(bar\">parens in url</a>))</p>\n\n<p><a href=\"/foo(bar\">With parens in the URL</a> \"and a title\")</p>\n\n<p>(With outer parens and <a href=\"/foo(bar\">parens in url</a> \"and a title\"))</p>"),
%%     ?_assert(conv("Foo [bar] [1].\n\nFoo [bar][1].\n\nFoo [bar]\n[1].\n\n[1]: /url/  \"Title\"\n\n\nWith [embedded [brackets]] [b].\n\n\nIndented [once][].\n\nIndented [twice][].\n\nIndented [thrice][].\n\nIndented [four][] times.\n\n [once]: /url\n\n  [twice]: /url\n\n   [thrice]: /url\n\n    [four]: /url\n\n\n[b]: /url/\n\n* * *\n\n[this] [this] should work\n\nSo should [this][this].\n\nAnd [this] [].\n\nAnd [this][].\n\nAnd [this].\n\nBut not [that] [].\n\nNor [that][].\n\nNor [that].\n\n[Something in brackets like [this][] should work]\n\n[Same with [this].]\n\nIn this case, [this](/somethingelse/) points to something else.\n\nBackslashing should suppress \\[this] and [this\\].\n\n[this]: foo\n\n\n* * *\n\nHere's one where the [link\nbreaks] across lines.\n\nHere's another where the [link \nbreaks] across lines, but with a line-ending space.\n\n\n[link breaks]: /url/\n") == "<p>Foo <a href=\"/url/\" title=\"Title\">bar</a>.</p>\n\n<p>Foo <a href=\"/url/\" title=\"Title\">bar</a>.</p>\n\n<p>Foo <a href=\"/url/\" title=\"Title\">bar</a>.</p>\n\n<p>With <a href=\"/url/\">embedded [brackets]</a>.</p>\n\n<p>Indented <a href=\"/url\">once</a>.</p>\n\n<p>Indented <a href=\"/url\">twice</a>.</p>\n\n<p>Indented <a href=\"/url\">thrice</a>.</p>\n\n<p>Indented [four][] times.</p>\n\n<pre><code>[four]: /url\n</code></pre>\n\n<hr />\n\n<p><a href=\"foo\">this</a> should work</p>\n\n<p>So should <a href=\"foo\">this</a>.</p>\n\n<p>And <a href=\"foo\">this</a>.</p>\n\n<p>And <a href=\"foo\">this</a>.</p>\n\n<p>And <a href=\"foo\">this</a>.</p>\n\n<p>But not [that] [].</p>\n\n<p>Nor [that][].</p>\n\n<p>Nor [that].</p>\n\n<p>[Something in brackets like <a href=\"foo\">this</a> should work]</p>\n\n<p>[Same with <a href=\"foo\">this</a>.]</p>\n\n<p>In this case, <a href=\"/somethingelse/\">this</a> points to something else.</p>\n\n<p>Backslashing should suppress [this] and [this].</p>\n\n<hr />\n\n<p>Here's one where the <a href=\"/url/\">link\nbreaks</a> across lines.</p>\n\n<p>Here's another where the <a href=\"/url/\">link \nbreaks</a> across lines, but with a line-ending space.</p>"),
%%     ?_assert(conv("This is the [simple case].\n\n[simple case]: /simple\n\n\n\nThis one has a [line\nbreak].\n\nThis one has a [line \nbreak] with a line-ending space.\n\n[line break]: /foo\n\n\n[this] [that] and the [other]\n\n[this]: /this\n[that]: /that\n[other]: /other\n") == "<p>This is the <a href=\"/simple\">simple case</a>.</p>\n\n<p>This one has a <a href=\"/foo\">line\nbreak</a>.</p>\n\n<p>This one has a <a href=\"/foo\">line \nbreak</a> with a line-ending space.</p>\n\n<p><a href=\"/that\">this</a> and the <a href=\"/other\">other</a></p>"),
%%     ?_assert(conv("Foo [bar][].\n\nFoo [bar](/url/ \"Title with \"quotes\" inside\").\n\n\n  [bar]: /url/ \"Title with \"quotes\" inside\"\n\n") == "<p>Foo <a href=\"/url/\" title=\"Title with &quot;quotes&quot; inside\">bar</a>.</p>\n\n<p>Foo <a href=\"/url/\" title=\"Title with &quot;quotes&quot; inside\">bar</a>.</p>"),
%%     ?_assert(conv("Markdown: Basics\n================\n\n<ul id=\"ProjectSubmenu\">\n    <li><a href=\"/projects/markdown/\" title=\"Markdown Project Page\">Main</a></li>\n    <li><a class=\"selected\" title=\"Markdown Basics\">Basics</a></li>\n    <li><a href=\"/projects/markdown/syntax\" title=\"Markdown Syntax Documentation\">Syntax</a></li>\n    <li><a href=\"/projects/markdown/license\" title=\"Pricing and License Information\">License</a></li>\n    <li><a href=\"/projects/markdown/dingus\" title=\"Online Markdown Web Form\">Dingus</a></li>\n</ul>\n\n\nGetting the Gist of Markdown's Formatting Syntax\n------------------------------------------------\n\nThis page offers a brief overview of what it's like to use Markdown.\nThe [syntax page] [s] provides complete, detailed documentation for\nevery feature, but Markdown should be very easy to pick up simply by\nlooking at a few examples of it in action. The examples on this page\nare written in a before/after style, showing example syntax and the\nHTML output produced by Markdown.\n\nIt's also helpful to simply try Markdown out; the [Dingus] [d] is a\nweb application that allows you type your own Markdown-formatted text\nand translate it to XHTML.\n\n**Note:** This document is itself written using Markdown; you\ncan [see the source for it by adding '.text' to the URL] [src].\n\n  [s]: /projects/markdown/syntax  \"Markdown Syntax\"\n  [d]: /projects/markdown/dingus  \"Markdown Dingus\"\n  [src]: /projects/markdown/basics.text\n\n\n## Paragraphs, Headers, Blockquotes ##\n\nA paragraph is simply one or more consecutive lines of text, separated\nby one or more blank lines. (A blank line is any line that looks like a\nblank line -- a line containing nothing spaces or tabs is considered\nblank.) Normal paragraphs should not be intended with spaces or tabs.\n\nMarkdown offers two styles of headers: *Setext* and *atx*.\nSetext-style headers for `<h1>` and `<h2>` are created by\n\"underlining\" with equal signs (`=`) and hyphens (`-`), respectively.\nTo create an atx-style header, you put 1-6 hash marks (`#`) at the\nbeginning of the line -- the number of hashes equals the resulting\nHTML header level.\n\nBlockquotes are indicated using email-style '`>`' angle brackets.\n\nMarkdown:\n\n    A First Level Header\n    ====================\n    \n    A Second Level Header\n    ---------------------\n\n    Now is the time for all good men to come to\n    the aid of their country. This is just a\n    regular paragraph.\n\n    The quick brown fox jumped over the lazy\n    dog's back.\n    \n    ### Header 3\n\n    > This is a blockquote.\n    > \n    > This is the second paragraph in the blockquote.\n    >\n    > ## This is an H2 in a blockquote\n\n\nOutput:\n\n    <h1>A First Level Header</h1>\n    \n    <h2>A Second Level Header</h2>\n    \n    <p>Now is the time for all good men to come to\n    the aid of their country. This is just a\n    regular paragraph.</p>\n    \n    <p>The quick brown fox jumped over the lazy\n    dog's back.</p>\n    \n    <h3>Header 3</h3>\n    \n    <blockquote>\n        <p>This is a blockquote.</p>\n        \n        <p>This is the second paragraph in the blockquote.</p>\n        \n        <h2>This is an H2 in a blockquote</h2>\n    </blockquote>\n\n\n\n### Phrase Emphasis ###\n\nMarkdown uses asterisks and underscores to indicate spans of emphasis.\n\nMarkdown:\n\n    Some of these words *are emphasized*.\n    Some of these words _are emphasized also_.\n    \n    Use two asterisks for **strong emphasis**.\n    Or, if you prefer, __use two underscores instead__.\n\nOutput:\n\n    <p>Some of these words <em>are emphasized</em>.\n    Some of these words <em>are emphasized also</em>.</p>\n    \n    <p>Use two asterisks for <strong>strong emphasis</strong>.\n    Or, if you prefer, <strong>use two underscores instead</strong>.</p>\n   \n\n\n## Lists ##\n\nUnordered (bulleted) lists use asterisks, pluses, and hyphens (`*`,\n`+`, and `-`) as list markers. These three markers are\ninterchangable; this:\n\n    *   Candy.\n    *   Gum.\n    *   Booze.\n\nthis:\n\n    +   Candy.\n    +   Gum.\n    +   Booze.\n\nand this:\n\n    -   Candy.\n    -   Gum.\n    -   Booze.\n\nall produce the same output:\n\n    <ul>\n    <li>Candy.</li>\n    <li>Gum.</li>\n    <li>Booze.</li>\n    </ul>\n\nOrdered (numbered) lists use regular numbers, followed by periods, as\nlist markers:\n\n    1.  Red\n    2.  Green\n    3.  Blue\n\nOutput:\n\n    <ol>\n    <li>Red</li>\n    <li>Green</li>\n    <li>Blue</li>\n    </ol>\n\nIf you put blank lines between items, you'll get `<p>` tags for the\nlist item text. You can create multi-paragraph list items by indenting\nthe paragraphs by 4 spaces or 1 tab:\n\n    *   A list item.\n    \n        With multiple paragraphs.\n\n    *   Another item in the list.\n\nOutput:\n\n    <ul>\n    <li><p>A list item.</p>\n    <p>With multiple paragraphs.</p></li>\n    <li><p>Another item in the list.</p></li>\n    </ul>\n    \n\n\n### Links ###\n\nMarkdown supports two styles for creating links: *inline* and\n*reference*. With both styles, you use square brackets to delimit the\ntext you want to turn into a link.\n\nInline-style links use parentheses immediately after the link text.\nFor example:\n\n    This is an [example link](http://example.com/).\n\nOutput:\n\n    <p>This is an <a href=\"http://example.com/\">\n    example link</a>.</p>\n\nOptionally, you may include a title attribute in the parentheses:\n\n    This is an [example link](http://example.com/ \"With a Title\").\n\nOutput:\n\n    <p>This is an <a href=\"http://example.com/\" title=\"With a Title\">\n    example link</a>.</p>\n\nReference-style links allow you to refer to your links by names, which\nyou define elsewhere in your document:\n\n    I get 10 times more traffic from [Google][1] than from\n    [Yahoo][2] or [MSN][3].\n\n    [1]: http://google.com/        \"Google\"\n    [2]: http://search.yahoo.com/  \"Yahoo Search\"\n    [3]: http://search.msn.com/    \"MSN Search\"\n\nOutput:\n\n    <p>I get 10 times more traffic from <a href=\"http://google.com/\"\n    title=\"Google\">Google</a> than from <a href=\"http://search.yahoo.com/\"\n    title=\"Yahoo Search\">Yahoo</a> or <a href=\"http://search.msn.com/\"\n    title=\"MSN Search\">MSN</a>.</p>\n\nThe title attribute is optional. Link names may contain letters,\nnumbers and spaces, but are *not* case sensitive:\n\n    I start my morning with a cup of coffee and\n    [The New York Times][NY Times].\n\n    [ny times]: http://www.nytimes.com/\n\nOutput:\n\n    <p>I start my morning with a cup of coffee and\n    <a href=\"http://www.nytimes.com/\">The New York Times</a>.</p>\n\n\n### Images ###\n\nImage syntax is very much like link syntax.\n\nInline (titles are optional):\n\n    ![alt text](/path/to/img.jpg \"Title\")\n\nReference-style:\n\n    ![alt text][id]\n\n    [id]: /path/to/img.jpg \"Title\"\n\nBoth of the above examples produce the same output:\n\n    <img src=\"/path/to/img.jpg\" alt=\"alt text\" title=\"Title\" />\n\n\n\n### Code ###\n\nIn a regular paragraph, you can create code span by wrapping text in\nbacktick quotes. Any ampersands (`&`) and angle brackets (`<` or\n`>`) will automatically be translated into HTML entities. This makes\nit easy to use Markdown to write about HTML example code:\n\n    I strongly recommend against using any `<blink>` tags.\n\n    I wish SmartyPants used named entities like `&mdash;`\n    instead of decimal-encoded entites like `&#8212;`.\n\nOutput:\n\n    <p>I strongly recommend against using any\n    <code>&lt;blink&gt;</code> tags.</p>\n    \n    <p>I wish SmartyPants used named entities like\n    <code>&amp;mdash;</code> instead of decimal-encoded\n    entites like <code>&amp;#8212;</code>.</p>\n\n\nTo specify an entire block of pre-formatted code, indent every line of\nthe block by 4 spaces or 1 tab. Just like with code spans, `&`, `<`,\nand `>` characters will be escaped automatically.\n\nMarkdown:\n\n    If you want your page to validate under XHTML 1.0 Strict,\n    you've got to put paragraph tags in your blockquotes:\n\n        <blockquote>\n            <p>For example.</p>\n        </blockquote>\n\nOutput:\n\n    <p>If you want your page to validate under XHTML 1.0 Strict,\n    you've got to put paragraph tags in your blockquotes:</p>\n    \n    <pre><code>&lt;blockquote&gt;\n        &lt;p&gt;For example.&lt;/p&gt;\n    &lt;/blockquote&gt;\n    </code></pre>\n") == "<h1>Markdown: Basics</h1>\n\n<ul id=\"ProjectSubmenu\">\n    <li><a href=\"/projects/markdown/\" title=\"Markdown Project Page\">Main</a></li>\n    <li><a class=\"selected\" title=\"Markdown Basics\">Basics</a></li>\n    <li><a href=\"/projects/markdown/syntax\" title=\"Markdown Syntax Documentation\">Syntax</a></li>\n    <li><a href=\"/projects/markdown/license\" title=\"Pricing and License Information\">License</a></li>\n    <li><a href=\"/projects/markdown/dingus\" title=\"Online Markdown Web Form\">Dingus</a></li>\n</ul>\n\n<h2>Getting the Gist of Markdown's Formatting Syntax</h2>\n\n<p>This page offers a brief overview of what it's like to use Markdown.\nThe <a href=\"/projects/markdown/syntax\" title=\"Markdown Syntax\">syntax page</a> provides complete, detailed documentation for\nevery feature, but Markdown should be very easy to pick up simply by\nlooking at a few examples of it in action. The examples on this page\nare written in a before/after style, showing example syntax and the\nHTML output produced by Markdown.</p>\n\n<p>It's also helpful to simply try Markdown out; the <a href=\"/projects/markdown/dingus\" title=\"Markdown Dingus\">Dingus</a> is a\nweb application that allows you type your own Markdown-formatted text\nand translate it to XHTML.</p>\n\n<p><strong>Note:</strong> This document is itself written using Markdown; you\ncan <a href=\"/projects/markdown/basics.text\">see the source for it by adding '.text' to the URL</a>.</p>\n\n<h2>Paragraphs, Headers, Blockquotes</h2>\n\n<p>A paragraph is simply one or more consecutive lines of text, separated\nby one or more blank lines. (A blank line is any line that looks like a\nblank line -- a line containing nothing spaces or tabs is considered\nblank.) Normal paragraphs should not be intended with spaces or tabs.</p>\n\n<p>Markdown offers two styles of headers: <em>Setext</em> and <em>atx</em>.\nSetext-style headers for <code>&lt;h1&gt;</code> and <code>&lt;h2&gt;</code> are created by\n\"underlining\" with equal signs (<code>=</code>) and hyphens (<code>-</code>), respectively.\nTo create an atx-style header, you put 1-6 hash marks (<code>#</code>) at the\nbeginning of the line -- the number of hashes equals the resulting\nHTML header level.</p>\n\n<p>Blockquotes are indicated using email-style '<code>&gt;</code>' angle brackets.</p>\n\n<p>Markdown:</p>\n\n<pre><code>A First Level Header\n====================\n\nA Second Level Header\n---------------------\n\nNow is the time for all good men to come to\nthe aid of their country. This is just a\nregular paragraph.\n\nThe quick brown fox jumped over the lazy\ndog's back.\n\n### Header 3\n\n&gt; This is a blockquote.\n&gt; \n&gt; This is the second paragraph in the blockquote.\n&gt;\n&gt; ## This is an H2 in a blockquote\n</code></pre>\n\n<p>Output:</p>\n\n<pre><code>&lt;h1&gt;A First Level Header&lt;/h1&gt;\n\n&lt;h2&gt;A Second Level Header&lt;/h2&gt;\n\n&lt;p&gt;Now is the time for all good men to come to\nthe aid of their country. This is just a\nregular paragraph.&lt;/p&gt;\n\n&lt;p&gt;The quick brown fox jumped over the lazy\ndog's back.&lt;/p&gt;\n\n&lt;h3&gt;Header 3&lt;/h3&gt;\n\n&lt;blockquote&gt;\n    &lt;p&gt;This is a blockquote.&lt;/p&gt;\n\n    &lt;p&gt;This is the second paragraph in the blockquote.&lt;/p&gt;\n\n    &lt;h2&gt;This is an H2 in a blockquote&lt;/h2&gt;\n&lt;/blockquote&gt;\n</code></pre>\n\n<h3>Phrase Emphasis</h3>\n\n<p>Markdown uses asterisks and underscores to indicate spans of emphasis.</p>\n\n<p>Markdown:</p>\n\n<pre><code>Some of these words *are emphasized*.\nSome of these words _are emphasized also_.\n\nUse two asterisks for **strong emphasis**.\nOr, if you prefer, __use two underscores instead__.\n</code></pre>\n\n<p>Output:</p>\n\n<pre><code>&lt;p&gt;Some of these words &lt;em&gt;are emphasized&lt;/em&gt;.\nSome of these words &lt;em&gt;are emphasized also&lt;/em&gt;.&lt;/p&gt;\n\n&lt;p&gt;Use two asterisks for &lt;strong&gt;strong emphasis&lt;/strong&gt;.\nOr, if you prefer, &lt;strong&gt;use two underscores instead&lt;/strong&gt;.&lt;/p&gt;\n</code></pre>\n\n<h2>Lists</h2>\n\n<p>Unordered (bulleted) lists use asterisks, pluses, and hyphens (<code>*</code>,\n<code>+</code>, and <code>-</code>) as list markers. These three markers are\ninterchangable; this:</p>\n\n<pre><code>*   Candy.\n*   Gum.\n*   Booze.\n</code></pre>\n\n<p>this:</p>\n\n<pre><code>+   Candy.\n+   Gum.\n+   Booze.\n</code></pre>\n\n<p>and this:</p>\n\n<pre><code>-   Candy.\n-   Gum.\n-   Booze.\n</code></pre>\n\n<p>all produce the same output:</p>\n\n<pre><code>&lt;ul&gt;\n&lt;li&gt;Candy.&lt;/li&gt;\n&lt;li&gt;Gum.&lt;/li&gt;\n&lt;li&gt;Booze.&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre>\n\n<p>Ordered (numbered) lists use regular numbers, followed by periods, as\nlist markers:</p>\n\n<pre><code>1.  Red\n2.  Green\n3.  Blue\n</code></pre>\n\n<p>Output:</p>\n\n<pre><code>&lt;ol&gt;\n&lt;li&gt;Red&lt;/li&gt;\n&lt;li&gt;Green&lt;/li&gt;\n&lt;li&gt;Blue&lt;/li&gt;\n&lt;/ol&gt;\n</code></pre>\n\n<p>If you put blank lines between items, you'll get <code>&lt;p&gt;</code> tags for the\nlist item text. You can create multi-paragraph list items by indenting\nthe paragraphs by 4 spaces or 1 tab:</p>\n\n<pre><code>*   A list item.\n\n    With multiple paragraphs.\n\n*   Another item in the list.\n</code></pre>\n\n<p>Output:</p>\n\n<pre><code>&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;A list item.&lt;/p&gt;\n&lt;p&gt;With multiple paragraphs.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Another item in the list.&lt;/p&gt;&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre>\n\n<h3>Links</h3>\n\n<p>Markdown supports two styles for creating links: <em>inline</em> and\n<em>reference</em>. With both styles, you use square brackets to delimit the\ntext you want to turn into a link.</p>\n\n<p>Inline-style links use parentheses immediately after the link text.\nFor example:</p>\n\n<pre><code>This is an [example link](http://example.com/).\n</code></pre>\n\n<p>Output:</p>\n\n<pre><code>&lt;p&gt;This is an &lt;a href=\"http://example.com/\"&gt;\nexample link&lt;/a&gt;.&lt;/p&gt;\n</code></pre>\n\n<p>Optionally, you may include a title attribute in the parentheses:</p>\n\n<pre><code>This is an [example link](http://example.com/ \"With a Title\").\n</code></pre>\n\n<p>Output:</p>\n\n<pre><code>&lt;p&gt;This is an &lt;a href=\"http://example.com/\" title=\"With a Title\"&gt;\nexample link&lt;/a&gt;.&lt;/p&gt;\n</code></pre>\n\n<p>Reference-style links allow you to refer to your links by names, which\nyou define elsewhere in your document:</p>\n\n<pre><code>I get 10 times more traffic from [Google][1] than from\n[Yahoo][2] or [MSN][3].\n\n[1]: http://google.com/        \"Google\"\n[2]: http://search.yahoo.com/  \"Yahoo Search\"\n[3]: http://search.msn.com/    \"MSN Search\"\n</code></pre>\n\n<p>Output:</p>\n\n<pre><code>&lt;p&gt;I get 10 times more traffic from &lt;a href=\"http://google.com/\"\ntitle=\"Google\"&gt;Google&lt;/a&gt; than from &lt;a href=\"http://search.yahoo.com/\"\ntitle=\"Yahoo Search\"&gt;Yahoo&lt;/a&gt; or &lt;a href=\"http://search.msn.com/\"\ntitle=\"MSN Search\"&gt;MSN&lt;/a&gt;.&lt;/p&gt;\n</code></pre>\n\n<p>The title attribute is optional. Link names may contain letters,\nnumbers and spaces, but are <em>not</em> case sensitive:</p>\n\n<pre><code>I start my morning with a cup of coffee and\n[The New York Times][NY Times].\n\n[ny times]: http://www.nytimes.com/\n</code></pre>\n\n<p>Output:</p>\n\n<pre><code>&lt;p&gt;I start my morning with a cup of coffee and\n&lt;a href=\"http://www.nytimes.com/\"&gt;The New York Times&lt;/a&gt;.&lt;/p&gt;\n</code></pre>\n\n<h3>Images</h3>\n\n<p>Image syntax is very much like link syntax.</p>\n\n<p>Inline (titles are optional):</p>\n\n<pre><code>![alt text](/path/to/img.jpg \"Title\")\n</code></pre>\n\n<p>Reference-style:</p>\n\n<pre><code>![alt text][id]\n\n[id]: /path/to/img.jpg \"Title\"\n</code></pre>\n\n<p>Both of the above examples produce the same output:</p>\n\n<pre><code>&lt;img src=\"/path/to/img.jpg\" alt=\"alt text\" title=\"Title\" /&gt;\n</code></pre>\n\n<h3>Code</h3>\n\n<p>In a regular paragraph, you can create code span by wrapping text in\nbacktick quotes. Any ampersands (<code>&amp;</code>) and angle brackets (<code>&lt;</code> or\n<code>&gt;</code>) will automatically be translated into HTML entities. This makes\nit easy to use Markdown to write about HTML example code:</p>\n\n<pre><code>I strongly recommend against using any `&lt;blink&gt;` tags.\n\nI wish SmartyPants used named entities like `&amp;mdash;`\ninstead of decimal-encoded entites like `&amp;#8212;`.\n</code></pre>\n\n<p>Output:</p>\n\n<pre><code>&lt;p&gt;I strongly recommend against using any\n&lt;code&gt;&amp;lt;blink&amp;gt;&lt;/code&gt; tags.&lt;/p&gt;\n\n&lt;p&gt;I wish SmartyPants used named entities like\n&lt;code&gt;&amp;amp;mdash;&lt;/code&gt; instead of decimal-encoded\nentites like &lt;code&gt;&amp;amp;#8212;&lt;/code&gt;.&lt;/p&gt;\n</code></pre>\n\n<p>To specify an entire block of pre-formatted code, indent every line of\nthe block by 4 spaces or 1 tab. Just like with code spans, <code>&amp;</code>, <code>&lt;</code>,\nand <code>&gt;</code> characters will be escaped automatically.</p>\n\n<p>Markdown:</p>\n\n<pre><code>If you want your page to validate under XHTML 1.0 Strict,\nyou've got to put paragraph tags in your blockquotes:\n\n    &lt;blockquote&gt;\n        &lt;p&gt;For example.&lt;/p&gt;\n    &lt;/blockquote&gt;\n</code></pre>\n\n<p>Output:</p>\n\n<pre><code>&lt;p&gt;If you want your page to validate under XHTML 1.0 Strict,\nyou've got to put paragraph tags in your blockquotes:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;&amp;lt;blockquote&amp;gt;\n    &amp;lt;p&amp;gt;For example.&amp;lt;/p&amp;gt;\n&amp;lt;/blockquote&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n</code></pre>"),
%%     ?_assert(conv("Markdown: Syntax\n================\n\n<ul id=\"ProjectSubmenu\">\n    <li><a href=\"/projects/markdown/\" title=\"Markdown Project Page\">Main</a></li>\n    <li><a href=\"/projects/markdown/basics\" title=\"Markdown Basics\">Basics</a></li>\n    <li><a class=\"selected\" title=\"Markdown Syntax Documentation\">Syntax</a></li>\n    <li><a href=\"/projects/markdown/license\" title=\"Pricing and License Information\">License</a></li>\n    <li><a href=\"/projects/markdown/dingus\" title=\"Online Markdown Web Form\">Dingus</a></li>\n</ul>\n\n\n*   [Overview](#overview)\n    *   [Philosophy](#philosophy)\n    *   [Inline HTML](#html)\n    *   [Automatic Escaping for Special Characters](#autoescape)\n*   [Block Elements](#block)\n    *   [Paragraphs and Line Breaks](#p)\n    *   [Headers](#header)\n    *   [Blockquotes](#blockquote)\n    *   [Lists](#list)\n    *   [Code Blocks](#precode)\n    *   [Horizontal Rules](#hr)\n*   [Span Elements](#span)\n    *   [Links](#link)\n    *   [Emphasis](#em)\n    *   [Code](#code)\n    *   [Images](#img)\n*   [Miscellaneous](#misc)\n    *   [Backslash Escapes](#backslash)\n    *   [Automatic Links](#autolink)\n\n\n**Note:** This document is itself written using Markdown; you\ncan [see the source for it by adding '.text' to the URL][src].\n\n  [src]: /projects/markdown/syntax.text\n\n* * *\n\n<h2 id=\"overview\">Overview</h2>\n\n<h3 id=\"philosophy\">Philosophy</h3>\n\nMarkdown is intended to be as easy-to-read and easy-to-write as is feasible.\n\nReadability, however, is emphasized above all else. A Markdown-formatted\ndocument should be publishable as-is, as plain text, without looking\nlike it's been marked up with tags or formatting instructions. While\nMarkdown's syntax has been influenced by several existing text-to-HTML\nfilters -- including [Setext] [1], [atx] [2], [Textile] [3], [reStructuredText] [4],\n[Grutatext] [5], and [EtText] [6] -- the single biggest source of\ninspiration for Markdown's syntax is the format of plain text email.\n\n  [1]: http://docutils.sourceforge.net/mirror/setext.html\n  [2]: http://www.aaronsw.com/2002/atx/\n  [3]: http://textism.com/tools/textile/\n  [4]: http://docutils.sourceforge.net/rst.html\n  [5]: http://www.triptico.com/software/grutatxt.html\n  [6]: http://ettext.taint.org/doc/\n\nTo this end, Markdown's syntax is comprised entirely of punctuation\ncharacters, which punctuation characters have been carefully chosen so\nas to look like what they mean. E.g., asterisks around a word actually\nlook like \\*emphasis\\*. Markdown lists look like, well, lists. Even\nblockquotes look like quoted passages of text, assuming you've ever\nused email.\n\n\n\n<h3 id=\"html\">Inline HTML</h3>\n\nMarkdown's syntax is intended for one purpose: to be used as a\nformat for *writing* for the web.\n\nMarkdown is not a replacement for HTML, or even close to it. Its\nsyntax is very small, corresponding only to a very small subset of\nHTML tags. The idea is *not* to create a syntax that makes it easier\nto insert HTML tags. In my opinion, HTML tags are already easy to\ninsert. The idea for Markdown is to make it easy to read, write, and\nedit prose. HTML is a *publishing* format; Markdown is a *writing*\nformat. Thus, Markdown's formatting syntax only addresses issues that\ncan be conveyed in plain text.\n\nFor any markup that is not covered by Markdown's syntax, you simply\nuse HTML itself. There's no need to preface it or delimit it to\nindicate that you're switching from Markdown to HTML; you just use\nthe tags.\n\nThe only restrictions are that block-level HTML elements -- e.g. `<div>`,\n`<table>`, `<pre>`, `<p>`, etc. -- must be separated from surrounding\ncontent by blank lines, and the start and end tags of the block should\nnot be indented with tabs or spaces. Markdown is smart enough not\nto add extra (unwanted) `<p>` tags around HTML block-level tags.\n\nFor example, to add an HTML table to a Markdown article:\n\n    This is a regular paragraph.\n\n    <table>\n        <tr>\n            <td>Foo</td>\n        </tr>\n    </table>\n\n    This is another regular paragraph.\n\nNote that Markdown formatting syntax is not processed within block-level\nHTML tags. E.g., you can't use Markdown-style `*emphasis*` inside an\nHTML block.\n\nSpan-level HTML tags -- e.g. `<span>`, `<cite>`, or `<del>` -- can be\nused anywhere in a Markdown paragraph, list item, or header. If you\nwant, you can even use HTML tags instead of Markdown formatting; e.g. if\nyou'd prefer to use HTML `<a>` or `<img>` tags instead of Markdown's\nlink or image syntax, go right ahead.\n\nUnlike block-level HTML tags, Markdown syntax *is* processed within\nspan-level tags.\n\n\n<h3 id=\"autoescape\">Automatic Escaping for Special Characters</h3>\n\nIn HTML, there are two characters that demand special treatment: `<`\nand `&`. Left angle brackets are used to start tags; ampersands are\nused to denote HTML entities. If you want to use them as literal\ncharacters, you must escape them as entities, e.g. `&lt;`, and\n`&amp;`.\n\nAmpersands in particular are bedeviling for web writers. If you want to\nwrite about 'AT&T', you need to write '`AT&amp;T`'. You even need to\nescape ampersands within URLs. Thus, if you want to link to:\n\n    http://images.google.com/images?num=30&q=larry+bird\n\nyou need to encode the URL as:\n\n    http://images.google.com/images?num=30&amp;q=larry+bird\n\nin your anchor tag `href` attribute. Needless to say, this is easy to\nforget, and is probably the single most common source of HTML validation\nerrors in otherwise well-marked-up web sites.\n\nMarkdown allows you to use these characters naturally, taking care of\nall the necessary escaping for you. If you use an ampersand as part of\nan HTML entity, it remains unchanged; otherwise it will be translated\ninto `&amp;`.\n\nSo, if you want to include a copyright symbol in your article, you can write:\n\n    &copy;\n\nand Markdown will leave it alone. But if you write:\n\n    AT&T\n\nMarkdown will translate it to:\n\n    AT&amp;T\n\nSimilarly, because Markdown supports [inline HTML](#html), if you use\nangle brackets as delimiters for HTML tags, Markdown will treat them as\nsuch. But if you write:\n\n    4 < 5\n\nMarkdown will translate it to:\n\n    4 &lt; 5\n\nHowever, inside Markdown code spans and blocks, angle brackets and\nampersands are *always* encoded automatically. This makes it easy to use\nMarkdown to write about HTML code. (As opposed to raw HTML, which is a\nterrible format for writing about HTML syntax, because every single `<`\nand `&` in your example code needs to be escaped.)\n\n\n* * *\n\n\n<h2 id=\"block\">Block Elements</h2>\n\n\n<h3 id=\"p\">Paragraphs and Line Breaks</h3>\n\nA paragraph is simply one or more consecutive lines of text, separated\nby one or more blank lines. (A blank line is any line that looks like a\nblank line -- a line containing nothing but spaces or tabs is considered\nblank.) Normal paragraphs should not be intended with spaces or tabs.\n\nThe implication of the \"one or more consecutive lines of text\" rule is\nthat Markdown supports \"hard-wrapped\" text paragraphs. This differs\nsignificantly from most other text-to-HTML formatters (including Movable\nType's \"Convert Line Breaks\" option) which translate every line break\ncharacter in a paragraph into a `<br />` tag.\n\nWhen you *do* want to insert a `<br />` break tag using Markdown, you\nend a line with two or more spaces, then type return.\n\nYes, this takes a tad more effort to create a `<br />`, but a simplistic\n\"every line break is a `<br />`\" rule wouldn't work for Markdown.\nMarkdown's email-style [blockquoting][bq] and multi-paragraph [list items][l]\nwork best -- and look better -- when you format them with hard breaks.\n\n  [bq]: #blockquote\n  [l]:  #list\n\n\n\n<h3 id=\"header\">Headers</h3>\n\nMarkdown supports two styles of headers, [Setext] [1] and [atx] [2].\n\nSetext-style headers are \"underlined\" using equal signs (for first-level\nheaders) and dashes (for second-level headers). For example:\n\n    This is an H1\n    =============\n\n    This is an H2\n    -------------\n\nAny number of underlining `=`'s or `-`'s will work.\n\nAtx-style headers use 1-6 hash characters at the start of the line,\ncorresponding to header levels 1-6. For example:\n\n    # This is an H1\n\n    ## This is an H2\n\n    ###### This is an H6\n\nOptionally, you may \"close\" atx-style headers. This is purely\ncosmetic -- you can use this if you think it looks better. The\nclosing hashes don't even need to match the number of hashes\nused to open the header. (The number of opening hashes\ndetermines the header level.) :\n\n    # This is an H1 #\n\n    ## This is an H2 ##\n\n    ### This is an H3 ######\n\n\n<h3 id=\"blockquote\">Blockquotes</h3>\n\nMarkdown uses email-style `>` characters for blockquoting. If you're\nfamiliar with quoting passages of text in an email message, then you\nknow how to create a blockquote in Markdown. It looks best if you hard\nwrap the text and put a `>` before every line:\n\n    > This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,\n    > consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.\n    > Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.\n    > \n    > Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse\n    > id sem consectetuer libero luctus adipiscing.\n\nMarkdown allows you to be lazy and only put the `>` before the first\nline of a hard-wrapped paragraph:\n\n    > This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,\n    consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.\n    Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.\n\n    > Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse\n    id sem consectetuer libero luctus adipiscing.\n\nBlockquotes can be nested (i.e. a blockquote-in-a-blockquote) by\nadding additional levels of `>`:\n\n    > This is the first level of quoting.\n    >\n    > > This is nested blockquote.\n    >\n    > Back to the first level.\n\nBlockquotes can contain other Markdown elements, including headers, lists,\nand code blocks:\n\n\t> ## This is a header.\n\t> \n\t> 1.   This is the first list item.\n\t> 2.   This is the second list item.\n\t> \n\t> Here's some example code:\n\t> \n\t>     return shell_exec(\"echo $input | $markdown_script\");\n\nAny decent text editor should make email-style quoting easy. For\nexample, with BBEdit, you can make a selection and choose Increase\nQuote Level from the Text menu.\n\n\n<h3 id=\"list\">Lists</h3>\n\nMarkdown supports ordered (numbered) and unordered (bulleted) lists.\n\nUnordered lists use asterisks, pluses, and hyphens -- interchangably\n-- as list markers:\n\n    *   Red\n    *   Green\n    *   Blue\n\nis equivalent to:\n\n    +   Red\n    +   Green\n    +   Blue\n\nand:\n\n    -   Red\n    -   Green\n    -   Blue\n\nOrdered lists use numbers followed by periods:\n\n    1.  Bird\n    2.  McHale\n    3.  Parish\n\nIt's important to note that the actual numbers you use to mark the\nlist have no effect on the HTML output Markdown produces. The HTML\nMarkdown produces from the above list is:\n\n    <ol>\n    <li>Bird</li>\n    <li>McHale</li>\n    <li>Parish</li>\n    </ol>\n\nIf you instead wrote the list in Markdown like this:\n\n    1.  Bird\n    1.  McHale\n    1.  Parish\n\nor even:\n\n    3. Bird\n    1. McHale\n    8. Parish\n\nyou'd get the exact same HTML output. The point is, if you want to,\nyou can use ordinal numbers in your ordered Markdown lists, so that\nthe numbers in your source match the numbers in your published HTML.\nBut if you want to be lazy, you don't have to.\n\nIf you do use lazy list numbering, however, you should still start the\nlist with the number 1. At some point in the future, Markdown may support\nstarting ordered lists at an arbitrary number.\n\nList markers typically start at the left margin, but may be indented by\nup to three spaces. List markers must be followed by one or more spaces\nor a tab.\n\nTo make lists look nice, you can wrap items with hanging indents:\n\n    *   Lorem ipsum dolor sit amet, consectetuer adipiscing elit.\n        Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,\n        viverra nec, fringilla in, laoreet vitae, risus.\n    *   Donec sit amet nisl. Aliquam semper ipsum sit amet velit.\n        Suspendisse id sem consectetuer libero luctus adipiscing.\n\nBut if you want to be lazy, you don't have to:\n\n    *   Lorem ipsum dolor sit amet, consectetuer adipiscing elit.\n    Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,\n    viverra nec, fringilla in, laoreet vitae, risus.\n    *   Donec sit amet nisl. Aliquam semper ipsum sit amet velit.\n    Suspendisse id sem consectetuer libero luctus adipiscing.\n\nIf list items are separated by blank lines, Markdown will wrap the\nitems in `<p>` tags in the HTML output. For example, this input:\n\n    *   Bird\n    *   Magic\n\nwill turn into:\n\n    <ul>\n    <li>Bird</li>\n    <li>Magic</li>\n    </ul>\n\nBut this:\n\n    *   Bird\n\n    *   Magic\n\nwill turn into:\n\n    <ul>\n    <li><p>Bird</p></li>\n    <li><p>Magic</p></li>\n    </ul>\n\nList items may consist of multiple paragraphs. Each subsequent\nparagraph in a list item must be intended by either 4 spaces\nor one tab:\n\n    1.  This is a list item with two paragraphs. Lorem ipsum dolor\n        sit amet, consectetuer adipiscing elit. Aliquam hendrerit\n        mi posuere lectus.\n\n        Vestibulum enim wisi, viverra nec, fringilla in, laoreet\n        vitae, risus. Donec sit amet nisl. Aliquam semper ipsum\n        sit amet velit.\n\n    2.  Suspendisse id sem consectetuer libero luctus adipiscing.\n\nIt looks nice if you indent every line of the subsequent\nparagraphs, but here again, Markdown will allow you to be\nlazy:\n\n    *   This is a list item with two paragraphs.\n\n        This is the second paragraph in the list item. You're\n    only required to indent the first line. Lorem ipsum dolor\n    sit amet, consectetuer adipiscing elit.\n\n    *   Another item in the same list.\n\nTo put a blockquote within a list item, the blockquote's `>`\ndelimiters need to be indented:\n\n    *   A list item with a blockquote:\n\n        > This is a blockquote\n        > inside a list item.\n\nTo put a code block within a list item, the code block needs\nto be indented *twice* -- 8 spaces or two tabs:\n\n    *   A list item with a code block:\n\n            <code goes here>\n\n\nIt's worth noting that it's possible to trigger an ordered list by\naccident, by writing something like this:\n\n    1986. What a great season.\n\nIn other words, a *number-period-space* sequence at the beginning of a\nline. To avoid this, you can backslash-escape the period:\n\n    1986\\. What a great season.\n\n\n\n<h3 id=\"precode\">Code Blocks</h3>\n\nPre-formatted code blocks are used for writing about programming or\nmarkup source code. Rather than forming normal paragraphs, the lines\nof a code block are interpreted literally. Markdown wraps a code block\nin both `<pre>` and `<code>` tags.\n\nTo produce a code block in Markdown, simply indent every line of the\nblock by at least 4 spaces or 1 tab. For example, given this input:\n\n    This is a normal paragraph:\n\n        This is a code block.\n\nMarkdown will generate:\n\n    <p>This is a normal paragraph:</p>\n\n    <pre><code>This is a code block.\n    </code></pre>\n\nOne level of indentation -- 4 spaces or 1 tab -- is removed from each\nline of the code block. For example, this:\n\n    Here is an example of AppleScript:\n\n        tell application \"Foo\"\n            beep\n        end tell\n\nwill turn into:\n\n    <p>Here is an example of AppleScript:</p>\n\n    <pre><code>tell application \"Foo\"\n        beep\n    end tell\n    </code></pre>\n\nA code block continues until it reaches a line that is not indented\n(or the end of the article).\n\nWithin a code block, ampersands (`&`) and angle brackets (`<` and `>`)\nare automatically converted into HTML entities. This makes it very\neasy to include example HTML source code using Markdown -- just paste\nit and indent it, and Markdown will handle the hassle of encoding the\nampersands and angle brackets. For example, this:\n\n        <div class=\"footer\">\n            &copy; 2004 Foo Corporation\n        </div>\n\nwill turn into:\n\n    <pre><code>&lt;div class=\"footer\"&gt;\n        &amp;copy; 2004 Foo Corporation\n    &lt;/div&gt;\n    </code></pre>\n\nRegular Markdown syntax is not processed within code blocks. E.g.,\nasterisks are just literal asterisks within a code block. This means\nit's also easy to use Markdown to write about Markdown's own syntax.\n\n\n\n<h3 id=\"hr\">Horizontal Rules</h3>\n\nYou can produce a horizontal rule tag (`<hr />`) by placing three or\nmore hyphens, asterisks, or underscores on a line by themselves. If you\nwish, you may use spaces between the hyphens or asterisks. Each of the\nfollowing lines will produce a horizontal rule:\n\n    * * *\n\n    ***\n\n    *****\n\t\n    - - -\n\n    ---------------------------------------\n\n\t_ _ _\n\n\n* * *\n\n<h2 id=\"span\">Span Elements</h2>\n\n<h3 id=\"link\">Links</h3>\n\nMarkdown supports two style of links: *inline* and *reference*.\n\nIn both styles, the link text is delimited by [square brackets].\n\nTo create an inline link, use a set of regular parentheses immediately\nafter the link text's closing square bracket. Inside the parentheses,\nput the URL where you want the link to point, along with an *optional*\ntitle for the link, surrounded in quotes. For example:\n\n    This is [an example](http://example.com/ \"Title\") inline link.\n\n    [This link](http://example.net/) has no title attribute.\n\nWill produce:\n\n    <p>This is <a href=\"http://example.com/\" title=\"Title\">\n    an example</a> inline link.</p>\n\n    <p><a href=\"http://example.net/\">This link</a> has no\n    title attribute.</p>\n\nIf you're referring to a local resource on the same server, you can\nuse relative paths:\n\n    See my [About](/about/) page for details.\n\nReference-style links use a second set of square brackets, inside\nwhich you place a label of your choosing to identify the link:\n\n    This is [an example][id] reference-style link.\n\nYou can optionally use a space to separate the sets of brackets:\n\n    This is [an example] [id] reference-style link.\n\nThen, anywhere in the document, you define your link label like this,\non a line by itself:\n\n    [id]: http://example.com/  \"Optional Title Here\"\n\nThat is:\n\n*   Square brackets containing the link identifier (optionally\n    indented from the left margin using up to three spaces);\n*   followed by a colon;\n*   followed by one or more spaces (or tabs);\n*   followed by the URL for the link;\n*   optionally followed by a title attribute for the link, enclosed\n    in double or single quotes.\n\nThe link URL may, optionally, be surrounded by angle brackets:\n\n    [id]: <http://example.com/>  \"Optional Title Here\"\n\nYou can put the title attribute on the next line and use extra spaces\nor tabs for padding, which tends to look better with longer URLs:\n\n    [id]: http://example.com/longish/path/to/resource/here\n        \"Optional Title Here\"\n\nLink definitions are only used for creating links during Markdown\nprocessing, and are stripped from your document in the HTML output.\n\nLink definition names may constist of letters, numbers, spaces, and punctuation -- but they are *not* case sensitive. E.g. these two links:\n\n\t[link text][a]\n\t[link text][A]\n\nare equivalent.\n\nThe *implicit link name* shortcut allows you to omit the name of the\nlink, in which case the link text itself is used as the name.\nJust use an empty set of square brackets -- e.g., to link the word\n\"Google\" to the google.com web site, you could simply write:\n\n\t[Google][]\n\nAnd then define the link:\n\n\t[Google]: http://google.com/\n\nBecause link names may contain spaces, this shortcut even works for\nmultiple words in the link text:\n\n\tVisit [Daring Fireball][] for more information.\n\nAnd then define the link:\n\t\n\t[Daring Fireball]: http://daringfireball.net/\n\nLink definitions can be placed anywhere in your Markdown document. I\ntend to put them immediately after each paragraph in which they're\nused, but if you want, you can put them all at the end of your\ndocument, sort of like footnotes.\n\nHere's an example of reference links in action:\n\n    I get 10 times more traffic from [Google] [1] than from\n    [Yahoo] [2] or [MSN] [3].\n\n      [1]: http://google.com/        \"Google\"\n      [2]: http://search.yahoo.com/  \"Yahoo Search\"\n      [3]: http://search.msn.com/    \"MSN Search\"\n\nUsing the implicit link name shortcut, you could instead write:\n\n    I get 10 times more traffic from [Google][] than from\n    [Yahoo][] or [MSN][].\n\n      [google]: http://google.com/        \"Google\"\n      [yahoo]:  http://search.yahoo.com/  \"Yahoo Search\"\n      [msn]:    http://search.msn.com/    \"MSN Search\"\n\nBoth of the above examples will produce the following HTML output:\n\n    <p>I get 10 times more traffic from <a href=\"http://google.com/\"\n    title=\"Google\">Google</a> than from\n    <a href=\"http://search.yahoo.com/\" title=\"Yahoo Search\">Yahoo</a>\n    or <a href=\"http://search.msn.com/\" title=\"MSN Search\">MSN</a>.</p>\n\nFor comparison, here is the same paragraph written using\nMarkdown's inline link style:\n\n    I get 10 times more traffic from [Google](http://google.com/ \"Google\")\n    than from [Yahoo](http://search.yahoo.com/ \"Yahoo Search\") or\n    [MSN](http://search.msn.com/ \"MSN Search\").\n\nThe point of reference-style links is not that they're easier to\nwrite. The point is that with reference-style links, your document\nsource is vastly more readable. Compare the above examples: using\nreference-style links, the paragraph itself is only 81 characters\nlong; with inline-style links, it's 176 characters; and as raw HTML,\nit's 234 characters. In the raw HTML, there's more markup than there\nis text.\n\nWith Markdown's reference-style links, a source document much more\nclosely resembles the final output, as rendered in a browser. By\nallowing you to move the markup-related metadata out of the paragraph,\nyou can add links without interrupting the narrative flow of your\nprose.\n\n\n<h3 id=\"em\">Emphasis</h3>\n\nMarkdown treats asterisks (`*`) and underscores (`_`) as indicators of\nemphasis. Text wrapped with one `*` or `_` will be wrapped with an\nHTML `<em>` tag; double `*`'s or `_`'s will be wrapped with an HTML\n`<strong>` tag. E.g., this input:\n\n    *single asterisks*\n\n    _single underscores_\n\n    **double asterisks**\n\n    __double underscores__\n\nwill produce:\n\n    <em>single asterisks</em>\n\n    <em>single underscores</em>\n\n    <strong>double asterisks</strong>\n\n    <strong>double underscores</strong>\n\nYou can use whichever style you prefer; the lone restriction is that\nthe same character must be used to open and close an emphasis span.\n\nEmphasis can be used in the middle of a word:\n\n    un*fucking*believable\n\nBut if you surround an `*` or `_` with spaces, it'll be treated as a\nliteral asterisk or underscore.\n\nTo produce a literal asterisk or underscore at a position where it\nwould otherwise be used as an emphasis delimiter, you can backslash\nescape it:\n\n    \\*this text is surrounded by literal asterisks\\*\n\n\n\n<h3 id=\"code\">Code</h3>\n\nTo indicate a span of code, wrap it with backtick quotes (`` ` ``).\nUnlike a pre-formatted code block, a code span indicates code within a\nnormal paragraph. For example:\n\n    Use the `printf()` function.\n\nwill produce:\n\n    <p>Use the <code>printf()</code> function.</p>\n\nTo include a literal backtick character within a code span, you can use\nmultiple backticks as the opening and closing delimiters:\n\n    ``There is a literal backtick (`) here.``\n\nwhich will produce this:\n\n    <p><code>There is a literal backtick (`) here.</code></p>\n\nThe backtick delimiters surrounding a code span may include spaces --\none after the opening, one before the closing. This allows you to place\nliteral backtick characters at the beginning or end of a code span:\n\n\tA single backtick in a code span: `` ` ``\n\t\n\tA backtick-delimited string in a code span: `` `foo` ``\n\nwill produce:\n\n\t<p>A single backtick in a code span: <code>`</code></p>\n\t\n\t<p>A backtick-delimited string in a code span: <code>`foo`</code></p>\n\nWith a code span, ampersands and angle brackets are encoded as HTML\nentities automatically, which makes it easy to include example HTML\ntags. Markdown will turn this:\n\n    Please don't use any `<blink>` tags.\n\ninto:\n\n    <p>Please don't use any <code>&lt;blink&gt;</code> tags.</p>\n\nYou can write this:\n\n    `&#8212;` is the decimal-encoded equivalent of `&mdash;`.\n\nto produce:\n\n    <p><code>&amp;#8212;</code> is the decimal-encoded\n    equivalent of <code>&amp;mdash;</code>.</p>\n\n\n\n<h3 id=\"img\">Images</h3>\n\nAdmittedly, it's fairly difficult to devise a \"natural\" syntax for\nplacing images into a plain text document format.\n\nMarkdown uses an image syntax that is intended to resemble the syntax\nfor links, allowing for two styles: *inline* and *reference*.\n\nInline image syntax looks like this:\n\n    ![Alt text](/path/to/img.jpg)\n\n    ![Alt text](/path/to/img.jpg \"Optional title\")\n\nThat is:\n\n*   An exclamation mark: `!`;\n*   followed by a set of square brackets, containing the `alt`\n    attribute text for the image;\n*   followed by a set of parentheses, containing the URL or path to\n    the image, and an optional `title` attribute enclosed in double\n    or single quotes.\n\nReference-style image syntax looks like this:\n\n    ![Alt text][id]\n\nWhere \"id\" is the name of a defined image reference. Image references\nare defined using syntax identical to link references:\n\n    [id]: url/to/image  \"Optional title attribute\"\n\nAs of this writing, Markdown has no syntax for specifying the\ndimensions of an image; if this is important to you, you can simply\nuse regular HTML `<img>` tags.\n\n\n* * *\n\n\n<h2 id=\"misc\">Miscellaneous</h2>\n\n<h3 id=\"autolink\">Automatic Links</h3>\n\nMarkdown supports a shortcut style for creating \"automatic\" links for URLs and email addresses: simply surround the URL or email address with angle brackets. What this means is that if you want to show the actual text of a URL or email address, and also have it be a clickable link, you can do this:\n\n    <http://example.com/>\n    \nMarkdown will turn this into:\n\n    <a href=\"http://example.com/\">http://example.com/</a>\n\nAutomatic links for email addresses work similarly, except that\nMarkdown will also perform a bit of randomized decimal and hex\nentity-encoding to help obscure your address from address-harvesting\nspambots. For example, Markdown will turn this:\n\n    <address@example.com>\n\ninto something like this:\n\n    <a href=\"&#x6D;&#x61;i&#x6C;&#x74;&#x6F;:&#x61;&#x64;&#x64;&#x72;&#x65;\n    &#115;&#115;&#64;&#101;&#120;&#x61;&#109;&#x70;&#x6C;e&#x2E;&#99;&#111;\n    &#109;\">&#x61;&#x64;&#x64;&#x72;&#x65;&#115;&#115;&#64;&#101;&#120;&#x61;\n    &#109;&#x70;&#x6C;e&#x2E;&#99;&#111;&#109;</a>\n\nwhich will render in a browser as a clickable link to \"address@example.com\".\n\n(This sort of entity-encoding trick will indeed fool many, if not\nmost, address-harvesting bots, but it definitely won't fool all of\nthem. It's better than nothing, but an address published in this way\nwill probably eventually start receiving spam.)\n\n\n\n<h3 id=\"backslash\">Backslash Escapes</h3>\n\nMarkdown allows you to use backslash escapes to generate literal\ncharacters which would otherwise have special meaning in Markdown's\nformatting syntax. For example, if you wanted to surround a word with\nliteral asterisks (instead of an HTML `<em>` tag), you can backslashes\nbefore the asterisks, like this:\n\n    \\*literal asterisks\\*\n\nMarkdown provides backslash escapes for the following characters:\n\n    \\   backslash\n    `   backtick\n    *   asterisk\n    _   underscore\n    {}  curly braces\n    []  square brackets\n    ()  parentheses\n    #   hash mark\n\t+\tplus sign\n\t-\tminus sign (hyphen)\n    .   dot\n    !   exclamation mark\n\n") == "<h1>Markdown: Syntax</h1>\n\n<ul id=\"ProjectSubmenu\">\n    <li><a href=\"/projects/markdown/\" title=\"Markdown Project Page\">Main</a></li>\n    <li><a href=\"/projects/markdown/basics\" title=\"Markdown Basics\">Basics</a></li>\n    <li><a class=\"selected\" title=\"Markdown Syntax Documentation\">Syntax</a></li>\n    <li><a href=\"/projects/markdown/license\" title=\"Pricing and License Information\">License</a></li>\n    <li><a href=\"/projects/markdown/dingus\" title=\"Online Markdown Web Form\">Dingus</a></li>\n</ul>\n\n<ul>\n<li><a href=\"#overview\">Overview</a>\n<ul><li><a href=\"#philosophy\">Philosophy</a></li>\n<li><a href=\"#html\">Inline HTML</a></li>\n<li><a href=\"#autoescape\">Automatic Escaping for Special Characters</a></li></ul></li>\n<li><a href=\"#block\">Block Elements</a>\n<ul><li><a href=\"#p\">Paragraphs and Line Breaks</a></li>\n<li><a href=\"#header\">Headers</a></li>\n<li><a href=\"#blockquote\">Blockquotes</a></li>\n<li><a href=\"#list\">Lists</a></li>\n<li><a href=\"#precode\">Code Blocks</a></li>\n<li><a href=\"#hr\">Horizontal Rules</a></li></ul></li>\n<li><a href=\"#span\">Span Elements</a>\n<ul><li><a href=\"#link\">Links</a></li>\n<li><a href=\"#em\">Emphasis</a></li>\n<li><a href=\"#code\">Code</a></li>\n<li><a href=\"#img\">Images</a></li></ul></li>\n<li><a href=\"#misc\">Miscellaneous</a>\n<ul><li><a href=\"#backslash\">Backslash Escapes</a></li>\n<li><a href=\"#autolink\">Automatic Links</a></li></ul></li>\n</ul>\n\n<p><strong>Note:</strong> This document is itself written using Markdown; you\ncan <a href=\"/projects/markdown/syntax.text\">see the source for it by adding '.text' to the URL</a>.</p>\n\n<hr />\n\n<h2 id=\"overview\">Overview</h2>\n\n<h3 id=\"philosophy\">Philosophy</h3>\n\n<p>Markdown is intended to be as easy-to-read and easy-to-write as is feasible.</p>\n\n<p>Readability, however, is emphasized above all else. A Markdown-formatted\ndocument should be publishable as-is, as plain text, without looking\nlike it's been marked up with tags or formatting instructions. While\nMarkdown's syntax has been influenced by several existing text-to-HTML\nfilters -- including <a href=\"http://docutils.sourceforge.net/mirror/setext.html\">Setext</a>, <a href=\"http://www.aaronsw.com/2002/atx/\">atx</a>, <a href=\"http://textism.com/tools/textile/\">Textile</a>, <a href=\"http://docutils.sourceforge.net/rst.html\">reStructuredText</a>,\n<a href=\"http://www.triptico.com/software/grutatxt.html\">Grutatext</a>, and <a href=\"http://ettext.taint.org/doc/\">EtText</a> -- the single biggest source of\ninspiration for Markdown's syntax is the format of plain text email.</p>\n\n<p>To this end, Markdown's syntax is comprised entirely of punctuation\ncharacters, which punctuation characters have been carefully chosen so\nas to look like what they mean. E.g., asterisks around a word actually\nlook like *emphasis*. Markdown lists look like, well, lists. Even\nblockquotes look like quoted passages of text, assuming you've ever\nused email.</p>\n\n<h3 id=\"html\">Inline HTML</h3>\n\n<p>Markdown's syntax is intended for one purpose: to be used as a\nformat for <em>writing</em> for the web.</p>\n\n<p>Markdown is not a replacement for HTML, or even close to it. Its\nsyntax is very small, corresponding only to a very small subset of\nHTML tags. The idea is <em>not</em> to create a syntax that makes it easier\nto insert HTML tags. In my opinion, HTML tags are already easy to\ninsert. The idea for Markdown is to make it easy to read, write, and\nedit prose. HTML is a <em>publishing</em> format; Markdown is a <em>writing</em>\nformat. Thus, Markdown's formatting syntax only addresses issues that\ncan be conveyed in plain text.</p>\n\n<p>For any markup that is not covered by Markdown's syntax, you simply\nuse HTML itself. There's no need to preface it or delimit it to\nindicate that you're switching from Markdown to HTML; you just use\nthe tags.</p>\n\n<p>The only restrictions are that block-level HTML elements -- e.g. <code>&lt;div&gt;</code>,\n<code>&lt;table&gt;</code>, <code>&lt;pre&gt;</code>, <code>&lt;p&gt;</code>, etc. -- must be separated from surrounding\ncontent by blank lines, and the start and end tags of the block should\nnot be indented with tabs or spaces. Markdown is smart enough not\nto add extra (unwanted) <code>&lt;p&gt;</code> tags around HTML block-level tags.</p>\n\n<p>For example, to add an HTML table to a Markdown article:</p>\n\n<pre><code>This is a regular paragraph.\n\n&lt;table&gt;\n    &lt;tr&gt;\n        &lt;td&gt;Foo&lt;/td&gt;\n    &lt;/tr&gt;\n&lt;/table&gt;\n\nThis is another regular paragraph.\n</code></pre>\n\n<p>Note that Markdown formatting syntax is not processed within block-level\nHTML tags. E.g., you can't use Markdown-style <code>*emphasis*</code> inside an\nHTML block.</p>\n\n<p>Span-level HTML tags -- e.g. <code>&lt;span&gt;</code>, <code>&lt;cite&gt;</code>, or <code>&lt;del&gt;</code> -- can be\nused anywhere in a Markdown paragraph, list item, or header. If you\nwant, you can even use HTML tags instead of Markdown formatting; e.g. if\nyou'd prefer to use HTML <code>&lt;a&gt;</code> or <code>&lt;img&gt;</code> tags instead of Markdown's\nlink or image syntax, go right ahead.</p>\n\n<p>Unlike block-level HTML tags, Markdown syntax <em>is</em> processed within\nspan-level tags.</p>\n\n<h3 id=\"autoescape\">Automatic Escaping for Special Characters</h3>\n\n<p>In HTML, there are two characters that demand special treatment: <code>&lt;</code>\nand <code>&amp;</code>. Left angle brackets are used to start tags; ampersands are\nused to denote HTML entities. If you want to use them as literal\ncharacters, you must escape them as entities, e.g. <code>&amp;lt;</code>, and\n<code>&amp;amp;</code>.</p>\n\n<p>Ampersands in particular are bedeviling for web writers. If you want to\nwrite about 'AT&amp;T', you need to write '<code>AT&amp;amp;T</code>'. You even need to\nescape ampersands within URLs. Thus, if you want to link to:</p>\n\n<pre><code>http://images.google.com/images?num=30&amp;q=larry+bird\n</code></pre>\n\n<p>you need to encode the URL as:</p>\n\n<pre><code>http://images.google.com/images?num=30&amp;amp;q=larry+bird\n</code></pre>\n\n<p>in your anchor tag <code>href</code> attribute. Needless to say, this is easy to\nforget, and is probably the single most common source of HTML validation\nerrors in otherwise well-marked-up web sites.</p>\n\n<p>Markdown allows you to use these characters naturally, taking care of\nall the necessary escaping for you. If you use an ampersand as part of\nan HTML entity, it remains unchanged; otherwise it will be translated\ninto <code>&amp;amp;</code>.</p>\n\n<p>So, if you want to include a copyright symbol in your article, you can write:</p>\n\n<pre><code>&amp;copy;\n</code></pre>\n\n<p>and Markdown will leave it alone. But if you write:</p>\n\n<pre><code>AT&amp;T\n</code></pre>\n\n<p>Markdown will translate it to:</p>\n\n<pre><code>AT&amp;amp;T\n</code></pre>\n\n<p>Similarly, because Markdown supports <a href=\"#html\">inline HTML</a>, if you use\nangle brackets as delimiters for HTML tags, Markdown will treat them as\nsuch. But if you write:</p>\n\n<pre><code>4 &lt; 5\n</code></pre>\n\n<p>Markdown will translate it to:</p>\n\n<pre><code>4 &amp;lt; 5\n</code></pre>\n\n<p>However, inside Markdown code spans and blocks, angle brackets and\nampersands are <em>always</em> encoded automatically. This makes it easy to use\nMarkdown to write about HTML code. (As opposed to raw HTML, which is a\nterrible format for writing about HTML syntax, because every single <code>&lt;</code>\nand <code>&amp;</code> in your example code needs to be escaped.)</p>\n\n<hr />\n\n<h2 id=\"block\">Block Elements</h2>\n\n<h3 id=\"p\">Paragraphs and Line Breaks</h3>\n\n<p>A paragraph is simply one or more consecutive lines of text, separated\nby one or more blank lines. (A blank line is any line that looks like a\nblank line -- a line containing nothing but spaces or tabs is considered\nblank.) Normal paragraphs should not be intended with spaces or tabs.</p>\n\n<p>The implication of the \"one or more consecutive lines of text\" rule is\nthat Markdown supports \"hard-wrapped\" text paragraphs. This differs\nsignificantly from most other text-to-HTML formatters (including Movable\nType's \"Convert Line Breaks\" option) which translate every line break\ncharacter in a paragraph into a <code>&lt;br /&gt;</code> tag.</p>\n\n<p>When you <em>do</em> want to insert a <code>&lt;br /&gt;</code> break tag using Markdown, you\nend a line with two or more spaces, then type return.</p>\n\n<p>Yes, this takes a tad more effort to create a <code>&lt;br /&gt;</code>, but a simplistic\n\"every line break is a <code>&lt;br /&gt;</code>\" rule wouldn't work for Markdown.\nMarkdown's email-style <a href=\"#blockquote\">blockquoting</a> and multi-paragraph <a href=\"#list\">list items</a>\nwork best -- and look better -- when you format them with hard breaks.</p>\n\n<h3 id=\"header\">Headers</h3>\n\n<p>Markdown supports two styles of headers, <a href=\"http://docutils.sourceforge.net/mirror/setext.html\">Setext</a> and <a href=\"http://www.aaronsw.com/2002/atx/\">atx</a>.</p>\n\n<p>Setext-style headers are \"underlined\" using equal signs (for first-level\nheaders) and dashes (for second-level headers). For example:</p>\n\n<pre><code>This is an H1\n=============\n\nThis is an H2\n-------------\n</code></pre>\n\n<p>Any number of underlining <code>=</code>'s or <code>-</code>'s will work.</p>\n\n<p>Atx-style headers use 1-6 hash characters at the start of the line,\ncorresponding to header levels 1-6. For example:</p>\n\n<pre><code># This is an H1\n\n## This is an H2\n\n###### This is an H6\n</code></pre>\n\n<p>Optionally, you may \"close\" atx-style headers. This is purely\ncosmetic -- you can use this if you think it looks better. The\nclosing hashes don't even need to match the number of hashes\nused to open the header. (The number of opening hashes\ndetermines the header level.) :</p>\n\n<pre><code># This is an H1 #\n\n## This is an H2 ##\n\n### This is an H3 ######\n</code></pre>\n\n<h3 id=\"blockquote\">Blockquotes</h3>\n\n<p>Markdown uses email-style <code>&gt;</code> characters for blockquoting. If you're\nfamiliar with quoting passages of text in an email message, then you\nknow how to create a blockquote in Markdown. It looks best if you hard\nwrap the text and put a <code>&gt;</code> before every line:</p>\n\n<pre><code>&gt; This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,\n&gt; consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.\n&gt; Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.\n&gt; \n&gt; Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse\n&gt; id sem consectetuer libero luctus adipiscing.\n</code></pre>\n\n<p>Markdown allows you to be lazy and only put the <code>&gt;</code> before the first\nline of a hard-wrapped paragraph:</p>\n\n<pre><code>&gt; This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,\nconsectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.\nVestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.\n\n&gt; Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse\nid sem consectetuer libero luctus adipiscing.\n</code></pre>\n\n<p>Blockquotes can be nested (i.e. a blockquote-in-a-blockquote) by\nadding additional levels of <code>&gt;</code>:</p>\n\n<pre><code>&gt; This is the first level of quoting.\n&gt;\n&gt; &gt; This is nested blockquote.\n&gt;\n&gt; Back to the first level.\n</code></pre>\n\n<p>Blockquotes can contain other Markdown elements, including headers, lists,\nand code blocks:</p>\n\n<pre><code>&gt; ## This is a header.\n&gt; \n&gt; 1.   This is the first list item.\n&gt; 2.   This is the second list item.\n&gt; \n&gt; Here's some example code:\n&gt; \n&gt;     return shell_exec(\"echo $input | $markdown_script\");\n</code></pre>\n\n<p>Any decent text editor should make email-style quoting easy. For\nexample, with BBEdit, you can make a selection and choose Increase\nQuote Level from the Text menu.</p>\n\n<h3 id=\"list\">Lists</h3>\n\n<p>Markdown supports ordered (numbered) and unordered (bulleted) lists.</p>\n\n<p>Unordered lists use asterisks, pluses, and hyphens -- interchangably\n-- as list markers:</p>\n\n<pre><code>*   Red\n*   Green\n*   Blue\n</code></pre>\n\n<p>is equivalent to:</p>\n\n<pre><code>+   Red\n+   Green\n+   Blue\n</code></pre>\n\n<p>and:</p>\n\n<pre><code>-   Red\n-   Green\n-   Blue\n</code></pre>\n\n<p>Ordered lists use numbers followed by periods:</p>\n\n<pre><code>1.  Bird\n2.  McHale\n3.  Parish\n</code></pre>\n\n<p>It's important to note that the actual numbers you use to mark the\nlist have no effect on the HTML output Markdown produces. The HTML\nMarkdown produces from the above list is:</p>\n\n<pre><code>&lt;ol&gt;\n&lt;li&gt;Bird&lt;/li&gt;\n&lt;li&gt;McHale&lt;/li&gt;\n&lt;li&gt;Parish&lt;/li&gt;\n&lt;/ol&gt;\n</code></pre>\n\n<p>If you instead wrote the list in Markdown like this:</p>\n\n<pre><code>1.  Bird\n1.  McHale\n1.  Parish\n</code></pre>\n\n<p>or even:</p>\n\n<pre><code>3. Bird\n1. McHale\n8. Parish\n</code></pre>\n\n<p>you'd get the exact same HTML output. The point is, if you want to,\nyou can use ordinal numbers in your ordered Markdown lists, so that\nthe numbers in your source match the numbers in your published HTML.\nBut if you want to be lazy, you don't have to.</p>\n\n<p>If you do use lazy list numbering, however, you should still start the\nlist with the number 1. At some point in the future, Markdown may support\nstarting ordered lists at an arbitrary number.</p>\n\n<p>List markers typically start at the left margin, but may be indented by\nup to three spaces. List markers must be followed by one or more spaces\nor a tab.</p>\n\n<p>To make lists look nice, you can wrap items with hanging indents:</p>\n\n<pre><code>*   Lorem ipsum dolor sit amet, consectetuer adipiscing elit.\n    Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,\n    viverra nec, fringilla in, laoreet vitae, risus.\n*   Donec sit amet nisl. Aliquam semper ipsum sit amet velit.\n    Suspendisse id sem consectetuer libero luctus adipiscing.\n</code></pre>\n\n<p>But if you want to be lazy, you don't have to:</p>\n\n<pre><code>*   Lorem ipsum dolor sit amet, consectetuer adipiscing elit.\nAliquam hendrerit mi posuere lectus. Vestibulum enim wisi,\nviverra nec, fringilla in, laoreet vitae, risus.\n*   Donec sit amet nisl. Aliquam semper ipsum sit amet velit.\nSuspendisse id sem consectetuer libero luctus adipiscing.\n</code></pre>\n\n<p>If list items are separated by blank lines, Markdown will wrap the\nitems in <code>&lt;p&gt;</code> tags in the HTML output. For example, this input:</p>\n\n<pre><code>*   Bird\n*   Magic\n</code></pre>\n\n<p>will turn into:</p>\n\n<pre><code>&lt;ul&gt;\n&lt;li&gt;Bird&lt;/li&gt;\n&lt;li&gt;Magic&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre>\n\n<p>But this:</p>\n\n<pre><code>*   Bird\n\n*   Magic\n</code></pre>\n\n<p>will turn into:</p>\n\n<pre><code>&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;Bird&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Magic&lt;/p&gt;&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre>\n\n<p>List items may consist of multiple paragraphs. Each subsequent\nparagraph in a list item must be intended by either 4 spaces\nor one tab:</p>\n\n<pre><code>1.  This is a list item with two paragraphs. Lorem ipsum dolor\n    sit amet, consectetuer adipiscing elit. Aliquam hendrerit\n    mi posuere lectus.\n\n    Vestibulum enim wisi, viverra nec, fringilla in, laoreet\n    vitae, risus. Donec sit amet nisl. Aliquam semper ipsum\n    sit amet velit.\n\n2.  Suspendisse id sem consectetuer libero luctus adipiscing.\n</code></pre>\n\n<p>It looks nice if you indent every line of the subsequent\nparagraphs, but here again, Markdown will allow you to be\nlazy:</p>\n\n<pre><code>*   This is a list item with two paragraphs.\n\n    This is the second paragraph in the list item. You're\nonly required to indent the first line. Lorem ipsum dolor\nsit amet, consectetuer adipiscing elit.\n\n*   Another item in the same list.\n</code></pre>\n\n<p>To put a blockquote within a list item, the blockquote's <code>&gt;</code>\ndelimiters need to be indented:</p>\n\n<pre><code>*   A list item with a blockquote:\n\n    &gt; This is a blockquote\n    &gt; inside a list item.\n</code></pre>\n\n<p>To put a code block within a list item, the code block needs\nto be indented <em>twice</em> -- 8 spaces or two tabs:</p>\n\n<pre><code>*   A list item with a code block:\n\n        &lt;code goes here&gt;\n</code></pre>\n\n<p>It's worth noting that it's possible to trigger an ordered list by\naccident, by writing something like this:</p>\n\n<pre><code>1986. What a great season.\n</code></pre>\n\n<p>In other words, a <em>number-period-space</em> sequence at the beginning of a\nline. To avoid this, you can backslash-escape the period:</p>\n\n<pre><code>1986\\. What a great season.\n</code></pre>\n\n<h3 id=\"precode\">Code Blocks</h3>\n\n<p>Pre-formatted code blocks are used for writing about programming or\nmarkup source code. Rather than forming normal paragraphs, the lines\nof a code block are interpreted literally. Markdown wraps a code block\nin both <code>&lt;pre&gt;</code> and <code>&lt;code&gt;</code> tags.</p>\n\n<p>To produce a code block in Markdown, simply indent every line of the\nblock by at least 4 spaces or 1 tab. For example, given this input:</p>\n\n<pre><code>This is a normal paragraph:\n\n    This is a code block.\n</code></pre>\n\n<p>Markdown will generate:</p>\n\n<pre><code>&lt;p&gt;This is a normal paragraph:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;This is a code block.\n&lt;/code&gt;&lt;/pre&gt;\n</code></pre>\n\n<p>One level of indentation -- 4 spaces or 1 tab -- is removed from each\nline of the code block. For example, this:</p>\n\n<pre><code>Here is an example of AppleScript:\n\n    tell application \"Foo\"\n        beep\n    end tell\n</code></pre>\n\n<p>will turn into:</p>\n\n<pre><code>&lt;p&gt;Here is an example of AppleScript:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;tell application \"Foo\"\n    beep\nend tell\n&lt;/code&gt;&lt;/pre&gt;\n</code></pre>\n\n<p>A code block continues until it reaches a line that is not indented\n(or the end of the article).</p>\n\n<p>Within a code block, ampersands (<code>&amp;</code>) and angle brackets (<code>&lt;</code> and <code>&gt;</code>)\nare automatically converted into HTML entities. This makes it very\neasy to include example HTML source code using Markdown -- just paste\nit and indent it, and Markdown will handle the hassle of encoding the\nampersands and angle brackets. For example, this:</p>\n\n<pre><code>    &lt;div class=\"footer\"&gt;\n        &amp;copy; 2004 Foo Corporation\n    &lt;/div&gt;\n</code></pre>\n\n<p>will turn into:</p>\n\n<pre><code>&lt;pre&gt;&lt;code&gt;&amp;lt;div class=\"footer\"&amp;gt;\n    &amp;amp;copy; 2004 Foo Corporation\n&amp;lt;/div&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n</code></pre>\n\n<p>Regular Markdown syntax is not processed within code blocks. E.g.,\nasterisks are just literal asterisks within a code block. This means\nit's also easy to use Markdown to write about Markdown's own syntax.</p>\n\n<h3 id=\"hr\">Horizontal Rules</h3>\n\n<p>You can produce a horizontal rule tag (<code>&lt;hr /&gt;</code>) by placing three or\nmore hyphens, asterisks, or underscores on a line by themselves. If you\nwish, you may use spaces between the hyphens or asterisks. Each of the\nfollowing lines will produce a horizontal rule:</p>\n\n<pre><code>* * *\n\n***\n\n*****\n\n- - -\n\n---------------------------------------\n\n_ _ _\n</code></pre>\n\n<hr />\n\n<h2 id=\"span\">Span Elements</h2>\n\n<h3 id=\"link\">Links</h3>\n\n<p>Markdown supports two style of links: <em>inline</em> and <em>reference</em>.</p>\n\n<p>In both styles, the link text is delimited by [square brackets].</p>\n\n<p>To create an inline link, use a set of regular parentheses immediately\nafter the link text's closing square bracket. Inside the parentheses,\nput the URL where you want the link to point, along with an <em>optional</em>\ntitle for the link, surrounded in quotes. For example:</p>\n\n<pre><code>This is [an example](http://example.com/ \"Title\") inline link.\n\n[This link](http://example.net/) has no title attribute.\n</code></pre>\n\n<p>Will produce:</p>\n\n<pre><code>&lt;p&gt;This is &lt;a href=\"http://example.com/\" title=\"Title\"&gt;\nan example&lt;/a&gt; inline link.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"http://example.net/\"&gt;This link&lt;/a&gt; has no\ntitle attribute.&lt;/p&gt;\n</code></pre>\n\n<p>If you're referring to a local resource on the same server, you can\nuse relative paths:</p>\n\n<pre><code>See my [About](/about/) page for details.\n</code></pre>\n\n<p>Reference-style links use a second set of square brackets, inside\nwhich you place a label of your choosing to identify the link:</p>\n\n<pre><code>This is [an example][id] reference-style link.\n</code></pre>\n\n<p>You can optionally use a space to separate the sets of brackets:</p>\n\n<pre><code>This is [an example] [id] reference-style link.\n</code></pre>\n\n<p>Then, anywhere in the document, you define your link label like this,\non a line by itself:</p>\n\n<pre><code>[id]: http://example.com/  \"Optional Title Here\"\n</code></pre>\n\n<p>That is:</p>\n\n<ul>\n<li>Square brackets containing the link identifier (optionally\nindented from the left margin using up to three spaces);</li>\n<li>followed by a colon;</li>\n<li>followed by one or more spaces (or tabs);</li>\n<li>followed by the URL for the link;</li>\n<li>optionally followed by a title attribute for the link, enclosed\nin double or single quotes.</li>\n</ul>\n\n<p>The link URL may, optionally, be surrounded by angle brackets:</p>\n\n<pre><code>[id]: &lt;http://example.com/&gt;  \"Optional Title Here\"\n</code></pre>\n\n<p>You can put the title attribute on the next line and use extra spaces\nor tabs for padding, which tends to look better with longer URLs:</p>\n\n<pre><code>[id]: http://example.com/longish/path/to/resource/here\n    \"Optional Title Here\"\n</code></pre>\n\n<p>Link definitions are only used for creating links during Markdown\nprocessing, and are stripped from your document in the HTML output.</p>\n\n<p>Link definition names may constist of letters, numbers, spaces, and punctuation -- but they are <em>not</em> case sensitive. E.g. these two links:</p>\n\n<pre><code>[link text][a]\n[link text][A]\n</code></pre>\n\n<p>are equivalent.</p>\n\n<p>The <em>implicit link name</em> shortcut allows you to omit the name of the\nlink, in which case the link text itself is used as the name.\nJust use an empty set of square brackets -- e.g., to link the word\n\"Google\" to the google.com web site, you could simply write:</p>\n\n<pre><code>[Google][]\n</code></pre>\n\n<p>And then define the link:</p>\n\n<pre><code>[Google]: http://google.com/\n</code></pre>\n\n<p>Because link names may contain spaces, this shortcut even works for\nmultiple words in the link text:</p>\n\n<pre><code>Visit [Daring Fireball][] for more information.\n</code></pre>\n\n<p>And then define the link:</p>\n\n<pre><code>[Daring Fireball]: http://daringfireball.net/\n</code></pre>\n\n<p>Link definitions can be placed anywhere in your Markdown document. I\ntend to put them immediately after each paragraph in which they're\nused, but if you want, you can put them all at the end of your\ndocument, sort of like footnotes.</p>\n\n<p>Here's an example of reference links in action:</p>\n\n<pre><code>I get 10 times more traffic from [Google] [1] than from\n[Yahoo] [2] or [MSN] [3].\n\n  [1]: http://google.com/        \"Google\"\n  [2]: http://search.yahoo.com/  \"Yahoo Search\"\n  [3]: http://search.msn.com/    \"MSN Search\"\n</code></pre>\n\n<p>Using the implicit link name shortcut, you could instead write:</p>\n\n<pre><code>I get 10 times more traffic from [Google][] than from\n[Yahoo][] or [MSN][].\n\n  [google]: http://google.com/        \"Google\"\n  [yahoo]:  http://search.yahoo.com/  \"Yahoo Search\"\n  [msn]:    http://search.msn.com/    \"MSN Search\"\n</code></pre>\n\n<p>Both of the above examples will produce the following HTML output:</p>\n\n<pre><code>&lt;p&gt;I get 10 times more traffic from &lt;a href=\"http://google.com/\"\ntitle=\"Google\"&gt;Google&lt;/a&gt; than from\n&lt;a href=\"http://search.yahoo.com/\" title=\"Yahoo Search\"&gt;Yahoo&lt;/a&gt;\nor &lt;a href=\"http://search.msn.com/\" title=\"MSN Search\"&gt;MSN&lt;/a&gt;.&lt;/p&gt;\n</code></pre>\n\n<p>For comparison, here is the same paragraph written using\nMarkdown's inline link style:</p>\n\n<pre><code>I get 10 times more traffic from [Google](http://google.com/ \"Google\")\nthan from [Yahoo](http://search.yahoo.com/ \"Yahoo Search\") or\n[MSN](http://search.msn.com/ \"MSN Search\").\n</code></pre>\n\n<p>The point of reference-style links is not that they're easier to\nwrite. The point is that with reference-style links, your document\nsource is vastly more readable. Compare the above examples: using\nreference-style links, the paragraph itself is only 81 characters\nlong; with inline-style links, it's 176 characters; and as raw HTML,\nit's 234 characters. In the raw HTML, there's more markup than there\nis text.</p>\n\n<p>With Markdown's reference-style links, a source document much more\nclosely resembles the final output, as rendered in a browser. By\nallowing you to move the markup-related metadata out of the paragraph,\nyou can add links without interrupting the narrative flow of your\nprose.</p>\n\n<h3 id=\"em\">Emphasis</h3>\n\n<p>Markdown treats asterisks (<code>*</code>) and underscores (<code>_</code>) as indicators of\nemphasis. Text wrapped with one <code>*</code> or <code>_</code> will be wrapped with an\nHTML <code>&lt;em&gt;</code> tag; double <code>*</code>'s or <code>_</code>'s will be wrapped with an HTML\n<code>&lt;strong&gt;</code> tag. E.g., this input:</p>\n\n<pre><code>*single asterisks*\n\n_single underscores_\n\n**double asterisks**\n\n__double underscores__\n</code></pre>\n\n<p>will produce:</p>\n\n<pre><code>&lt;em&gt;single asterisks&lt;/em&gt;\n\n&lt;em&gt;single underscores&lt;/em&gt;\n\n&lt;strong&gt;double asterisks&lt;/strong&gt;\n\n&lt;strong&gt;double underscores&lt;/strong&gt;\n</code></pre>\n\n<p>You can use whichever style you prefer; the lone restriction is that\nthe same character must be used to open and close an emphasis span.</p>\n\n<p>Emphasis can be used in the middle of a word:</p>\n\n<pre><code>un*fucking*believable\n</code></pre>\n\n<p>But if you surround an <code>*</code> or <code>_</code> with spaces, it'll be treated as a\nliteral asterisk or underscore.</p>\n\n<p>To produce a literal asterisk or underscore at a position where it\nwould otherwise be used as an emphasis delimiter, you can backslash\nescape it:</p>\n\n<pre><code>\\*this text is surrounded by literal asterisks\\*\n</code></pre>\n\n<h3 id=\"code\">Code</h3>\n\n<p>To indicate a span of code, wrap it with backtick quotes (<code>`</code>).\nUnlike a pre-formatted code block, a code span indicates code within a\nnormal paragraph. For example:</p>\n\n<pre><code>Use the `printf()` function.\n</code></pre>\n\n<p>will produce:</p>\n\n<pre><code>&lt;p&gt;Use the &lt;code&gt;printf()&lt;/code&gt; function.&lt;/p&gt;\n</code></pre>\n\n<p>To include a literal backtick character within a code span, you can use\nmultiple backticks as the opening and closing delimiters:</p>\n\n<pre><code>``There is a literal backtick (`) here.``\n</code></pre>\n\n<p>which will produce this:</p>\n\n<pre><code>&lt;p&gt;&lt;code&gt;There is a literal backtick (`) here.&lt;/code&gt;&lt;/p&gt;\n</code></pre>\n\n<p>The backtick delimiters surrounding a code span may include spaces --\none after the opening, one before the closing. This allows you to place\nliteral backtick characters at the beginning or end of a code span:</p>\n\n<pre><code>A single backtick in a code span: `` ` ``\n\nA backtick-delimited string in a code span: `` `foo` ``\n</code></pre>\n\n<p>will produce:</p>\n\n<pre><code>&lt;p&gt;A single backtick in a code span: &lt;code&gt;`&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;A backtick-delimited string in a code span: &lt;code&gt;`foo`&lt;/code&gt;&lt;/p&gt;\n</code></pre>\n\n<p>With a code span, ampersands and angle brackets are encoded as HTML\nentities automatically, which makes it easy to include example HTML\ntags. Markdown will turn this:</p>\n\n<pre><code>Please don't use any `&lt;blink&gt;` tags.\n</code></pre>\n\n<p>into:</p>\n\n<pre><code>&lt;p&gt;Please don't use any &lt;code&gt;&amp;lt;blink&amp;gt;&lt;/code&gt; tags.&lt;/p&gt;\n</code></pre>\n\n<p>You can write this:</p>\n\n<pre><code>`&amp;#8212;` is the decimal-encoded equivalent of `&amp;mdash;`.\n</code></pre>\n\n<p>to produce:</p>\n\n<pre><code>&lt;p&gt;&lt;code&gt;&amp;amp;#8212;&lt;/code&gt; is the decimal-encoded\nequivalent of &lt;code&gt;&amp;amp;mdash;&lt;/code&gt;.&lt;/p&gt;\n</code></pre>\n\n<h3 id=\"img\">Images</h3>\n\n<p>Admittedly, it's fairly difficult to devise a \"natural\" syntax for\nplacing images into a plain text document format.</p>\n\n<p>Markdown uses an image syntax that is intended to resemble the syntax\nfor links, allowing for two styles: <em>inline</em> and <em>reference</em>.</p>\n\n<p>Inline image syntax looks like this:</p>\n\n<pre><code>![Alt text](/path/to/img.jpg)\n\n![Alt text](/path/to/img.jpg \"Optional title\")\n</code></pre>\n\n<p>That is:</p>\n\n<ul>\n<li>An exclamation mark: <code>!</code>;</li>\n<li>followed by a set of square brackets, containing the <code>alt</code>\nattribute text for the image;</li>\n<li>followed by a set of parentheses, containing the URL or path to\nthe image, and an optional <code>title</code> attribute enclosed in double\nor single quotes.</li>\n</ul>\n\n<p>Reference-style image syntax looks like this:</p>\n\n<pre><code>![Alt text][id]\n</code></pre>\n\n<p>Where \"id\" is the name of a defined image reference. Image references\nare defined using syntax identical to link references:</p>\n\n<pre><code>[id]: url/to/image  \"Optional title attribute\"\n</code></pre>\n\n<p>As of this writing, Markdown has no syntax for specifying the\ndimensions of an image; if this is important to you, you can simply\nuse regular HTML <code>&lt;img&gt;</code> tags.</p>\n\n<hr />\n\n<h2 id=\"misc\">Miscellaneous</h2>\n\n<h3 id=\"autolink\">Automatic Links</h3>\n\n<p>Markdown supports a shortcut style for creating \"automatic\" links for URLs and email addresses: simply surround the URL or email address with angle brackets. What this means is that if you want to show the actual text of a URL or email address, and also have it be a clickable link, you can do this:</p>\n\n<pre><code>&lt;http://example.com/&gt;\n</code></pre>\n\n<p>Markdown will turn this into:</p>\n\n<pre><code>&lt;a href=\"http://example.com/\"&gt;http://example.com/&lt;/a&gt;\n</code></pre>\n\n<p>Automatic links for email addresses work similarly, except that\nMarkdown will also perform a bit of randomized decimal and hex\nentity-encoding to help obscure your address from address-harvesting\nspambots. For example, Markdown will turn this:</p>\n\n<pre><code>&lt;address@example.com&gt;\n</code></pre>\n\n<p>into something like this:</p>\n\n<pre><code>&lt;a href=\"&amp;#x6D;&amp;#x61;i&amp;#x6C;&amp;#x74;&amp;#x6F;:&amp;#x61;&amp;#x64;&amp;#x64;&amp;#x72;&amp;#x65;\n&amp;#115;&amp;#115;&amp;#64;&amp;#101;&amp;#120;&amp;#x61;&amp;#109;&amp;#x70;&amp;#x6C;e&amp;#x2E;&amp;#99;&amp;#111;\n&amp;#109;\"&gt;&amp;#x61;&amp;#x64;&amp;#x64;&amp;#x72;&amp;#x65;&amp;#115;&amp;#115;&amp;#64;&amp;#101;&amp;#120;&amp;#x61;\n&amp;#109;&amp;#x70;&amp;#x6C;e&amp;#x2E;&amp;#99;&amp;#111;&amp;#109;&lt;/a&gt;\n</code></pre>\n\n<p>which will render in a browser as a clickable link to \"address@example.com\".</p>\n\n<p>(This sort of entity-encoding trick will indeed fool many, if not\nmost, address-harvesting bots, but it definitely won't fool all of\nthem. It's better than nothing, but an address published in this way\nwill probably eventually start receiving spam.)</p>\n\n<h3 id=\"backslash\">Backslash Escapes</h3>\n\n<p>Markdown allows you to use backslash escapes to generate literal\ncharacters which would otherwise have special meaning in Markdown's\nformatting syntax. For example, if you wanted to surround a word with\nliteral asterisks (instead of an HTML <code>&lt;em&gt;</code> tag), you can backslashes\nbefore the asterisks, like this:</p>\n\n<pre><code>\\*literal asterisks\\*\n</code></pre>\n\n<p>Markdown provides backslash escapes for the following characters:</p>\n\n<pre><code>\\   backslash\n`   backtick\n*   asterisk\n_   underscore\n{}  curly braces\n[]  square brackets\n()  parentheses\n#   hash mark\n+   plus sign\n-   minus sign (hyphen)\n.   dot\n!   exclamation mark\n</code></pre>"),
%%     ?_assert(conv("> foo\n>\n> > bar\n>\n> foo\n") == "<blockquote>\n  <p>foo</p>\n  \n  <blockquote>\n    <p>bar</p>\n  </blockquote>\n  \n  <p>foo</p>\n</blockquote>"),
%%     ?_assert(conv("## Unordered\n\nAsterisks tight:\n\n*\tasterisk 1\n*\tasterisk 2\n*\tasterisk 3\n\n\nAsterisks loose:\n\n*\tasterisk 1\n\n*\tasterisk 2\n\n*\tasterisk 3\n\n* * *\n\nPluses tight:\n\n+\tPlus 1\n+\tPlus 2\n+\tPlus 3\n\n\nPluses loose:\n\n+\tPlus 1\n\n+\tPlus 2\n\n+\tPlus 3\n\n* * *\n\n\nMinuses tight:\n\n-\tMinus 1\n-\tMinus 2\n-\tMinus 3\n\n\nMinuses loose:\n\n-\tMinus 1\n\n-\tMinus 2\n\n-\tMinus 3\n\n\n## Ordered\n\nTight:\n\n1.\tFirst\n2.\tSecond\n3.\tThird\n\nand:\n\n1. One\n2. Two\n3. Three\n\n\nLoose using tabs:\n\n1.\tFirst\n\n2.\tSecond\n\n3.\tThird\n\nand using spaces:\n\n1. One\n\n2. Two\n\n3. Three\n\nMultiple paragraphs:\n\n1.\tItem 1, graf one.\n\n\tItem 2. graf two. The quick brown fox jumped over the lazy dog's\n\tback.\n\t\n2.\tItem 2.\n\n3.\tItem 3.\n\n\n\n## Nested\n\n*\tTab\n\t*\tTab\n\t\t*\tTab\n\nHere's another:\n\n1. First\n2. Second:\n\t* Fee\n\t* Fie\n\t* Foe\n3. Third\n\nSame thing but with paragraphs:\n\n1. First\n\n2. Second:\n\t* Fee\n\t* Fie\n\t* Foe\n\n3. Third\n\n\nThis was an error in Markdown 1.0.1:\n\n*\tthis\n\n\t*\tsub\n\n\tthat\n") == "<h2>Unordered</h2>\n\n<p>Asterisks tight:</p>\n\n<ul>\n<li>asterisk 1</li>\n<li>asterisk 2</li>\n<li>asterisk 3</li>\n</ul>\n\n<p>Asterisks loose:</p>\n\n<ul>\n<li><p>asterisk 1</p></li>\n<li><p>asterisk 2</p></li>\n<li><p>asterisk 3</p></li>\n</ul>\n\n<hr />\n\n<p>Pluses tight:</p>\n\n<ul>\n<li>Plus 1</li>\n<li>Plus 2</li>\n<li>Plus 3</li>\n</ul>\n\n<p>Pluses loose:</p>\n\n<ul>\n<li><p>Plus 1</p></li>\n<li><p>Plus 2</p></li>\n<li><p>Plus 3</p></li>\n</ul>\n\n<hr />\n\n<p>Minuses tight:</p>\n\n<ul>\n<li>Minus 1</li>\n<li>Minus 2</li>\n<li>Minus 3</li>\n</ul>\n\n<p>Minuses loose:</p>\n\n<ul>\n<li><p>Minus 1</p></li>\n<li><p>Minus 2</p></li>\n<li><p>Minus 3</p></li>\n</ul>\n\n<h2>Ordered</h2>\n\n<p>Tight:</p>\n\n<ol>\n<li>First</li>\n<li>Second</li>\n<li>Third</li>\n</ol>\n\n<p>and:</p>\n\n<ol>\n<li>One</li>\n<li>Two</li>\n<li>Three</li>\n</ol>\n\n<p>Loose using tabs:</p>\n\n<ol>\n<li><p>First</p></li>\n<li><p>Second</p></li>\n<li><p>Third</p></li>\n</ol>\n\n<p>and using spaces:</p>\n\n<ol>\n<li><p>One</p></li>\n<li><p>Two</p></li>\n<li><p>Three</p></li>\n</ol>\n\n<p>Multiple paragraphs:</p>\n\n<ol>\n<li><p>Item 1, graf one.</p>\n\n<p>Item 2. graf two. The quick brown fox jumped over the lazy dog's\nback.</p></li>\n<li><p>Item 2.</p></li>\n<li><p>Item 3.</p></li>\n</ol>\n\n<h2>Nested</h2>\n\n<ul>\n<li>Tab\n<ul><li>Tab\n<ul><li>Tab</li></ul></li></ul></li>\n</ul>\n\n<p>Here's another:</p>\n\n<ol>\n<li>First</li>\n<li>Second:\n<ul><li>Fee</li>\n<li>Fie</li>\n<li>Foe</li></ul></li>\n<li>Third</li>\n</ol>\n\n<p>Same thing but with paragraphs:</p>\n\n<ol>\n<li><p>First</p></li>\n<li><p>Second:</p>\n\n<ul><li>Fee</li>\n<li>Fie</li>\n<li>Foe</li></ul></li>\n<li><p>Third</p></li>\n</ol>\n\n<p>This was an error in Markdown 1.0.1:</p>\n\n<ul>\n<li><p>this</p>\n\n<ul><li>sub</li></ul>\n\n<p>that</p></li>\n</ul>"),
%%     ?_assert(conv("***This is strong and em.***\n\nSo is ***this*** word.\n\n___This is strong and em.___\n\nSo is ___this___ word.\n") == "<p><strong><em>This is strong and em.</em></strong></p>\n\n<p>So is <strong><em>this</em></strong> word.</p>\n\n<p><strong><em>This is strong and em.</em></strong></p>\n\n<p>So is <strong><em>this</em></strong> word.</p>"),
%%     ?_assert(conv("+\tthis is a list item\n\tindented with tabs\n\n+   this is a list item\n    indented with spaces\n\nCode:\n\n\tthis code block is indented by one tab\n\nAnd:\n\n\t\tthis code block is indented by two tabs\n\nAnd:\n\n\t+\tthis is an example list item\n\t\tindented with tabs\n\t\n\t+   this is an example list item\n\t    indented with spaces\n") == "<ul>\n<li><p>this is a list item\nindented with tabs</p></li>\n<li><p>this is a list item\nindented with spaces</p></li>\n</ul>\n\n<p>Code:</p>\n\n<pre><code>this code block is indented by one tab\n</code></pre>\n\n<p>And:</p>\n\n<pre><code>    this code block is indented by two tabs\n</code></pre>\n\n<p>And:</p>\n\n<pre><code>+   this is an example list item\n    indented with tabs\n\n+   this is an example list item\n    indented with spaces\n</code></pre>"),
%%     ?_assert(conv("> A list within a blockquote:\n> \n> *\tasterisk 1\n> *\tasterisk 2\n> *\tasterisk 3\n") == "<blockquote>\n  <p>A list within a blockquote:</p>\n  \n  <ul>\n  <li>asterisk 1</li>\n  <li>asterisk 2</li>\n  <li>asterisk 3</li>\n  </ul>\n</blockquote>"),
%%     ?_assert(conv("ï»¿1. one\r\n\r\n        code<t>\r\n        indented 8 spaces<t>\r\n\r\n2. two\r\n\r\n        code<t>\r\n            idented-12-spaces<t>\r\n\r\n3. three\r\n\r\n        code<t>\r\n\r\n            indented-12-spaces<t>") == "<p>ï»¿1. one</p>\n\n<pre><code>    code&lt;t&gt;\n    indented 8 spaces&lt;t&gt;\n</code></pre>\n\n<ol>\n<li><p>two</p>\n\n<pre><code>code&lt;t&gt;\n    idented-12-spaces&lt;t&gt;\n</code></pre></li>\n<li><p>three</p>\n\n<pre><code>code&lt;t&gt;\n\n\n<pre><code>indented-12-spaces&amp;lt;t&amp;gt;\n</code></pre>\n\n</code></pre></li>\n</ol>"),
%%     ?_assert(conv("##Header##\r\r----------\r\rSome **bold** Some *italic* and [a link][1] \r\rA little code sample\r\r    </head>\r    <title>Web Page Title</title>\r    </head>\r\rA picture\r\r![alt text][2]\r\rA list\r\r- apples\r- oranges\r- eggs\r\rA numbered list\r\r1. a\r2. b\r3. c\r\rA little quote\r\r> It is now time for all good men to come to the aid of their country. \r\rA final paragraph.\r\r  [1]: http://www.google.com\r  [2]: http://www.google.com/intl/en_ALL/images/logo.gif") == "<h2>Header</h2>\n\n<hr />\n\n<p>Some <strong>bold</strong> Some <em>italic</em> and <a href=\"http://www.google.com\">a link</a> </p>\n\n<p>A little code sample</p>\n\n<pre><code>&lt;/head&gt;\n&lt;title&gt;Web Page Title&lt;/title&gt;\n&lt;/head&gt;\n</code></pre>\n\n<p>A picture</p>\n\n<p><img src=\"http://www.google.com/intl/en_ALL/images/logo.gif\" alt=\"alt text\" title=\"\" /></p>\n\n<p>A list</p>\n\n<ul>\n<li>apples</li>\n<li>oranges</li>\n<li>eggs</li>\n</ul>\n\n<p>A numbered list</p>\n\n<ol>\n<li>a</li>\n<li>b</li>\n<li>c</li>\n</ol>\n\n<p>A little quote</p>\n\n<blockquote>\n  <p>It is now time for all good men to come to the aid of their country. </p>\n</blockquote>\n\n<p>A final paragraph.</p>"),
%%     ?_assert(conv("##Header##\r\n\r\n----------\r\n\r\nSome **bold** Some *italic* and [a link][1] \r\n\r\nA little code sample\r\n\r\n    </head>\r\n    <title>Web Page Title</title>\r\n    </head>\r\n\r\nA picture\r\n\r\n![alt text][2]\r\n\r\nA list\r\n\r\n- apples\r\n- oranges\r\n- eggs\r\n\r\nA numbered list\r\n\r\n1. a\r\n2. b\r\n3. c\r\n\r\nA little quote\r\n\r\n> It is now time for all good men to come to the aid of their country. \r\n\r\nA final paragraph.\r\n\r\n  [1]: http://www.google.com\r\n  [2]: http://www.google.com/intl/en_ALL/images/logo.gif") == "<h2>Header</h2>\n\n<hr />\n\n<p>Some <strong>bold</strong> Some <em>italic</em> and <a href=\"http://www.google.com\">a link</a> </p>\n\n<p>A little code sample</p>\n\n<pre><code>&lt;/head&gt;\n&lt;title&gt;Web Page Title&lt;/title&gt;\n&lt;/head&gt;\n</code></pre>\n\n<p>A picture</p>\n\n<p><img src=\"http://www.google.com/intl/en_ALL/images/logo.gif\" alt=\"alt text\" title=\"\" /></p>\n\n<p>A list</p>\n\n<ul>\n<li>apples</li>\n<li>oranges</li>\n<li>eggs</li>\n</ul>\n\n<p>A numbered list</p>\n\n<ol>\n<li>a</li>\n<li>b</li>\n<li>c</li>\n</ol>\n\n<p>A little quote</p>\n\n<blockquote>\n  <p>It is now time for all good men to come to the aid of their country. </p>\n</blockquote>\n\n<p>A final paragraph.</p>"),
%%     ?_assert(conv("##Header##\n\n----------\n\nSome **bold** Some *italic* and [a link][1] \n\nA little code sample\n\n    </head>\n    <title>Web Page Title</title>\n    </head>\n\nA picture\n\n![alt text][2]\n\nA list\n\n- apples\n- oranges\n- eggs\n\nA numbered list\n\n1. a\n2. b\n3. c\n\nA little quote\n\n> It is now time for all good men to come to the aid of their country. \n\nA final paragraph.\n\n  [1]: http://www.google.com\n  [2]: http://www.google.com/intl/en_ALL/images/logo.gif") == "<h2>Header</h2>\n\n<hr />\n\n<p>Some <strong>bold</strong> Some <em>italic</em> and <a href=\"http://www.google.com\">a link</a> </p>\n\n<p>A little code sample</p>\n\n<pre><code>&lt;/head&gt;\n&lt;title&gt;Web Page Title&lt;/title&gt;\n&lt;/head&gt;\n</code></pre>\n\n<p>A picture</p>\n\n<p><img src=\"http://www.google.com/intl/en_ALL/images/logo.gif\" alt=\"alt text\" title=\"\" /></p>\n\n<p>A list</p>\n\n<ul>\n<li>apples</li>\n<li>oranges</li>\n<li>eggs</li>\n</ul>\n\n<p>A numbered list</p>\n\n<ol>\n<li>a</li>\n<li>b</li>\n<li>c</li>\n</ol>\n\n<p>A little quote</p>\n\n<blockquote>\n  <p>It is now time for all good men to come to the aid of their country. </p>\n</blockquote>\n\n<p>A final paragraph.</p>"),
%%     ?_assert(conv("Markdown\n========\n\nVersion 1.0.1 - Tue 14 Dec 2004\n\nby John Gruber  \n<http://daringfireball.net/>\n\n\nIntroduction\n------------\n\nMarkdown is a text-to-HTML conversion tool for web writers. Markdown\nallows you to write using an easy-to-read, easy-to-write plain text\nformat, then convert it to structurally valid XHTML (or HTML).\n\nThus, \"Markdown\" is two things: a plain text markup syntax, and a\nsoftware tool, written in Perl, that converts the plain text markup \nto HTML.\n\nMarkdown works both as a Movable Type plug-in and as a standalone Perl\nscript -- which means it can also be used as a text filter in BBEdit\n(or any other application that supporst filters written in Perl).\n\nFull documentation of Markdown's syntax and configuration options is\navailable on the web: <http://daringfireball.net/projects/markdown/>.\n(Note: this readme file is formatted in Markdown.)\n\n\n\nInstallation and Requirements\n-----------------------------\n\nMarkdown requires Perl 5.6.0 or later. Welcome to the 21st Century.\nMarkdown also requires the standard Perl library module `Digest::MD5`. \n\n\n### Movable Type ###\n\nMarkdown works with Movable Type version 2.6 or later (including \nMT 3.0 or later).\n\n1.  Copy the \"Markdown.pl\" file into your Movable Type \"plugins\"\n    directory. The \"plugins\" directory should be in the same directory\n    as \"mt.cgi\"; if the \"plugins\" directory doesn't already exist, use\n    your FTP program to create it. Your installation should look like\n    this:\n\n        (mt home)/plugins/Markdown.pl\n\n2.  Once installed, Markdown will appear as an option in Movable Type's\n    Text Formatting pop-up menu. This is selectable on a per-post basis.\n    Markdown translates your posts to HTML when you publish; the posts\n    themselves are stored in your MT database in Markdown format.\n\n3.  If you also install SmartyPants 1.5 (or later), Markdown will offer\n    a second text formatting option: \"Markdown with SmartyPants\". This\n    option is the same as the regular \"Markdown\" formatter, except that\n    automatically uses SmartyPants to create typographically correct\n    curly quotes, em-dashes, and ellipses. See the SmartyPants web page\n    for more information: <http://daringfireball.net/projects/smartypants/>\n\n4.  To make Markdown (or \"Markdown with SmartyPants\") your default\n    text formatting option for new posts, go to Weblog Config ->\n    Preferences.\n\nNote that by default, Markdown produces XHTML output. To configure\nMarkdown to produce HTML 4 output, see \"Configuration\", below.\n\n\n### Blosxom ###\n\nMarkdown works with Blosxom version 2.x.\n\n1.  Rename the \"Markdown.pl\" plug-in to \"Markdown\" (case is\n    important). Movable Type requires plug-ins to have a \".pl\"\n    extension; Blosxom forbids it.\n\n2.  Copy the \"Markdown\" plug-in file to your Blosxom plug-ins folder.\n    If you're not sure where your Blosxom plug-ins folder is, see the\n    Blosxom documentation for information.\n\n3.  That's it. The entries in your weblog will now automatically be\n    processed by Markdown.\n\n4.  If you'd like to apply Markdown formatting only to certain posts,\n    rather than all of them, see Jason Clark's instructions for using\n    Markdown in conjunction with Blosxom's Meta plugin:\n    \n    <http://jclark.org/weblog/WebDev/Blosxom/Markdown.html>\n\n\n### BBEdit ###\n\nMarkdown works with BBEdit 6.1 or later on Mac OS X. (It also works\nwith BBEdit 5.1 or later and MacPerl 5.6.1 on Mac OS 8.6 or later.)\n\n1.  Copy the \"Markdown.pl\" file to appropriate filters folder in your\n    \"BBEdit Support\" folder. On Mac OS X, this should be:\n\n        BBEdit Support/Unix Support/Unix Filters/\n\n    See the BBEdit documentation for more details on the location of\n    these folders.\n\n    You can rename \"Markdown.pl\" to whatever you wish.\n\n2.  That's it. To use Markdown, select some text in a BBEdit document,\n    then choose Markdown from the Filters sub-menu in the \"#!\" menu, or\n    the Filters floating palette\n\n\n\nConfiguration\n-------------\n\nBy default, Markdown produces XHTML output for tags with empty elements.\nE.g.:\n\n    <br />\n\nMarkdown can be configured to produce HTML-style tags; e.g.:\n\n    <br>\n\n\n### Movable Type ###\n\nYou need to use a special `MTMarkdownOptions` container tag in each\nMovable Type template where you want HTML 4-style output:\n\n    <MTMarkdownOptions output='html4'>\n        ... put your entry content here ...\n    </MTMarkdownOptions>\n\nThe easiest way to use MTMarkdownOptions is probably to put the\nopening tag right after your `<body>` tag, and the closing tag right\nbefore `</body>`.\n\nTo suppress Markdown processing in a particular template, i.e. to\npublish the raw Markdown-formatted text without translation into\n(X)HTML, set the `output` attribute to 'raw':\n\n    <MTMarkdownOptions output='raw'>\n        ... put your entry content here ...\n    </MTMarkdownOptions>\n\n\n### Command-Line ###\n\nUse the `--html4tags` command-line switch to produce HTML output from a\nUnix-style command line. E.g.:\n\n    % perl Markdown.pl --html4tags foo.text\n\nType `perldoc Markdown.pl`, or read the POD documentation within the\nMarkdown.pl source code for more information.\n\n\n\nBugs\n----\n\nTo file bug reports or feature requests please send email to:\nmarkdown@daringfireball.net.\n\n\n\nVersion History\n---------------\n\n1.0.1 (14 Dec 2004):\n\n+\tChanged the syntax rules for code blocks and spans. Previously,\n\tbackslash escapes for special Markdown characters were processed\n\teverywhere other than within inline HTML tags. Now, the contents\n\tof code blocks and spans are no longer processed for backslash\n\tescapes. This means that code blocks and spans are now treated\n\tliterally, with no special rules to worry about regarding\n\tbackslashes.\n\n\t**NOTE**: This changes the syntax from all previous versions of\n\tMarkdown. Code blocks and spans involving backslash characters\n\twill now generate different output than before.\n\n+\tTweaked the rules for link definitions so that they must occur\n\twithin three spaces of the left margin. Thus if you indent a link\n\tdefinition by four spaces or a tab, it will now be a code block.\n\t\n\t\t   [a]: /url/  \"Indented 3 spaces, this is a link def\"\n\n\t\t    [b]: /url/  \"Indented 4 spaces, this is a code block\"\n\t\n\t**IMPORTANT**: This may affect existing Markdown content if it\n\tcontains link definitions indented by 4 or more spaces.\n\n+\tAdded `>`, `+`, and `-` to the list of backslash-escapable\n\tcharacters. These should have been done when these characters\n\twere added as unordered list item markers.\n\n+\tTrailing spaces and tabs following HTML comments and `<hr/>` tags\n\tare now ignored.\n\n+\tInline links using `<` and `>` URL delimiters weren't working:\n\n\t\tlike [this](<http://example.com/>)\n\n+\tAdded a bit of tolerance for trailing spaces and tabs after\n\tMarkdown hr's.\n\n+\tFixed bug where auto-links were being processed within code spans:\n\n\t\tlike this: `<http://example.com/>`\n\n+\tSort-of fixed a bug where lines in the middle of hard-wrapped\n\tparagraphs, which lines look like the start of a list item,\n\twould accidentally trigger the creation of a list. E.g. a\n\tparagraph that looked like this:\n\n\t\tI recommend upgrading to version\n\t\t8. Oops, now this line is treated\n\t\tas a sub-list.\n\n\tThis is fixed for top-level lists, but it can still happen for\n\tsub-lists. E.g., the following list item will not be parsed\n\tproperly:\n\n\t\t+\tI recommend upgrading to version\n\t\t\t8. Oops, now this line is treated\n\t\t\tas a sub-list.\n\n\tGiven Markdown's list-creation rules, I'm not sure this can\n\tbe fixed.\n\n+\tStandalone HTML comments are now handled; previously, they'd get\n\twrapped in a spurious `<p>` tag.\n\n+\tFix for horizontal rules preceded by 2 or 3 spaces.\n\n+\t`<hr>` HTML tags in must occur within three spaces of left\n\tmargin. (With 4 spaces or a tab, they should be code blocks, but\n\tweren't before this fix.)\n\n+\tCapitalized \"With\" in \"Markdown With SmartyPants\" for\n\tconsistency with the same string label in SmartyPants.pl.\n\t(This fix is specific to the MT plug-in interface.)\n\n+\tAuto-linked email address can now optionally contain\n\ta 'mailto:' protocol. I.e. these are equivalent:\n\n\t\t<mailto:user@example.com>\n\t\t<user@example.com>\n\n+\tFixed annoying bug where nested lists would wind up with\n\tspurious (and invalid) `<p>` tags.\n\n+\tYou can now write empty links:\n\n\t\t[like this]()\n\n\tand they'll be turned into anchor tags with empty href attributes.\n\tThis should have worked before, but didn't.\n\n+\t`***this***` and `___this___` are now turned into\n\n\t\t<strong><em>this</em></strong>\n\n\tInstead of\n\n\t\t<strong><em>this</strong></em>\n\n\twhich isn't valid. (Thanks to Michel Fortin for the fix.)\n\n+\tAdded a new substitution in `_EncodeCode()`: s/\\$/&#036;/g; This\n\tis only for the benefit of Blosxom users, because Blosxom\n\t(sometimes?) interpolates Perl scalars in your article bodies.\n\n+\tFixed problem for links defined with urls that include parens, e.g.:\n\n\t\t[1]: http://sources.wikipedia.org/wiki/Middle_East_Policy_(Chomsky)\n\n\t\"Chomsky\" was being erroneously treated as the URL's title.\n\n+\tAt some point during 1.0's beta cycle, I changed every sub's\n\targument fetching from this idiom:\n\n\t\tmy $text = shift;\n\n\tto:\n\n\t\tmy $text = shift || return '';\n\n\tThe idea was to keep Markdown from doing any work in a sub\n\tif the input was empty. This introduced a bug, though:\n\tif the input to any function was the single-character string\n\t\"0\", it would also evaluate as false and return immediately.\n\tHow silly. Now fixed.\n\n\n\nDonations\n---------\n\nDonations to support Markdown's development are happily accepted. See:\n<http://daringfireball.net/projects/markdown/> for details.\n\n\n\nCopyright and License\n---------------------\n\nCopyright (c) 2003-2004 John Gruber   \n<http://daringfireball.net/>   \nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are\nmet:\n\n* Redistributions of source code must retain the above copyright notice,\n  this list of conditions and the following disclaimer.\n\n* Redistributions in binary form must reproduce the above copyright\n  notice, this list of conditions and the following disclaimer in the\n  documentation and/or other materials provided with the distribution.\n\n* Neither the name \"Markdown\" nor the names of its contributors may\n  be used to endorse or promote products derived from this software\n  without specific prior written permission.\n\nThis software is provided by the copyright holders and contributors \"as\nis\" and any express or implied warranties, including, but not limited\nto, the implied warranties of merchantability and fitness for a\nparticular purpose are disclaimed. In no event shall the copyright owner\nor contributors be liable for any direct, indirect, incidental, special,\nexemplary, or consequential damages (including, but not limited to,\nprocurement of substitute goods or services; loss of use, data, or\nprofits; or business interruption) however caused and on any theory of\nliability, whether in contract, strict liability, or tort (including\nnegligence or otherwise) arising in any way out of the use of this\nsoftware, even if advised of the possibility of such damage.\n") == "<h1>Markdown</h1>\n\n<p>Version 1.0.1 - Tue 14 Dec 2004</p>\n\n<p>by John Gruber <br />\n<a href=\"http://daringfireball.net/\">http://daringfireball.net/</a></p>\n\n<h2>Introduction</h2>\n\n<p>Markdown is a text-to-HTML conversion tool for web writers. Markdown\nallows you to write using an easy-to-read, easy-to-write plain text\nformat, then convert it to structurally valid XHTML (or HTML).</p>\n\n<p>Thus, \"Markdown\" is two things: a plain text markup syntax, and a\nsoftware tool, written in Perl, that converts the plain text markup \nto HTML.</p>\n\n<p>Markdown works both as a Movable Type plug-in and as a standalone Perl\nscript -- which means it can also be used as a text filter in BBEdit\n(or any other application that supporst filters written in Perl).</p>\n\n<p>Full documentation of Markdown's syntax and configuration options is\navailable on the web: <a href=\"http://daringfireball.net/projects/markdown/\">http://daringfireball.net/projects/markdown/</a>.\n(Note: this readme file is formatted in Markdown.)</p>\n\n<h2>Installation and Requirements</h2>\n\n<p>Markdown requires Perl 5.6.0 or later. Welcome to the 21st Century.\nMarkdown also requires the standard Perl library module <code>Digest::MD5</code>. </p>\n\n<h3>Movable Type</h3>\n\n<p>Markdown works with Movable Type version 2.6 or later (including \nMT 3.0 or later).</p>\n\n<ol>\n<li><p>Copy the \"Markdown.pl\" file into your Movable Type \"plugins\"\ndirectory. The \"plugins\" directory should be in the same directory\nas \"mt.cgi\"; if the \"plugins\" directory doesn't already exist, use\nyour FTP program to create it. Your installation should look like\nthis:</p>\n\n<pre><code>(mt home)/plugins/Markdown.pl\n</code></pre></li>\n<li><p>Once installed, Markdown will appear as an option in Movable Type's\nText Formatting pop-up menu. This is selectable on a per-post basis.\nMarkdown translates your posts to HTML when you publish; the posts\nthemselves are stored in your MT database in Markdown format.</p></li>\n<li><p>If you also install SmartyPants 1.5 (or later), Markdown will offer\na second text formatting option: \"Markdown with SmartyPants\". This\noption is the same as the regular \"Markdown\" formatter, except that\nautomatically uses SmartyPants to create typographically correct\ncurly quotes, em-dashes, and ellipses. See the SmartyPants web page\nfor more information: <a href=\"http://daringfireball.net/projects/smartypants/\">http://daringfireball.net/projects/smartypants/</a></p></li>\n<li><p>To make Markdown (or \"Markdown with SmartyPants\") your default\ntext formatting option for new posts, go to Weblog Config ->\nPreferences.</p></li>\n</ol>\n\n<p>Note that by default, Markdown produces XHTML output. To configure\nMarkdown to produce HTML 4 output, see \"Configuration\", below.</p>\n\n<h3>Blosxom</h3>\n\n<p>Markdown works with Blosxom version 2.x.</p>\n\n<ol>\n<li><p>Rename the \"Markdown.pl\" plug-in to \"Markdown\" (case is\nimportant). Movable Type requires plug-ins to have a \".pl\"\nextension; Blosxom forbids it.</p></li>\n<li><p>Copy the \"Markdown\" plug-in file to your Blosxom plug-ins folder.\nIf you're not sure where your Blosxom plug-ins folder is, see the\nBlosxom documentation for information.</p></li>\n<li><p>That's it. The entries in your weblog will now automatically be\nprocessed by Markdown.</p></li>\n<li><p>If you'd like to apply Markdown formatting only to certain posts,\nrather than all of them, see Jason Clark's instructions for using\nMarkdown in conjunction with Blosxom's Meta plugin:</p>\n\n<p><a href=\"http://jclark.org/weblog/WebDev/Blosxom/Markdown.html\">http://jclark.org/weblog/WebDev/Blosxom/Markdown.html</a></p></li>\n</ol>\n\n<h3>BBEdit</h3>\n\n<p>Markdown works with BBEdit 6.1 or later on Mac OS X. (It also works\nwith BBEdit 5.1 or later and MacPerl 5.6.1 on Mac OS 8.6 or later.)</p>\n\n<ol>\n<li><p>Copy the \"Markdown.pl\" file to appropriate filters folder in your\n\"BBEdit Support\" folder. On Mac OS X, this should be:</p>\n\n<pre><code>BBEdit Support/Unix Support/Unix Filters/\n</code></pre>\n\n<p>See the BBEdit documentation for more details on the location of\nthese folders.</p>\n\n<p>You can rename \"Markdown.pl\" to whatever you wish.</p></li>\n<li><p>That's it. To use Markdown, select some text in a BBEdit document,\nthen choose Markdown from the Filters sub-menu in the \"#!\" menu, or\nthe Filters floating palette</p></li>\n</ol>\n\n<h2>Configuration</h2>\n\n<p>By default, Markdown produces XHTML output for tags with empty elements.\nE.g.:</p>\n\n<pre><code>&lt;br /&gt;\n</code></pre>\n\n<p>Markdown can be configured to produce HTML-style tags; e.g.:</p>\n\n<pre><code>&lt;br&gt;\n</code></pre>\n\n<h3>Movable Type</h3>\n\n<p>You need to use a special <code>MTMarkdownOptions</code> container tag in each\nMovable Type template where you want HTML 4-style output:</p>\n\n<pre><code>&lt;MTMarkdownOptions output='html4'&gt;\n    ... put your entry content here ...\n&lt;/MTMarkdownOptions&gt;\n</code></pre>\n\n<p>The easiest way to use MTMarkdownOptions is probably to put the\nopening tag right after your <code>&lt;body&gt;</code> tag, and the closing tag right\nbefore <code>&lt;/body&gt;</code>.</p>\n\n<p>To suppress Markdown processing in a particular template, i.e. to\npublish the raw Markdown-formatted text without translation into\n(X)HTML, set the <code>output</code> attribute to 'raw':</p>\n\n<pre><code>&lt;MTMarkdownOptions output='raw'&gt;\n    ... put your entry content here ...\n&lt;/MTMarkdownOptions&gt;\n</code></pre>\n\n<h3>Command-Line</h3>\n\n<p>Use the <code>--html4tags</code> command-line switch to produce HTML output from a\nUnix-style command line. E.g.:</p>\n\n<pre><code>% perl Markdown.pl --html4tags foo.text\n</code></pre>\n\n<p>Type <code>perldoc Markdown.pl</code>, or read the POD documentation within the\nMarkdown.pl source code for more information.</p>\n\n<h2>Bugs</h2>\n\n<p>To file bug reports or feature requests please send email to:\nmarkdown@daringfireball.net.</p>\n\n<h2>Version History</h2>\n\n<p>1.0.1 (14 Dec 2004):</p>\n\n<ul>\n<li><p>Changed the syntax rules for code blocks and spans. Previously,\nbackslash escapes for special Markdown characters were processed\neverywhere other than within inline HTML tags. Now, the contents\nof code blocks and spans are no longer processed for backslash\nescapes. This means that code blocks and spans are now treated\nliterally, with no special rules to worry about regarding\nbackslashes.</p>\n\n<p><strong>NOTE</strong>: This changes the syntax from all previous versions of\nMarkdown. Code blocks and spans involving backslash characters\nwill now generate different output than before.</p></li>\n<li><p>Tweaked the rules for link definitions so that they must occur\nwithin three spaces of the left margin. Thus if you indent a link\ndefinition by four spaces or a tab, it will now be a code block.</p>\n\n<pre><code>   [a]: /url/  \"Indented 3 spaces, this is a link def\"\n\n\n<pre><code>[b]: /url/  \"Indented 4 spaces, this is a code block\"\n</code></pre>\n\n</code></pre>\n\n<p><strong>IMPORTANT</strong>: This may affect existing Markdown content if it\ncontains link definitions indented by 4 or more spaces.</p></li>\n<li><p>Added <code>&gt;</code>, <code>+</code>, and <code>-</code> to the list of backslash-escapable\ncharacters. These should have been done when these characters\nwere added as unordered list item markers.</p></li>\n<li><p>Trailing spaces and tabs following HTML comments and <code>&lt;hr/&gt;</code> tags\nare now ignored.</p></li>\n<li><p>Inline links using <code>&lt;</code> and <code>&gt;</code> URL delimiters weren't working:</p>\n\n<pre><code>like [this](&lt;http://example.com/&gt;)\n</code></pre></li>\n<li><p>Added a bit of tolerance for trailing spaces and tabs after\nMarkdown hr's.</p></li>\n<li><p>Fixed bug where auto-links were being processed within code spans:</p>\n\n<pre><code>like this: `&lt;http://example.com/&gt;`\n</code></pre></li>\n<li><p>Sort-of fixed a bug where lines in the middle of hard-wrapped\nparagraphs, which lines look like the start of a list item,\nwould accidentally trigger the creation of a list. E.g. a\nparagraph that looked like this:</p>\n\n<pre><code>I recommend upgrading to version\n8. Oops, now this line is treated\nas a sub-list.\n</code></pre>\n\n<p>This is fixed for top-level lists, but it can still happen for\nsub-lists. E.g., the following list item will not be parsed\nproperly:</p>\n\n<pre><code>+   I recommend upgrading to version\n    8. Oops, now this line is treated\n    as a sub-list.\n</code></pre>\n\n<p>Given Markdown's list-creation rules, I'm not sure this can\nbe fixed.</p></li>\n<li><p>Standalone HTML comments are now handled; previously, they'd get\nwrapped in a spurious <code>&lt;p&gt;</code> tag.</p></li>\n<li><p>Fix for horizontal rules preceded by 2 or 3 spaces.</p></li>\n<li><p><code>&lt;hr&gt;</code> HTML tags in must occur within three spaces of left\nmargin. (With 4 spaces or a tab, they should be code blocks, but\nweren't before this fix.)</p></li>\n<li><p>Capitalized \"With\" in \"Markdown With SmartyPants\" for\nconsistency with the same string label in SmartyPants.pl.\n(This fix is specific to the MT plug-in interface.)</p></li>\n<li><p>Auto-linked email address can now optionally contain\na 'mailto:' protocol. I.e. these are equivalent:</p>\n\n<pre><code>&lt;mailto:user@example.com&gt;\n&lt;user@example.com&gt;\n</code></pre></li>\n<li><p>Fixed annoying bug where nested lists would wind up with\nspurious (and invalid) <code>&lt;p&gt;</code> tags.</p></li>\n<li><p>You can now write empty links:</p>\n\n<pre><code>[like this]()\n</code></pre>\n\n<p>and they'll be turned into anchor tags with empty href attributes.\nThis should have worked before, but didn't.</p></li>\n<li><p><code>***this***</code> and <code>___this___</code> are now turned into</p>\n\n<pre><code>&lt;strong&gt;&lt;em&gt;this&lt;/em&gt;&lt;/strong&gt;\n</code></pre>\n\n<p>Instead of</p>\n\n<pre><code>&lt;strong&gt;&lt;em&gt;this&lt;/strong&gt;&lt;/em&gt;\n</code></pre>\n\n<p>which isn't valid. (Thanks to Michel Fortin for the fix.)</p></li>\n<li><p>Added a new substitution in <code>_EncodeCode()</code>: s/\\$/&#036;/g; This\nis only for the benefit of Blosxom users, because Blosxom\n(sometimes?) interpolates Perl scalars in your article bodies.</p></li>\n<li><p>Fixed problem for links defined with urls that include parens, e.g.:</p>\n\n<pre><code>[1]: http://sources.wikipedia.org/wiki/Middle_East_Policy_(Chomsky)\n</code></pre>\n\n<p>\"Chomsky\" was being erroneously treated as the URL's title.</p></li>\n<li><p>At some point during 1.0's beta cycle, I changed every sub's\nargument fetching from this idiom:</p>\n\n<pre><code>my $text = shift;\n</code></pre>\n\n<p>to:</p>\n\n<pre><code>my $text = shift || return '';\n</code></pre>\n\n<p>The idea was to keep Markdown from doing any work in a sub\nif the input was empty. This introduced a bug, though:\nif the input to any function was the single-character string\n\"0\", it would also evaluate as false and return immediately.\nHow silly. Now fixed.</p></li>\n</ul>\n\n<h2>Donations</h2>\n\n<p>Donations to support Markdown's development are happily accepted. See:\n<a href=\"http://daringfireball.net/projects/markdown/\">http://daringfireball.net/projects/markdown/</a> for details.</p>\n\n<h2>Copyright and License</h2>\n\n<p>Copyright (c) 2003-2004 John Gruber <br />\n<a href=\"http://daringfireball.net/\">http://daringfireball.net/</a> <br />\nAll rights reserved.</p>\n\n<p>Redistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are\nmet:</p>\n\n<ul>\n<li><p>Redistributions of source code must retain the above copyright notice,\nthis list of conditions and the following disclaimer.</p></li>\n<li><p>Redistributions in binary form must reproduce the above copyright\nnotice, this list of conditions and the following disclaimer in the\ndocumentation and/or other materials provided with the distribution.</p></li>\n<li><p>Neither the name \"Markdown\" nor the names of its contributors may\nbe used to endorse or promote products derived from this software\nwithout specific prior written permission.</p></li>\n</ul>\n\n<p>This software is provided by the copyright holders and contributors \"as\nis\" and any express or implied warranties, including, but not limited\nto, the implied warranties of merchantability and fitness for a\nparticular purpose are disclaimed. In no event shall the copyright owner\nor contributors be liable for any direct, indirect, incidental, special,\nexemplary, or consequential damages (including, but not limited to,\nprocurement of substitute goods or services; loss of use, data, or\nprofits; or business interruption) however caused and on any theory of\nliability, whether in contract, strict liability, or tort (including\nnegligence or otherwise) arising in any way out of the use of this\nsoftware, even if advised of the possibility of such damage.</p>"),
%%     ?_assert(conv("Tricky combinaisons:\r\rbackslash with \\\\-- two dashes\r\rbackslash with \\\\> greater than\r\r\\\\\\[test](not a link)\r\r\\\\\\*no emphasis*") == "<p>Tricky combinaisons:</p>\n\n<p>backslash with \\-- two dashes</p>\n\n<p>backslash with \\> greater than</p>\n\n<p>\\[test](not a link)</p>\n\n<p>\\*no emphasis*</p>"),
%%     ?_assert(conv("From `<!--` to `-->`\non two lines.\n\nFrom `<!--`\nto `-->`\non three lines.\n") == "<p>From <code>&lt;!--</code> to <code>--&gt;</code>\non two lines.</p>\n\n<p>From <code>&lt;!--</code>\nto <code>--&gt;</code>\non three lines.</p>"),
%%     ?_assert(conv("\n*\tList Item:\n\n\t\tcode block\n\n\t\twith a blank line\n\n\twithin a list item.") == "<ul>\n<li><p>List Item:</p>\n\n<pre><code>code block\n\n\nwith a blank line\n</code></pre>\n\n<p>within a list item.</p></li>\n</ul>"),
%%     ?_assert(conv("Combined emphasis:\n\n1.  ***test test***\n2.  ___test test___\n3.  *test **test***\n4.  **test *test***\n5.  ***test* test**\n6.  ***test** test*\n7.  ***test* test**\n8.  **test *test***\n9.  *test **test***\n10. _test __test___\n11. __test _test___\n12. ___test_ test__\n13. ___test__ test_\n14. ___test_ test__\n15. __test _test___\n16. _test __test___\n\n\nIncorrect nesting:\n\n1.  *test  **test*  test**\n2.  _test  __test_  test__\n3.  **test  *test** test*\n4.  __test  _test__ test_\n5.  *test   *test*  test*\n6.  _test   _test_  test_\n7.  **test **test** test**\n8.  __test __test__ test__\n\n\n\nNo emphasis:\n\n1.  test*  test  *test\n2.  test** test **test\n3.  test_  test  _test\n4.  test__ test __test\n\n\n\nMiddle-word emphasis (asterisks):\n\n1.  *a*b\n2.   a*b*\n3.   a*b*c\n4. **a**b\n5.   a**b**\n6.   a**b**c\n\n\nMiddle-word emphasis (underscore):\n\n1.  _a_b\n2.   a_b_\n3.   a_b_c\n4. __a__b\n5.   a__b__\n6.   a__b__c\n\nmy_precious_file.txt\n\n\n## Tricky Cases\n\nE**. **Test** TestTestTest\n\nE**. **Test** Test Test Test\n") == "<p>Combined emphasis:</p>\n\n<ol>\n<li><strong><em>test test</em></strong></li>\n<li><strong><em>test test</em></strong></li>\n<li><em>test <strong>test</em></strong></li>\n<li><strong>test <em>test</em></strong></li>\n<li><strong><em>test</em> test</strong></li>\n<li><strong><em>test</strong> test</em></li>\n<li><strong><em>test</em> test</strong></li>\n<li><strong>test <em>test</em></strong></li>\n<li><em>test <strong>test</em></strong></li>\n<li><em>test <strong>test</em></strong></li>\n<li><strong>test <em>test</em></strong></li>\n<li><strong><em>test</em> test</strong></li>\n<li><strong><em>test</strong> test</em></li>\n<li><strong><em>test</em> test</strong></li>\n<li><strong>test <em>test</em></strong></li>\n<li><em>test <strong>test</em></strong></li>\n</ol>\n\n<p>Incorrect nesting:</p>\n\n<ol>\n<li><em>test  <strong>test</em>  test</strong></li>\n<li><em>test  <strong>test</em>  test</strong></li>\n<li><strong>test  <em>test</strong> test</em></li>\n<li><strong>test  <em>test</strong> test</em></li>\n<li><em>test   *test</em>  test*</li>\n<li><em>test   _test</em>  test_</li>\n<li><strong>test <em>*test</strong> test</em>*</li>\n<li><strong>test <em>_test</strong> test</em>_</li>\n</ol>\n\n<p>No emphasis:</p>\n\n<ol>\n<li>test*  test  *test</li>\n<li>test<em>* test *</em>test</li>\n<li>test_  test  _test</li>\n<li>test<em>_ test _</em>test</li>\n</ol>\n\n<p>Middle-word emphasis (asterisks):</p>\n\n<ol>\n<li><em>a</em>b</li>\n<li>a<em>b</em></li>\n<li>a<em>b</em>c</li>\n<li><strong>a</strong>b</li>\n<li>a<strong>b</strong></li>\n<li>a<strong>b</strong>c</li>\n</ol>\n\n<p>Middle-word emphasis (underscore):</p>\n\n<ol>\n<li><em>a</em>b</li>\n<li>a<em>b</em></li>\n<li>a<em>b</em>c</li>\n<li><strong>a</strong>b</li>\n<li>a<strong>b</strong></li>\n<li>a<strong>b</strong>c</li>\n</ol>\n\n<p>my<em>precious</em>file.txt</p>\n\n<h2>Tricky Cases</h2>\n\n<p>E<strong>. **Test</strong> TestTestTest</p>\n\n<p>E<strong>. **Test</strong> Test Test Test</p>"),
%%     ?_assert(conv("Header\r======\r\rHeader\r------\r\r### Header\n\n - - -\n\nHeader\r======\rParagraph\r\rHeader\r------\rParagraph\r\r### Header\rParagraph\n\n - - -\n\nParagraph\rHeader\r======\rParagraph\r\rParagraph\rHeader\r------\rParagraph\r\rParagraph\r### Header\rParagraph") == "<h1>Header</h1>\n\n<h2>Header</h2>\n\n<h3>Header</h3>\n\n<hr />\n\n<h1>Header</h1>\n\n<p>Paragraph</p>\n\n<h2>Header</h2>\n\n<p>Paragraph</p>\n\n<h3>Header</h3>\n\n<p>Paragraph</p>\n\n<hr />\n\n<p>Paragraph</p>\n\n<h1>Header</h1>\n\n<p>Paragraph</p>\n\n<p>Paragraph</p>\n\n<h2>Header</h2>\n\n<p>Paragraph</p>\n\n<p>Paragraph</p>\n\n<h3>Header</h3>\n\n<p>Paragraph</p>"),
%%     ?_assert(conv("Horizontal rules:\n\n- - -\n \n* * *\n \n***\n \n---\n \n___\n\nNot horizontal rules (testing for a bug in 1.0.1j):\n\n+++\n\n,,,\n\n===\n\n???\n\nAAA\n\njjj\n\nj j j\n\nn n n\n") == "<p>Horizontal rules:</p>\n\n<hr />\n\n<hr />\n\n<hr />\n\n<hr />\n\n<hr />\n\n<p>Not horizontal rules (testing for a bug in 1.0.1j):</p>\n\n<p>+++</p>\n\n<p>,,,</p>\n\n<p>===</p>\n\n<p>???</p>\n\n<p>AAA</p>\n\n<p>jjj</p>\n\n<p>j j j</p>\n\n<p>n n n</p>"),
%%     ?_assert(conv("With some attributes:\n\n<div id=\"test\">\n\tfoo\n</div>\n\n<div id=\"test\"\n     class=\"nono\">\n\tfoo\n</div>\n\t\nHr's:\n\n<hr class=\"foo\"\n    id=\"bar\" >\n") == "<p>With some attributes:</p>\n\n<div id=\"test\">\n    foo\n</div>\n\n<div id=\"test\"\n     class=\"nono\">\n    foo\n</div>\n\n<p>Hr's:</p>\n\n<hr class=\"foo\"\n    id=\"bar\" >"),
%%     ?_assert(conv("<abbr title=\"` **Attribute Content Is Not A Code Span** `\">ACINACS</abbr>\n\n<abbr title=\"`first backtick!\">SB</abbr> \n<abbr title=\"`second backtick!\">SB</abbr>") == "<p><abbr title=\"`**Attribute Content Is Not A Code Span**`\">ACINACS</abbr></p>\n\n<p><abbr title=\"`first backtick!\"&gt;SB&lt;/abbr&gt; \n&lt;abbr title=\"`second backtick!\">SB</abbr></p>"),
%%     ?_assert(conv("Paragraph one.\n\n<!-- double--dash (invalid SGML comment) -->\n\nParagraph two.\n\n<!-- enclosed tag </div> -->\n\nThe end.\n") == "<p>Paragraph one.</p>\n\n<!-- double--dash (invalid SGML comment) -->\n\n<p>Paragraph two.</p>\n\n<!-- enclosed tag </div> -->\n\n<p>The end.</p>"),
%%     ?_assert(conv("Here is a block tag ins:\n\n<ins>\n<p>Some text</p>\n</ins>\n\n<ins>And here it is inside a paragraph.</ins>\n\nAnd here it is <ins>in the middle of</ins> a paragraph.\n\n<del>\n<p>Some text</p>\n</del>\n\n<del>And here is ins as a paragraph.</del>\n\nAnd here it is <del>in the middle of</del> a paragraph.\n") == "<p>Here is a block tag ins:</p>\n\n<ins>\n<p>Some text</p>\n</ins>\n\n<p><ins>And here it is inside a paragraph.</ins></p>\n\n<p>And here it is <ins>in the middle of</ins> a paragraph.</p>\n\n<del>\n<p>Some text</p>\n</del>\n\n<p><del>And here is ins as a paragraph.</del></p>\n\n<p>And here it is <del>in the middle of</del> a paragraph.</p>"),
%%     ?_assert(conv("[silly URL w/ angle brackets](<?}]*+|&)>).\n") == "<p><a href=\"?}]*+|&amp;\">silly URL w/ angle brackets</a>>).</p>"),
%%     ?_assert(conv("# Character Escapes\n\nThe MD5 value for `+` is \"26b17225b626fb9238849fd60eabdf60\".\n\n# HTML Blocks\n\n<p>test</p>\n\nThe MD5 value for `<p>test</p>` is:\n\n6205333b793f34273d75379350b36826") == "<h1>Character Escapes</h1>\n\n<p>The MD5 value for <code>+</code> is \"26b17225b626fb9238849fd60eabdf60\".</p>\n\n<h1>HTML Blocks</h1>\n\n<p>test</p>\n\n<p>The MD5 value for <code>&lt;p&gt;test&lt;/p&gt;</code> is:</p>\n\n<p>6205333b793f34273d75379350b36826</p>"),
%%     ?_assert(conv("Valid nesting:\n\n**[Link](url)**\n\n[**Link**](url)\n\n**[**Link**](url)**\n\nInvalid nesting:\n\n[[Link](url)](url)") == "<p>Valid nesting:</p>\n\n<p><strong><a href=\"url\">Link</a></strong></p>\n\n<p><a href=\"url\"><strong>Link</strong></a></p>\n\n<p><strong><a href=\"url\"></strong>Link<strong></a></strong></p>\n\n<p>Invalid nesting:</p>\n\n<p><a href=\"url\">[Link](url)</a></p>"),
%%     ?_assert(conv("This tests for a bug where quotes escaped by PHP when using \n`preg_replace` with the `/e` modifier must be correctly unescaped\n(hence the `_UnslashQuotes` function found only in PHP Markdown).\n\n\n\nHeaders below should appear exactly as they are typed (no backslash\nadded or removed).\n\nHeader \"quoted\\\" again \\\\\"\"\n===========================\n\nHeader \"quoted\\\" again \\\\\"\"\n---------------------------\n\n### Header \"quoted\\\" again \\\\\"\" ###\n\n\n\nTest with tabs for `_Detab`:\n\n\tCode\t'block'\twith\tsome\t\"tabs\"\tand\t\"quotes\"\n") == "<p>This tests for a bug where quotes escaped by PHP when using \n<code>preg_replace</code> with the <code>/e</code> modifier must be correctly unescaped\n(hence the <code>_UnslashQuotes</code> function found only in PHP Markdown).</p>\n\n<p>Headers below should appear exactly as they are typed (no backslash\nadded or removed).</p>\n\n<h1>Header \"quoted\\\" again \\\"\"</h1>\n\n<h2>Header \"quoted\\\" again \\\"\"</h2>\n\n<h3>Header \"quoted\\\" again \\\"\"</h3>\n\n<p>Test with tabs for <code>_Detab</code>:</p>\n\n<pre><code>Code    'block' with    some    \"tabs\"  and \"quotes\"\n</code></pre>"),
%%     ?_assert(conv("[Inline link 1 with parens](/url\\(test\\) \"title\").\n\n[Inline link 2 with parens](</url\\(test\\)> \"title\").\n\n[Inline link 3 with non-escaped parens](/url(test) \"title\").\n\n[Inline link 4 with non-escaped parens](</url(test)> \"title\").\n\n[Reference link 1 with parens][1].\n\n[Reference link 2 with parens][2].\n\n  [1]: /url(test) \"title\"\n  [2]: </url(test)> \"title\"\n") == "<p><a href=\"/url(test)\" title=\"title\">Inline link 1 with parens</a>.</p>\n\n<p><a href=\"/url\\(test\\\">Inline link 2 with parens</a>> \"title\").</p>\n\n<p><a href=\"/url(test\">Inline link 3 with non-escaped parens</a> \"title\").</p>\n\n<p><a href=\"/url(test\">Inline link 4 with non-escaped parens</a>> \"title\").</p>\n\n<p><a href=\"/url\" title=\"test) &quot;title\">Reference link 1 with parens</a>.</p>\n\n<p><a href=\"/url\" title=\"test)> &quot;title\">Reference link 2 with parens</a>.</p>"),
%%     ?_assert(conv("Paragraph and no space:\r* ciao\r\rParagraph and 1 space:\r * ciao\r\rParagraph and 3 spaces:\r  * ciao\r\rParagraph and 4 spaces:\r   * ciao\r\rParagraph before header:\r#Header\r\rParagraph before blockquote:\r>Some quote.\r") == "<p>Paragraph and no space:\n* ciao</p>\n\n<p>Paragraph and 1 space:\n * ciao</p>\n\n<p>Paragraph and 3 spaces:\n  * ciao</p>\n\n<p>Paragraph and 4 spaces:\n   * ciao</p>\n\n<p>Paragraph before header:</p>\n\n<h1>Header</h1>\n\n<p>Paragraph before blockquote:</p>\n\n<blockquote>\n  <p>Some quote.</p>\n</blockquote>"),
%%     ?_assert(conv("AT&T has an ampersand in their name.\n\nAT&amp;T is another way to write it.\n\nThis & that.\n\n4 < 5.\n\n6 > 5.\n\nHere's a [link] [1] with an ampersand in the URL.\n\nHere's a link with an amersand in the link text: [AT&T] [2].\n\nHere's an inline [link](/script?foo=1&bar=2).\n\nHere's an inline [link](</script?foo=1&bar=2>).\n\n\n[1]: http://example.com/?foo=1&bar=2\n[2]: http://att.com/  \"AT&T\"") == "<p>AT&amp;T has an ampersand in their name.</p>\n\n<p>AT&amp;T is another way to write it.</p>\n\n<p>This &amp; that.</p>\n\n<p>4 &lt; 5.</p>\n\n<p>6 > 5.</p>\n\n<p>Here's a <a href=\"http://example.com/?foo=1&amp;bar=2\">link</a> with an ampersand in the URL.</p>\n\n<p>Here's a link with an amersand in the link text: <a href=\"http://att.com/\" title=\"AT&amp;T\">AT&amp;T</a>.</p>\n\n<p>Here's an inline <a href=\"/script?foo=1&amp;bar=2\">link</a>.</p>\n\n<p>Here's an inline <a href=\"/script?foo=1&amp;bar=2\">link</a>.</p>"),
%%     ?_assert(conv("Link: <http://example.com/>.\n\nWith an ampersand: <http://example.com/?foo=1&bar=2>\n\n* In a list?\n* <http://example.com/>\n* It should.\n\n> Blockquoted: <http://example.com/>\n\nAuto-links should not occur here: `<http://example.com/>`\n\n\tor here: <http://example.com/>") == "<p>Link: <a href=\"http://example.com/\">http://example.com/</a>.</p>\n\n<p>With an ampersand: <a href=\"http://example.com/?foo=1&amp;bar=2\">http://example.com/?foo=1&amp;bar=2</a></p>\n\n<ul>\n<li>In a list?</li>\n<li><a href=\"http://example.com/\">http://example.com/</a></li>\n<li>It should.</li>\n</ul>\n\n<blockquote>\n  <p>Blockquoted: <a href=\"http://example.com/\">http://example.com/</a></p>\n</blockquote>\n\n<p>Auto-links should not occur here: <code>&lt;http://example.com/&gt;</code></p>\n\n<pre><code>or here: &lt;http://example.com/&gt;\n</code></pre>"),
%%     ?_assert(conv("These should all get escaped:\n\nBackslash: \\\\\n\nBacktick: \\`\n\nAsterisk: \\*\n\nUnderscore: \\_\n\nLeft brace: \\{\n\nRight brace: \\}\n\nLeft bracket: \\[\n\nRight bracket: \\]\n\nLeft paren: \\(\n\nRight paren: \\)\n\nGreater-than: \\>\n\nHash: \\#\n\nPeriod: \\.\n\nBang: \\!\n\nPlus: \\+\n\nMinus: \\-\n\n\n\nThese should not, because they occur within a code block:\n\n\tBackslash: \\\\\n\n\tBacktick: \\`\n\n\tAsterisk: \\*\n\n\tUnderscore: \\_\n\n\tLeft brace: \\{\n\n\tRight brace: \\}\n\n\tLeft bracket: \\[\n\n\tRight bracket: \\]\n\n\tLeft paren: \\(\n\n\tRight paren: \\)\n\n\tGreater-than: \\>\n\n\tHash: \\#\n\n\tPeriod: \\.\n\n\tBang: \\!\n\n\tPlus: \\+\n\n\tMinus: \\-\n\n\nNor should these, which occur in code spans:\n\nBackslash: `\\\\`\n\nBacktick: `` \\` ``\n\nAsterisk: `\\*`\n\nUnderscore: `\\_`\n\nLeft brace: `\\{`\n\nRight brace: `\\}`\n\nLeft bracket: `\\[`\n\nRight bracket: `\\]`\n\nLeft paren: `\\(`\n\nRight paren: `\\)`\n\nGreater-than: `\\>`\n\nHash: `\\#`\n\nPeriod: `\\.`\n\nBang: `\\!`\n\nPlus: `\\+`\n\nMinus: `\\-`\n\n\nThese should get escaped, even though they're matching pairs for\nother Markdown constructs:\n\n\\*asterisks\\*\n\n\\_underscores\\_\n\n\\`backticks\\`\n\nThis is a code span with a literal backslash-backtick sequence: `` \\` ``\n\nThis is a tag with unescaped backticks <span attr='`ticks`'>bar</span>.\n\nThis is a tag with backslashes <span attr='\\\\backslashes\\\\'>bar</span>.\n") == "<p>These should all get escaped:</p>\n\n<p>Backslash: \\</p>\n\n<p>Backtick: `</p>\n\n<p>Asterisk: *</p>\n\n<p>Underscore: _</p>\n\n<p>Left brace: {</p>\n\n<p>Right brace: }</p>\n\n<p>Left bracket: [</p>\n\n<p>Right bracket: ]</p>\n\n<p>Left paren: (</p>\n\n<p>Right paren: )</p>\n\n<p>Greater-than: ></p>\n\n<p>Hash: #</p>\n\n<p>Period: .</p>\n\n<p>Bang: !</p>\n\n<p>Plus: +</p>\n\n<p>Minus: -</p>\n\n<p>These should not, because they occur within a code block:</p>\n\n<pre><code>Backslash: \\\\\n\nBacktick: \\`\n\nAsterisk: \\*\n\nUnderscore: \\_\n\nLeft brace: \\{\n\nRight brace: \\}\n\nLeft bracket: \\[\n\nRight bracket: \\]\n\nLeft paren: \\(\n\nRight paren: \\)\n\nGreater-than: \\&gt;\n\nHash: \\#\n\nPeriod: \\.\n\nBang: \\!\n\nPlus: \\+\n\nMinus: \\-\n</code></pre>\n\n<p>Nor should these, which occur in code spans:</p>\n\n<p>Backslash: <code>\\\\</code></p>\n\n<p>Backtick: <code>\\`</code></p>\n\n<p>Asterisk: <code>\\*</code></p>\n\n<p>Underscore: <code>\\_</code></p>\n\n<p>Left brace: <code>\\{</code></p>\n\n<p>Right brace: <code>\\}</code></p>\n\n<p>Left bracket: <code>\\[</code></p>\n\n<p>Right bracket: <code>\\]</code></p>\n\n<p>Left paren: <code>\\(</code></p>\n\n<p>Right paren: <code>\\)</code></p>\n\n<p>Greater-than: <code>\\&gt;</code></p>\n\n<p>Hash: <code>\\#</code></p>\n\n<p>Period: <code>\\.</code></p>\n\n<p>Bang: <code>\\!</code></p>\n\n<p>Plus: <code>\\+</code></p>\n\n<p>Minus: <code>\\-</code></p>\n\n<p>These should get escaped, even though they're matching pairs for\nother Markdown constructs:</p>\n\n<p>*asterisks*</p>\n\n<p>_underscores_</p>\n\n<p>`backticks`</p>\n\n<p>This is a code span with a literal backslash-backtick sequence: <code>\\`</code></p>\n\n<p>This is a tag with unescaped backticks <span attr='`ticks`'>bar</span>.</p>\n\n<p>This is a tag with backslashes <span attr='\\\\backslashes\\\\'>bar</span>.</p>"),
%%     ?_assert(conv("> Example:\n> \n>     sub status {\n>         print \"working\";\n>     }\n> \n> Or:\n> \n>     sub status {\n>         return \"working\";\n>     }\n") == "<blockquote>\n  <p>Example:</p>\n\n<pre><code>sub status {\n    print \"working\";\n}\n</code></pre>\n  \n  <p>Or:</p>\n\n<pre><code>sub status {\n    return \"working\";\n}\n</code></pre>\n</blockquote>"),
%%     ?_assert(conv("\tcode block on the first line\n\t\nRegular text.\n\n    code block indented by spaces\n\nRegular text.\n\n\tthe lines in this block  \n\tall contain trailing spaces  \n\nRegular Text.\n\n\tcode block on the last line") == "<pre><code>code block on the first line\n</code></pre>\n\n<p>Regular text.</p>\n\n<pre><code>code block indented by spaces\n</code></pre>\n\n<p>Regular text.</p>\n\n<pre><code>the lines in this block  \nall contain trailing spaces  \n</code></pre>\n\n<p>Regular Text.</p>\n\n<pre><code>code block on the last line\n</code></pre>"),
%%     ?_assert(conv("`<test a=\"` content of attribute `\">`\n\nFix for backticks within HTML tag: <span attr='`ticks`'>like this</span>\n\nHere's how you put `` `backticks` `` in a code span.") == "<p><code>&lt;test a=\"</code> content of attribute <code>\"&gt;</code></p>\n\n<p>Fix for backticks within HTML tag: <span attr='`ticks`'>like this</span></p>\n\n<p>Here's how you put <code>`backticks`</code> in a code span.</p>"),
%%     ?_assert(conv("In Markdown 1.0.0 and earlier. Version\n8. This line turns into a list item.\nBecause a hard-wrapped line in the\nmiddle of a paragraph looked like a\nlist item.\n\nHere's one with a bullet.\n* criminey.\n") == "<p>In Markdown 1.0.0 and earlier. Version\n8. This line turns into a list item.\nBecause a hard-wrapped line in the\nmiddle of a paragraph looked like a\nlist item.</p>\n\n<p>Here's one with a bullet.\n* criminey.</p>"),
%%     ?_assert(conv("Dashes:\n\n---\n\n ---\n \n  ---\n\n   ---\n\n\t---\n\n- - -\n\n - - -\n \n  - - -\n\n   - - -\n\n\t- - -\n\n\nAsterisks:\n\n***\n\n ***\n \n  ***\n\n   ***\n\n\t***\n\n* * *\n\n * * *\n \n  * * *\n\n   * * *\n\n\t* * *\n\n\nUnderscores:\n\n___\n\n ___\n \n  ___\n\n   ___\n\n    ___\n\n_ _ _\n\n _ _ _\n \n  _ _ _\n\n   _ _ _\n\n    _ _ _\n") == "<p>Dashes:</p>\n\n<hr />\n\n<hr />\n\n<hr />\n\n<hr />\n\n<pre><code>---\n</code></pre>\n\n<hr />\n\n<hr />\n\n<hr />\n\n<hr />\n\n<pre><code>- - -\n</code></pre>\n\n<p>Asterisks:</p>\n\n<hr />\n\n<hr />\n\n<hr />\n\n<hr />\n\n<pre><code>***\n</code></pre>\n\n<hr />\n\n<hr />\n\n<hr />\n\n<hr />\n\n<pre><code>* * *\n</code></pre>\n\n<p>Underscores:</p>\n\n<hr />\n\n<hr />\n\n<hr />\n\n<hr />\n\n<pre><code>___\n</code></pre>\n\n<hr />\n\n<hr />\n\n<hr />\n\n<hr />\n\n<pre><code>_ _ _\n</code></pre>"),
%%     ?_assert(conv("![Alt text](/path/to/img.jpg)\n\n![Alt text](/path/to/img.jpg \"Optional title\")\n\nInline within a paragraph: [alt text](/url/).\n\n![alt text](/url/  \"title preceded by two spaces\")\n\n![alt text](/url/  \"title has spaces afterward\"  )\n\n![alt text](</url/>)\n\n![alt text](</url/> \"with a title\").\n\n![Empty]()\n\n![this is a stupid URL](http://example.com/(parens).jpg)\n\n\n![alt text][foo]\n\n  [foo]: /url/\n\n![alt text][bar]\n\n  [bar]: /url/ \"Title here\"") == "<p><img src=\"/path/to/img.jpg\" alt=\"Alt text\" title=\"\" /></p>\n\n<p><img src=\"/path/to/img.jpg\" alt=\"Alt text\" title=\"Optional title\" /></p>\n\n<p>Inline within a paragraph: <a href=\"/url/\">alt text</a>.</p>\n\n<p><img src=\"/url/\" alt=\"alt text\" title=\"title preceded by two spaces\" /></p>\n\n<p><img src=\"/url/\" alt=\"alt text\" title=\"title has spaces afterward\" /></p>\n\n<p><img src=\"/url/\" alt=\"alt text\" title=\"\" /></p>\n\n<p><img src=\"/url/\" alt=\"alt text\" title=\"with a title\" />.</p>\n\n<p>!<a href=\"\">Empty</a></p>\n\n<p><img src=\"http://example.com/(parens\" alt=\"this is a stupid URL\" title=\"\" />.jpg)</p>\n\n<p><img src=\"/url/\" alt=\"alt text\" title=\"\" /></p>\n\n<p><img src=\"/url/\" alt=\"alt text\" title=\"Title here\" /></p>"),
%%     ?_assert(conv("Simple block on one line:\n\n<div>foo</div>\n\nAnd nested without indentation:\n\n<div>\n<div>\n<div>\nfoo\n</div>\n<div style=\">\"/>\n</div>\n<div>bar</div>\n</div>\n\nAnd with attributes:\n\n<div>\n\t<div id=\"foo\">\n\t</div>\n</div>\n\nThis was broken in 1.0.2b7:\n\n<div class=\"inlinepage\">\n<div class=\"toggleableend\">\nfoo\n</div>\n</div>\n") == "<p>Simple block on one line:</p>\n\n<div>foo</div>\n\nAnd nested without indentation:\n\n<div>\n<div>\n<div>\nfoo\n</div>\n\n<div style=\">\"/>\n</div>\n\n<div>bar</div>\n</div>\n\n<p>And with attributes:</p>\n\n<div>\n    <div id=\"foo\">\n    </div>\n</div>\n\n<p>This was broken in 1.0.2b7:</p>\n\n<div class=\"inlinepage\">\n<div class=\"toggleableend\">\nfoo\n</div>\n\n<p></div></p>"),
%%     ?_assert(conv("Here's a simple block:\n\n<div>\n\tfoo\n</div>\n\nThis should be a code block, though:\n\n\t<div>\n\t\tfoo\n\t</div>\n\nAs should this:\n\n\t<div>foo</div>\n\nNow, nested:\n\n<div>\n\t<div>\n\t\t<div>\n\t\t\tfoo\n\t\t</div>\n\t</div>\n</div>\n\nThis should just be an HTML comment:\n\n<!-- Comment -->\n\nMultiline:\n\n<!--\nBlah\nBlah\n-->\n\nCode block:\n\n\t<!-- Comment -->\n\nJust plain comment, with trailing spaces on the line:\n\n<!-- foo -->   \n\nCode:\n\n\t<hr />\n\t\nHr's:\n\n<hr>\n\n<hr/>\n\n<hr />\n\n<hr>   \n\n<hr/>  \n\n<hr /> \n\n<hr class=\"foo\" id=\"bar\" />\n\n<hr class=\"foo\" id=\"bar\"/>\n\n<hr class=\"foo\" id=\"bar\" >\n\n") == "<p>Here's a simple block:</p>\n\n<div>\n    foo\n</div>\n\n<p>This should be a code block, though:</p>\n\n<pre><code>&lt;div&gt;\n    foo\n&lt;/div&gt;\n</code></pre>\n\n<p>As should this:</p>\n\n<pre><code>&lt;div&gt;foo&lt;/div&gt;\n</code></pre>\n\n<p>Now, nested:</p>\n\n<div>\n    <div>\n        <div>\n            foo\n        </div>\n    </div>\n</div>\n\n<p>This should just be an HTML comment:</p>\n\n<!-- Comment -->\n\n<p>Multiline:</p>\n\n<!--\nBlah\nBlah\n-->\n\n<p>Code block:</p>\n\n<pre><code>&lt;!-- Comment --&gt;\n</code></pre>\n\n<p>Just plain comment, with trailing spaces on the line:</p>\n\n<!-- foo -->   \n\n<p>Code:</p>\n\n<pre><code>&lt;hr /&gt;\n</code></pre>\n\n<p>Hr's:</p>\n\n<hr>\n\n<hr/>\n\n<hr />\n\n<hr>   \n\n<hr/>  \n\n<hr /> \n\n<hr class=\"foo\" id=\"bar\" />\n\n<hr class=\"foo\" id=\"bar\"/>\n\n<hr class=\"foo\" id=\"bar\" >"),
%%     ?_assert(conv("Paragraph one.\n\n<!-- This is a simple comment -->\n\n<!--\n\tThis is another comment.\n-->\n\nParagraph two.\n\n<!-- one comment block -- -- with two comments -->\n\nThe end.\n") == "<p>Paragraph one.</p>\n\n<!-- This is a simple comment -->\n\n<!--\n    This is another comment.\n-->\n\n<p>Paragraph two.</p>\n\n<!-- one comment block -- -- with two comments -->\n\n<p>The end.</p>"),
%%     ?_assert(conv("Just a [URL](/url/).\n\n[URL and title](/url/ \"title\").\n\n[URL and title](/url/  \"title preceded by two spaces\").\n\n[URL and title](/url/\t\"title preceded by a tab\").\n\n[URL and title](/url/ \"title has spaces afterward\"  ).\n\n[URL wrapped in angle brackets](</url/>).\n\n[URL w/ angle brackets + title](</url/> \"Here's the title\").\n\n[Empty]().\n\n[With parens in the URL](http://en.wikipedia.org/wiki/WIMP_(computing))\n\n(With outer parens and [parens in url](/foo(bar)))\n\n\n[With parens in the URL](/foo(bar) \"and a title\")\n\n(With outer parens and [parens in url](/foo(bar) \"and a title\"))\n") == "<p>Just a <a href=\"/url/\">URL</a>.</p>\n\n<p><a href=\"/url/\" title=\"title\">URL and title</a>.</p>\n\n<p><a href=\"/url/\" title=\"title preceded by two spaces\">URL and title</a>.</p>\n\n<p><a href=\"/url/\" title=\"title preceded by a tab\">URL and title</a>.</p>\n\n<p><a href=\"/url/\" title=\"title has spaces afterward\">URL and title</a>.</p>\n\n<p><a href=\"/url/\">URL wrapped in angle brackets</a>.</p>\n\n<p><a href=\"/url/\" title=\"Here's the title\">URL w/ angle brackets + title</a>.</p>\n\n<p><a href=\"\">Empty</a>.</p>\n\n<p><a href=\"http://en.wikipedia.org/wiki/WIMP_(computing\">With parens in the URL</a>)</p>\n\n<p>(With outer parens and <a href=\"/foo(bar\">parens in url</a>))</p>\n\n<p><a href=\"/foo(bar\">With parens in the URL</a> \"and a title\")</p>\n\n<p>(With outer parens and <a href=\"/foo(bar\">parens in url</a> \"and a title\"))</p>"),
%%     ?_assert(conv("Foo [bar] [1].\n\nFoo [bar][1].\n\nFoo [bar]\n[1].\n\n[1]: /url/  \"Title\"\n\n\nWith [embedded [brackets]] [b].\n\n\nIndented [once][].\n\nIndented [twice][].\n\nIndented [thrice][].\n\nIndented [four][] times.\n\n [once]: /url\n\n  [twice]: /url\n\n   [thrice]: /url\n\n    [four]: /url\n\n\n[b]: /url/\n\n* * *\n\n[this] [this] should work\n\nSo should [this][this].\n\nAnd [this] [].\n\nAnd [this][].\n\nAnd [this].\n\nBut not [that] [].\n\nNor [that][].\n\nNor [that].\n\n[Something in brackets like [this][] should work]\n\n[Same with [this].]\n\nIn this case, [this](/somethingelse/) points to something else.\n\nBackslashing should suppress \\[this] and [this\\].\n\n[this]: foo\n\n\n* * *\n\nHere's one where the [link\nbreaks] across lines.\n\nHere's another where the [link \nbreaks] across lines, but with a line-ending space.\n\n\n[link breaks]: /url/\n") == "<p>Foo <a href=\"/url/\" title=\"Title\">bar</a>.</p>\n\n<p>Foo <a href=\"/url/\" title=\"Title\">bar</a>.</p>\n\n<p>Foo <a href=\"/url/\" title=\"Title\">bar</a>.</p>\n\n<p>With <a href=\"/url/\">embedded [brackets]</a>.</p>\n\n<p>Indented <a href=\"/url\">once</a>.</p>\n\n<p>Indented <a href=\"/url\">twice</a>.</p>\n\n<p>Indented <a href=\"/url\">thrice</a>.</p>\n\n<p>Indented [four][] times.</p>\n\n<pre><code>[four]: /url\n</code></pre>\n\n<hr />\n\n<p><a href=\"foo\">this</a> should work</p>\n\n<p>So should <a href=\"foo\">this</a>.</p>\n\n<p>And <a href=\"foo\">this</a>.</p>\n\n<p>And <a href=\"foo\">this</a>.</p>\n\n<p>And <a href=\"foo\">this</a>.</p>\n\n<p>But not [that] [].</p>\n\n<p>Nor [that][].</p>\n\n<p>Nor [that].</p>\n\n<p>[Something in brackets like <a href=\"foo\">this</a> should work]</p>\n\n<p>[Same with <a href=\"foo\">this</a>.]</p>\n\n<p>In this case, <a href=\"/somethingelse/\">this</a> points to something else.</p>\n\n<p>Backslashing should suppress [this] and [this].</p>\n\n<hr />\n\n<p>Here's one where the <a href=\"/url/\">link\nbreaks</a> across lines.</p>\n\n<p>Here's another where the <a href=\"/url/\">link \nbreaks</a> across lines, but with a line-ending space.</p>"),
%%     ?_assert(conv("This is the [simple case].\n\n[simple case]: /simple\n\n\n\nThis one has a [line\nbreak].\n\nThis one has a [line \nbreak] with a line-ending space.\n\n[line break]: /foo\n\n\n[this] [that] and the [other]\n\n[this]: /this\n[that]: /that\n[other]: /other\n") == "<p>This is the <a href=\"/simple\">simple case</a>.</p>\n\n<p>This one has a <a href=\"/foo\">line\nbreak</a>.</p>\n\n<p>This one has a <a href=\"/foo\">line \nbreak</a> with a line-ending space.</p>\n\n<p><a href=\"/that\">this</a> and the <a href=\"/other\">other</a></p>"),
%%     ?_assert(conv("Foo [bar][].\n\nFoo [bar](/url/ \"Title with \"quotes\" inside\").\n\n\n  [bar]: /url/ \"Title with \"quotes\" inside\"\n\n") == "<p>Foo <a href=\"/url/\" title=\"Title with &quot;quotes&quot; inside\">bar</a>.</p>\n\n<p>Foo <a href=\"/url/\" title=\"Title with &quot;quotes&quot; inside\">bar</a>.</p>"),
%%     ?_assert(conv("Markdown: Basics\n================\n\n<ul id=\"ProjectSubmenu\">\n    <li><a href=\"/projects/markdown/\" title=\"Markdown Project Page\">Main</a></li>\n    <li><a class=\"selected\" title=\"Markdown Basics\">Basics</a></li>\n    <li><a href=\"/projects/markdown/syntax\" title=\"Markdown Syntax Documentation\">Syntax</a></li>\n    <li><a href=\"/projects/markdown/license\" title=\"Pricing and License Information\">License</a></li>\n    <li><a href=\"/projects/markdown/dingus\" title=\"Online Markdown Web Form\">Dingus</a></li>\n</ul>\n\n\nGetting the Gist of Markdown's Formatting Syntax\n------------------------------------------------\n\nThis page offers a brief overview of what it's like to use Markdown.\nThe [syntax page] [s] provides complete, detailed documentation for\nevery feature, but Markdown should be very easy to pick up simply by\nlooking at a few examples of it in action. The examples on this page\nare written in a before/after style, showing example syntax and the\nHTML output produced by Markdown.\n\nIt's also helpful to simply try Markdown out; the [Dingus] [d] is a\nweb application that allows you type your own Markdown-formatted text\nand translate it to XHTML.\n\n**Note:** This document is itself written using Markdown; you\ncan [see the source for it by adding '.text' to the URL] [src].\n\n  [s]: /projects/markdown/syntax  \"Markdown Syntax\"\n  [d]: /projects/markdown/dingus  \"Markdown Dingus\"\n  [src]: /projects/markdown/basics.text\n\n\n## Paragraphs, Headers, Blockquotes ##\n\nA paragraph is simply one or more consecutive lines of text, separated\nby one or more blank lines. (A blank line is any line that looks like a\nblank line -- a line containing nothing spaces or tabs is considered\nblank.) Normal paragraphs should not be intended with spaces or tabs.\n\nMarkdown offers two styles of headers: *Setext* and *atx*.\nSetext-style headers for `<h1>` and `<h2>` are created by\n\"underlining\" with equal signs (`=`) and hyphens (`-`), respectively.\nTo create an atx-style header, you put 1-6 hash marks (`#`) at the\nbeginning of the line -- the number of hashes equals the resulting\nHTML header level.\n\nBlockquotes are indicated using email-style '`>`' angle brackets.\n\nMarkdown:\n\n    A First Level Header\n    ====================\n    \n    A Second Level Header\n    ---------------------\n\n    Now is the time for all good men to come to\n    the aid of their country. This is just a\n    regular paragraph.\n\n    The quick brown fox jumped over the lazy\n    dog's back.\n    \n    ### Header 3\n\n    > This is a blockquote.\n    > \n    > This is the second paragraph in the blockquote.\n    >\n    > ## This is an H2 in a blockquote\n\n\nOutput:\n\n    <h1>A First Level Header</h1>\n    \n    <h2>A Second Level Header</h2>\n    \n    <p>Now is the time for all good men to come to\n    the aid of their country. This is just a\n    regular paragraph.</p>\n    \n    <p>The quick brown fox jumped over the lazy\n    dog's back.</p>\n    \n    <h3>Header 3</h3>\n    \n    <blockquote>\n        <p>This is a blockquote.</p>\n        \n        <p>This is the second paragraph in the blockquote.</p>\n        \n        <h2>This is an H2 in a blockquote</h2>\n    </blockquote>\n\n\n\n### Phrase Emphasis ###\n\nMarkdown uses asterisks and underscores to indicate spans of emphasis.\n\nMarkdown:\n\n    Some of these words *are emphasized*.\n    Some of these words _are emphasized also_.\n    \n    Use two asterisks for **strong emphasis**.\n    Or, if you prefer, __use two underscores instead__.\n\nOutput:\n\n    <p>Some of these words <em>are emphasized</em>.\n    Some of these words <em>are emphasized also</em>.</p>\n    \n    <p>Use two asterisks for <strong>strong emphasis</strong>.\n    Or, if you prefer, <strong>use two underscores instead</strong>.</p>\n   \n\n\n## Lists ##\n\nUnordered (bulleted) lists use asterisks, pluses, and hyphens (`*`,\n`+`, and `-`) as list markers. These three markers are\ninterchangable; this:\n\n    *   Candy.\n    *   Gum.\n    *   Booze.\n\nthis:\n\n    +   Candy.\n    +   Gum.\n    +   Booze.\n\nand this:\n\n    -   Candy.\n    -   Gum.\n    -   Booze.\n\nall produce the same output:\n\n    <ul>\n    <li>Candy.</li>\n    <li>Gum.</li>\n    <li>Booze.</li>\n    </ul>\n\nOrdered (numbered) lists use regular numbers, followed by periods, as\nlist markers:\n\n    1.  Red\n    2.  Green\n    3.  Blue\n\nOutput:\n\n    <ol>\n    <li>Red</li>\n    <li>Green</li>\n    <li>Blue</li>\n    </ol>\n\nIf you put blank lines between items, you'll get `<p>` tags for the\nlist item text. You can create multi-paragraph list items by indenting\nthe paragraphs by 4 spaces or 1 tab:\n\n    *   A list item.\n    \n        With multiple paragraphs.\n\n    *   Another item in the list.\n\nOutput:\n\n    <ul>\n    <li><p>A list item.</p>\n    <p>With multiple paragraphs.</p></li>\n    <li><p>Another item in the list.</p></li>\n    </ul>\n    \n\n\n### Links ###\n\nMarkdown supports two styles for creating links: *inline* and\n*reference*. With both styles, you use square brackets to delimit the\ntext you want to turn into a link.\n\nInline-style links use parentheses immediately after the link text.\nFor example:\n\n    This is an [example link](http://example.com/).\n\nOutput:\n\n    <p>This is an <a href=\"http://example.com/\">\n    example link</a>.</p>\n\nOptionally, you may include a title attribute in the parentheses:\n\n    This is an [example link](http://example.com/ \"With a Title\").\n\nOutput:\n\n    <p>This is an <a href=\"http://example.com/\" title=\"With a Title\">\n    example link</a>.</p>\n\nReference-style links allow you to refer to your links by names, which\nyou define elsewhere in your document:\n\n    I get 10 times more traffic from [Google][1] than from\n    [Yahoo][2] or [MSN][3].\n\n    [1]: http://google.com/        \"Google\"\n    [2]: http://search.yahoo.com/  \"Yahoo Search\"\n    [3]: http://search.msn.com/    \"MSN Search\"\n\nOutput:\n\n    <p>I get 10 times more traffic from <a href=\"http://google.com/\"\n    title=\"Google\">Google</a> than from <a href=\"http://search.yahoo.com/\"\n    title=\"Yahoo Search\">Yahoo</a> or <a href=\"http://search.msn.com/\"\n    title=\"MSN Search\">MSN</a>.</p>\n\nThe title attribute is optional. Link names may contain letters,\nnumbers and spaces, but are *not* case sensitive:\n\n    I start my morning with a cup of coffee and\n    [The New York Times][NY Times].\n\n    [ny times]: http://www.nytimes.com/\n\nOutput:\n\n    <p>I start my morning with a cup of coffee and\n    <a href=\"http://www.nytimes.com/\">The New York Times</a>.</p>\n\n\n### Images ###\n\nImage syntax is very much like link syntax.\n\nInline (titles are optional):\n\n    ![alt text](/path/to/img.jpg \"Title\")\n\nReference-style:\n\n    ![alt text][id]\n\n    [id]: /path/to/img.jpg \"Title\"\n\nBoth of the above examples produce the same output:\n\n    <img src=\"/path/to/img.jpg\" alt=\"alt text\" title=\"Title\" />\n\n\n\n### Code ###\n\nIn a regular paragraph, you can create code span by wrapping text in\nbacktick quotes. Any ampersands (`&`) and angle brackets (`<` or\n`>`) will automatically be translated into HTML entities. This makes\nit easy to use Markdown to write about HTML example code:\n\n    I strongly recommend against using any `<blink>` tags.\n\n    I wish SmartyPants used named entities like `&mdash;`\n    instead of decimal-encoded entites like `&#8212;`.\n\nOutput:\n\n    <p>I strongly recommend against using any\n    <code>&lt;blink&gt;</code> tags.</p>\n    \n    <p>I wish SmartyPants used named entities like\n    <code>&amp;mdash;</code> instead of decimal-encoded\n    entites like <code>&amp;#8212;</code>.</p>\n\n\nTo specify an entire block of pre-formatted code, indent every line of\nthe block by 4 spaces or 1 tab. Just like with code spans, `&`, `<`,\nand `>` characters will be escaped automatically.\n\nMarkdown:\n\n    If you want your page to validate under XHTML 1.0 Strict,\n    you've got to put paragraph tags in your blockquotes:\n\n        <blockquote>\n            <p>For example.</p>\n        </blockquote>\n\nOutput:\n\n    <p>If you want your page to validate under XHTML 1.0 Strict,\n    you've got to put paragraph tags in your blockquotes:</p>\n    \n    <pre><code>&lt;blockquote&gt;\n        &lt;p&gt;For example.&lt;/p&gt;\n    &lt;/blockquote&gt;\n    </code></pre>\n") == "<h1>Markdown: Basics</h1>\n\n<ul id=\"ProjectSubmenu\">\n    <li><a href=\"/projects/markdown/\" title=\"Markdown Project Page\">Main</a></li>\n    <li><a class=\"selected\" title=\"Markdown Basics\">Basics</a></li>\n    <li><a href=\"/projects/markdown/syntax\" title=\"Markdown Syntax Documentation\">Syntax</a></li>\n    <li><a href=\"/projects/markdown/license\" title=\"Pricing and License Information\">License</a></li>\n    <li><a href=\"/projects/markdown/dingus\" title=\"Online Markdown Web Form\">Dingus</a></li>\n</ul>\n\n<h2>Getting the Gist of Markdown's Formatting Syntax</h2>\n\n<p>This page offers a brief overview of what it's like to use Markdown.\nThe <a href=\"/projects/markdown/syntax\" title=\"Markdown Syntax\">syntax page</a> provides complete, detailed documentation for\nevery feature, but Markdown should be very easy to pick up simply by\nlooking at a few examples of it in action. The examples on this page\nare written in a before/after style, showing example syntax and the\nHTML output produced by Markdown.</p>\n\n<p>It's also helpful to simply try Markdown out; the <a href=\"/projects/markdown/dingus\" title=\"Markdown Dingus\">Dingus</a> is a\nweb application that allows you type your own Markdown-formatted text\nand translate it to XHTML.</p>\n\n<p><strong>Note:</strong> This document is itself written using Markdown; you\ncan <a href=\"/projects/markdown/basics.text\">see the source for it by adding '.text' to the URL</a>.</p>\n\n<h2>Paragraphs, Headers, Blockquotes</h2>\n\n<p>A paragraph is simply one or more consecutive lines of text, separated\nby one or more blank lines. (A blank line is any line that looks like a\nblank line -- a line containing nothing spaces or tabs is considered\nblank.) Normal paragraphs should not be intended with spaces or tabs.</p>\n\n<p>Markdown offers two styles of headers: <em>Setext</em> and <em>atx</em>.\nSetext-style headers for <code>&lt;h1&gt;</code> and <code>&lt;h2&gt;</code> are created by\n\"underlining\" with equal signs (<code>=</code>) and hyphens (<code>-</code>), respectively.\nTo create an atx-style header, you put 1-6 hash marks (<code>#</code>) at the\nbeginning of the line -- the number of hashes equals the resulting\nHTML header level.</p>\n\n<p>Blockquotes are indicated using email-style '<code>&gt;</code>' angle brackets.</p>\n\n<p>Markdown:</p>\n\n<pre><code>A First Level Header\n====================\n\nA Second Level Header\n---------------------\n\nNow is the time for all good men to come to\nthe aid of their country. This is just a\nregular paragraph.\n\nThe quick brown fox jumped over the lazy\ndog's back.\n\n### Header 3\n\n&gt; This is a blockquote.\n&gt; \n&gt; This is the second paragraph in the blockquote.\n&gt;\n&gt; ## This is an H2 in a blockquote\n</code></pre>\n\n<p>Output:</p>\n\n<pre><code>&lt;h1&gt;A First Level Header&lt;/h1&gt;\n\n&lt;h2&gt;A Second Level Header&lt;/h2&gt;\n\n&lt;p&gt;Now is the time for all good men to come to\nthe aid of their country. This is just a\nregular paragraph.&lt;/p&gt;\n\n&lt;p&gt;The quick brown fox jumped over the lazy\ndog's back.&lt;/p&gt;\n\n&lt;h3&gt;Header 3&lt;/h3&gt;\n\n&lt;blockquote&gt;\n    &lt;p&gt;This is a blockquote.&lt;/p&gt;\n\n    &lt;p&gt;This is the second paragraph in the blockquote.&lt;/p&gt;\n\n    &lt;h2&gt;This is an H2 in a blockquote&lt;/h2&gt;\n&lt;/blockquote&gt;\n</code></pre>\n\n<h3>Phrase Emphasis</h3>\n\n<p>Markdown uses asterisks and underscores to indicate spans of emphasis.</p>\n\n<p>Markdown:</p>\n\n<pre><code>Some of these words *are emphasized*.\nSome of these words _are emphasized also_.\n\nUse two asterisks for **strong emphasis**.\nOr, if you prefer, __use two underscores instead__.\n</code></pre>\n\n<p>Output:</p>\n\n<pre><code>&lt;p&gt;Some of these words &lt;em&gt;are emphasized&lt;/em&gt;.\nSome of these words &lt;em&gt;are emphasized also&lt;/em&gt;.&lt;/p&gt;\n\n&lt;p&gt;Use two asterisks for &lt;strong&gt;strong emphasis&lt;/strong&gt;.\nOr, if you prefer, &lt;strong&gt;use two underscores instead&lt;/strong&gt;.&lt;/p&gt;\n</code></pre>\n\n<h2>Lists</h2>\n\n<p>Unordered (bulleted) lists use asterisks, pluses, and hyphens (<code>*</code>,\n<code>+</code>, and <code>-</code>) as list markers. These three markers are\ninterchangable; this:</p>\n\n<pre><code>*   Candy.\n*   Gum.\n*   Booze.\n</code></pre>\n\n<p>this:</p>\n\n<pre><code>+   Candy.\n+   Gum.\n+   Booze.\n</code></pre>\n\n<p>and this:</p>\n\n<pre><code>-   Candy.\n-   Gum.\n-   Booze.\n</code></pre>\n\n<p>all produce the same output:</p>\n\n<pre><code>&lt;ul&gt;\n&lt;li&gt;Candy.&lt;/li&gt;\n&lt;li&gt;Gum.&lt;/li&gt;\n&lt;li&gt;Booze.&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre>\n\n<p>Ordered (numbered) lists use regular numbers, followed by periods, as\nlist markers:</p>\n\n<pre><code>1.  Red\n2.  Green\n3.  Blue\n</code></pre>\n\n<p>Output:</p>\n\n<pre><code>&lt;ol&gt;\n&lt;li&gt;Red&lt;/li&gt;\n&lt;li&gt;Green&lt;/li&gt;\n&lt;li&gt;Blue&lt;/li&gt;\n&lt;/ol&gt;\n</code></pre>\n\n<p>If you put blank lines between items, you'll get <code>&lt;p&gt;</code> tags for the\nlist item text. You can create multi-paragraph list items by indenting\nthe paragraphs by 4 spaces or 1 tab:</p>\n\n<pre><code>*   A list item.\n\n    With multiple paragraphs.\n\n*   Another item in the list.\n</code></pre>\n\n<p>Output:</p>\n\n<pre><code>&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;A list item.&lt;/p&gt;\n&lt;p&gt;With multiple paragraphs.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Another item in the list.&lt;/p&gt;&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre>\n\n<h3>Links</h3>\n\n<p>Markdown supports two styles for creating links: <em>inline</em> and\n<em>reference</em>. With both styles, you use square brackets to delimit the\ntext you want to turn into a link.</p>\n\n<p>Inline-style links use parentheses immediately after the link text.\nFor example:</p>\n\n<pre><code>This is an [example link](http://example.com/).\n</code></pre>\n\n<p>Output:</p>\n\n<pre><code>&lt;p&gt;This is an &lt;a href=\"http://example.com/\"&gt;\nexample link&lt;/a&gt;.&lt;/p&gt;\n</code></pre>\n\n<p>Optionally, you may include a title attribute in the parentheses:</p>\n\n<pre><code>This is an [example link](http://example.com/ \"With a Title\").\n</code></pre>\n\n<p>Output:</p>\n\n<pre><code>&lt;p&gt;This is an &lt;a href=\"http://example.com/\" title=\"With a Title\"&gt;\nexample link&lt;/a&gt;.&lt;/p&gt;\n</code></pre>\n\n<p>Reference-style links allow you to refer to your links by names, which\nyou define elsewhere in your document:</p>\n\n<pre><code>I get 10 times more traffic from [Google][1] than from\n[Yahoo][2] or [MSN][3].\n\n[1]: http://google.com/        \"Google\"\n[2]: http://search.yahoo.com/  \"Yahoo Search\"\n[3]: http://search.msn.com/    \"MSN Search\"\n</code></pre>\n\n<p>Output:</p>\n\n<pre><code>&lt;p&gt;I get 10 times more traffic from &lt;a href=\"http://google.com/\"\ntitle=\"Google\"&gt;Google&lt;/a&gt; than from &lt;a href=\"http://search.yahoo.com/\"\ntitle=\"Yahoo Search\"&gt;Yahoo&lt;/a&gt; or &lt;a href=\"http://search.msn.com/\"\ntitle=\"MSN Search\"&gt;MSN&lt;/a&gt;.&lt;/p&gt;\n</code></pre>\n\n<p>The title attribute is optional. Link names may contain letters,\nnumbers and spaces, but are <em>not</em> case sensitive:</p>\n\n<pre><code>I start my morning with a cup of coffee and\n[The New York Times][NY Times].\n\n[ny times]: http://www.nytimes.com/\n</code></pre>\n\n<p>Output:</p>\n\n<pre><code>&lt;p&gt;I start my morning with a cup of coffee and\n&lt;a href=\"http://www.nytimes.com/\"&gt;The New York Times&lt;/a&gt;.&lt;/p&gt;\n</code></pre>\n\n<h3>Images</h3>\n\n<p>Image syntax is very much like link syntax.</p>\n\n<p>Inline (titles are optional):</p>\n\n<pre><code>![alt text](/path/to/img.jpg \"Title\")\n</code></pre>\n\n<p>Reference-style:</p>\n\n<pre><code>![alt text][id]\n\n[id]: /path/to/img.jpg \"Title\"\n</code></pre>\n\n<p>Both of the above examples produce the same output:</p>\n\n<pre><code>&lt;img src=\"/path/to/img.jpg\" alt=\"alt text\" title=\"Title\" /&gt;\n</code></pre>\n\n<h3>Code</h3>\n\n<p>In a regular paragraph, you can create code span by wrapping text in\nbacktick quotes. Any ampersands (<code>&amp;</code>) and angle brackets (<code>&lt;</code> or\n<code>&gt;</code>) will automatically be translated into HTML entities. This makes\nit easy to use Markdown to write about HTML example code:</p>\n\n<pre><code>I strongly recommend against using any `&lt;blink&gt;` tags.\n\nI wish SmartyPants used named entities like `&amp;mdash;`\ninstead of decimal-encoded entites like `&amp;#8212;`.\n</code></pre>\n\n<p>Output:</p>\n\n<pre><code>&lt;p&gt;I strongly recommend against using any\n&lt;code&gt;&amp;lt;blink&amp;gt;&lt;/code&gt; tags.&lt;/p&gt;\n\n&lt;p&gt;I wish SmartyPants used named entities like\n&lt;code&gt;&amp;amp;mdash;&lt;/code&gt; instead of decimal-encoded\nentites like &lt;code&gt;&amp;amp;#8212;&lt;/code&gt;.&lt;/p&gt;\n</code></pre>\n\n<p>To specify an entire block of pre-formatted code, indent every line of\nthe block by 4 spaces or 1 tab. Just like with code spans, <code>&amp;</code>, <code>&lt;</code>,\nand <code>&gt;</code> characters will be escaped automatically.</p>\n\n<p>Markdown:</p>\n\n<pre><code>If you want your page to validate under XHTML 1.0 Strict,\nyou've got to put paragraph tags in your blockquotes:\n\n    &lt;blockquote&gt;\n        &lt;p&gt;For example.&lt;/p&gt;\n    &lt;/blockquote&gt;\n</code></pre>\n\n<p>Output:</p>\n\n<pre><code>&lt;p&gt;If you want your page to validate under XHTML 1.0 Strict,\nyou've got to put paragraph tags in your blockquotes:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;&amp;lt;blockquote&amp;gt;\n    &amp;lt;p&amp;gt;For example.&amp;lt;/p&amp;gt;\n&amp;lt;/blockquote&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n</code></pre>"),
%%     ?_assert(conv("Markdown: Syntax\n================\n\n<ul id=\"ProjectSubmenu\">\n    <li><a href=\"/projects/markdown/\" title=\"Markdown Project Page\">Main</a></li>\n    <li><a href=\"/projects/markdown/basics\" title=\"Markdown Basics\">Basics</a></li>\n    <li><a class=\"selected\" title=\"Markdown Syntax Documentation\">Syntax</a></li>\n    <li><a href=\"/projects/markdown/license\" title=\"Pricing and License Information\">License</a></li>\n    <li><a href=\"/projects/markdown/dingus\" title=\"Online Markdown Web Form\">Dingus</a></li>\n</ul>\n\n\n*   [Overview](#overview)\n    *   [Philosophy](#philosophy)\n    *   [Inline HTML](#html)\n    *   [Automatic Escaping for Special Characters](#autoescape)\n*   [Block Elements](#block)\n    *   [Paragraphs and Line Breaks](#p)\n    *   [Headers](#header)\n    *   [Blockquotes](#blockquote)\n    *   [Lists](#list)\n    *   [Code Blocks](#precode)\n    *   [Horizontal Rules](#hr)\n*   [Span Elements](#span)\n    *   [Links](#link)\n    *   [Emphasis](#em)\n    *   [Code](#code)\n    *   [Images](#img)\n*   [Miscellaneous](#misc)\n    *   [Backslash Escapes](#backslash)\n    *   [Automatic Links](#autolink)\n\n\n**Note:** This document is itself written using Markdown; you\ncan [see the source for it by adding '.text' to the URL][src].\n\n  [src]: /projects/markdown/syntax.text\n\n* * *\n\n<h2 id=\"overview\">Overview</h2>\n\n<h3 id=\"philosophy\">Philosophy</h3>\n\nMarkdown is intended to be as easy-to-read and easy-to-write as is feasible.\n\nReadability, however, is emphasized above all else. A Markdown-formatted\ndocument should be publishable as-is, as plain text, without looking\nlike it's been marked up with tags or formatting instructions. While\nMarkdown's syntax has been influenced by several existing text-to-HTML\nfilters -- including [Setext] [1], [atx] [2], [Textile] [3], [reStructuredText] [4],\n[Grutatext] [5], and [EtText] [6] -- the single biggest source of\ninspiration for Markdown's syntax is the format of plain text email.\n\n  [1]: http://docutils.sourceforge.net/mirror/setext.html\n  [2]: http://www.aaronsw.com/2002/atx/\n  [3]: http://textism.com/tools/textile/\n  [4]: http://docutils.sourceforge.net/rst.html\n  [5]: http://www.triptico.com/software/grutatxt.html\n  [6]: http://ettext.taint.org/doc/\n\nTo this end, Markdown's syntax is comprised entirely of punctuation\ncharacters, which punctuation characters have been carefully chosen so\nas to look like what they mean. E.g., asterisks around a word actually\nlook like \\*emphasis\\*. Markdown lists look like, well, lists. Even\nblockquotes look like quoted passages of text, assuming you've ever\nused email.\n\n\n\n<h3 id=\"html\">Inline HTML</h3>\n\nMarkdown's syntax is intended for one purpose: to be used as a\nformat for *writing* for the web.\n\nMarkdown is not a replacement for HTML, or even close to it. Its\nsyntax is very small, corresponding only to a very small subset of\nHTML tags. The idea is *not* to create a syntax that makes it easier\nto insert HTML tags. In my opinion, HTML tags are already easy to\ninsert. The idea for Markdown is to make it easy to read, write, and\nedit prose. HTML is a *publishing* format; Markdown is a *writing*\nformat. Thus, Markdown's formatting syntax only addresses issues that\ncan be conveyed in plain text.\n\nFor any markup that is not covered by Markdown's syntax, you simply\nuse HTML itself. There's no need to preface it or delimit it to\nindicate that you're switching from Markdown to HTML; you just use\nthe tags.\n\nThe only restrictions are that block-level HTML elements -- e.g. `<div>`,\n`<table>`, `<pre>`, `<p>`, etc. -- must be separated from surrounding\ncontent by blank lines, and the start and end tags of the block should\nnot be indented with tabs or spaces. Markdown is smart enough not\nto add extra (unwanted) `<p>` tags around HTML block-level tags.\n\nFor example, to add an HTML table to a Markdown article:\n\n    This is a regular paragraph.\n\n    <table>\n        <tr>\n            <td>Foo</td>\n        </tr>\n    </table>\n\n    This is another regular paragraph.\n\nNote that Markdown formatting syntax is not processed within block-level\nHTML tags. E.g., you can't use Markdown-style `*emphasis*` inside an\nHTML block.\n\nSpan-level HTML tags -- e.g. `<span>`, `<cite>`, or `<del>` -- can be\nused anywhere in a Markdown paragraph, list item, or header. If you\nwant, you can even use HTML tags instead of Markdown formatting; e.g. if\nyou'd prefer to use HTML `<a>` or `<img>` tags instead of Markdown's\nlink or image syntax, go right ahead.\n\nUnlike block-level HTML tags, Markdown syntax *is* processed within\nspan-level tags.\n\n\n<h3 id=\"autoescape\">Automatic Escaping for Special Characters</h3>\n\nIn HTML, there are two characters that demand special treatment: `<`\nand `&`. Left angle brackets are used to start tags; ampersands are\nused to denote HTML entities. If you want to use them as literal\ncharacters, you must escape them as entities, e.g. `&lt;`, and\n`&amp;`.\n\nAmpersands in particular are bedeviling for web writers. If you want to\nwrite about 'AT&T', you need to write '`AT&amp;T`'. You even need to\nescape ampersands within URLs. Thus, if you want to link to:\n\n    http://images.google.com/images?num=30&q=larry+bird\n\nyou need to encode the URL as:\n\n    http://images.google.com/images?num=30&amp;q=larry+bird\n\nin your anchor tag `href` attribute. Needless to say, this is easy to\nforget, and is probably the single most common source of HTML validation\nerrors in otherwise well-marked-up web sites.\n\nMarkdown allows you to use these characters naturally, taking care of\nall the necessary escaping for you. If you use an ampersand as part of\nan HTML entity, it remains unchanged; otherwise it will be translated\ninto `&amp;`.\n\nSo, if you want to include a copyright symbol in your article, you can write:\n\n    &copy;\n\nand Markdown will leave it alone. But if you write:\n\n    AT&T\n\nMarkdown will translate it to:\n\n    AT&amp;T\n\nSimilarly, because Markdown supports [inline HTML](#html), if you use\nangle brackets as delimiters for HTML tags, Markdown will treat them as\nsuch. But if you write:\n\n    4 < 5\n\nMarkdown will translate it to:\n\n    4 &lt; 5\n\nHowever, inside Markdown code spans and blocks, angle brackets and\nampersands are *always* encoded automatically. This makes it easy to use\nMarkdown to write about HTML code. (As opposed to raw HTML, which is a\nterrible format for writing about HTML syntax, because every single `<`\nand `&` in your example code needs to be escaped.)\n\n\n* * *\n\n\n<h2 id=\"block\">Block Elements</h2>\n\n\n<h3 id=\"p\">Paragraphs and Line Breaks</h3>\n\nA paragraph is simply one or more consecutive lines of text, separated\nby one or more blank lines. (A blank line is any line that looks like a\nblank line -- a line containing nothing but spaces or tabs is considered\nblank.) Normal paragraphs should not be intended with spaces or tabs.\n\nThe implication of the \"one or more consecutive lines of text\" rule is\nthat Markdown supports \"hard-wrapped\" text paragraphs. This differs\nsignificantly from most other text-to-HTML formatters (including Movable\nType's \"Convert Line Breaks\" option) which translate every line break\ncharacter in a paragraph into a `<br />` tag.\n\nWhen you *do* want to insert a `<br />` break tag using Markdown, you\nend a line with two or more spaces, then type return.\n\nYes, this takes a tad more effort to create a `<br />`, but a simplistic\n\"every line break is a `<br />`\" rule wouldn't work for Markdown.\nMarkdown's email-style [blockquoting][bq] and multi-paragraph [list items][l]\nwork best -- and look better -- when you format them with hard breaks.\n\n  [bq]: #blockquote\n  [l]:  #list\n\n\n\n<h3 id=\"header\">Headers</h3>\n\nMarkdown supports two styles of headers, [Setext] [1] and [atx] [2].\n\nSetext-style headers are \"underlined\" using equal signs (for first-level\nheaders) and dashes (for second-level headers). For example:\n\n    This is an H1\n    =============\n\n    This is an H2\n    -------------\n\nAny number of underlining `=`'s or `-`'s will work.\n\nAtx-style headers use 1-6 hash characters at the start of the line,\ncorresponding to header levels 1-6. For example:\n\n    # This is an H1\n\n    ## This is an H2\n\n    ###### This is an H6\n\nOptionally, you may \"close\" atx-style headers. This is purely\ncosmetic -- you can use this if you think it looks better. The\nclosing hashes don't even need to match the number of hashes\nused to open the header. (The number of opening hashes\ndetermines the header level.) :\n\n    # This is an H1 #\n\n    ## This is an H2 ##\n\n    ### This is an H3 ######\n\n\n<h3 id=\"blockquote\">Blockquotes</h3>\n\nMarkdown uses email-style `>` characters for blockquoting. If you're\nfamiliar with quoting passages of text in an email message, then you\nknow how to create a blockquote in Markdown. It looks best if you hard\nwrap the text and put a `>` before every line:\n\n    > This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,\n    > consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.\n    > Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.\n    > \n    > Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse\n    > id sem consectetuer libero luctus adipiscing.\n\nMarkdown allows you to be lazy and only put the `>` before the first\nline of a hard-wrapped paragraph:\n\n    > This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,\n    consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.\n    Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.\n\n    > Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse\n    id sem consectetuer libero luctus adipiscing.\n\nBlockquotes can be nested (i.e. a blockquote-in-a-blockquote) by\nadding additional levels of `>`:\n\n    > This is the first level of quoting.\n    >\n    > > This is nested blockquote.\n    >\n    > Back to the first level.\n\nBlockquotes can contain other Markdown elements, including headers, lists,\nand code blocks:\n\n\t> ## This is a header.\n\t> \n\t> 1.   This is the first list item.\n\t> 2.   This is the second list item.\n\t> \n\t> Here's some example code:\n\t> \n\t>     return shell_exec(\"echo $input | $markdown_script\");\n\nAny decent text editor should make email-style quoting easy. For\nexample, with BBEdit, you can make a selection and choose Increase\nQuote Level from the Text menu.\n\n\n<h3 id=\"list\">Lists</h3>\n\nMarkdown supports ordered (numbered) and unordered (bulleted) lists.\n\nUnordered lists use asterisks, pluses, and hyphens -- interchangably\n-- as list markers:\n\n    *   Red\n    *   Green\n    *   Blue\n\nis equivalent to:\n\n    +   Red\n    +   Green\n    +   Blue\n\nand:\n\n    -   Red\n    -   Green\n    -   Blue\n\nOrdered lists use numbers followed by periods:\n\n    1.  Bird\n    2.  McHale\n    3.  Parish\n\nIt's important to note that the actual numbers you use to mark the\nlist have no effect on the HTML output Markdown produces. The HTML\nMarkdown produces from the above list is:\n\n    <ol>\n    <li>Bird</li>\n    <li>McHale</li>\n    <li>Parish</li>\n    </ol>\n\nIf you instead wrote the list in Markdown like this:\n\n    1.  Bird\n    1.  McHale\n    1.  Parish\n\nor even:\n\n    3. Bird\n    1. McHale\n    8. Parish\n\nyou'd get the exact same HTML output. The point is, if you want to,\nyou can use ordinal numbers in your ordered Markdown lists, so that\nthe numbers in your source match the numbers in your published HTML.\nBut if you want to be lazy, you don't have to.\n\nIf you do use lazy list numbering, however, you should still start the\nlist with the number 1. At some point in the future, Markdown may support\nstarting ordered lists at an arbitrary number.\n\nList markers typically start at the left margin, but may be indented by\nup to three spaces. List markers must be followed by one or more spaces\nor a tab.\n\nTo make lists look nice, you can wrap items with hanging indents:\n\n    *   Lorem ipsum dolor sit amet, consectetuer adipiscing elit.\n        Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,\n        viverra nec, fringilla in, laoreet vitae, risus.\n    *   Donec sit amet nisl. Aliquam semper ipsum sit amet velit.\n        Suspendisse id sem consectetuer libero luctus adipiscing.\n\nBut if you want to be lazy, you don't have to:\n\n    *   Lorem ipsum dolor sit amet, consectetuer adipiscing elit.\n    Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,\n    viverra nec, fringilla in, laoreet vitae, risus.\n    *   Donec sit amet nisl. Aliquam semper ipsum sit amet velit.\n    Suspendisse id sem consectetuer libero luctus adipiscing.\n\nIf list items are separated by blank lines, Markdown will wrap the\nitems in `<p>` tags in the HTML output. For example, this input:\n\n    *   Bird\n    *   Magic\n\nwill turn into:\n\n    <ul>\n    <li>Bird</li>\n    <li>Magic</li>\n    </ul>\n\nBut this:\n\n    *   Bird\n\n    *   Magic\n\nwill turn into:\n\n    <ul>\n    <li><p>Bird</p></li>\n    <li><p>Magic</p></li>\n    </ul>\n\nList items may consist of multiple paragraphs. Each subsequent\nparagraph in a list item must be intended by either 4 spaces\nor one tab:\n\n    1.  This is a list item with two paragraphs. Lorem ipsum dolor\n        sit amet, consectetuer adipiscing elit. Aliquam hendrerit\n        mi posuere lectus.\n\n        Vestibulum enim wisi, viverra nec, fringilla in, laoreet\n        vitae, risus. Donec sit amet nisl. Aliquam semper ipsum\n        sit amet velit.\n\n    2.  Suspendisse id sem consectetuer libero luctus adipiscing.\n\nIt looks nice if you indent every line of the subsequent\nparagraphs, but here again, Markdown will allow you to be\nlazy:\n\n    *   This is a list item with two paragraphs.\n\n        This is the second paragraph in the list item. You're\n    only required to indent the first line. Lorem ipsum dolor\n    sit amet, consectetuer adipiscing elit.\n\n    *   Another item in the same list.\n\nTo put a blockquote within a list item, the blockquote's `>`\ndelimiters need to be indented:\n\n    *   A list item with a blockquote:\n\n        > This is a blockquote\n        > inside a list item.\n\nTo put a code block within a list item, the code block needs\nto be indented *twice* -- 8 spaces or two tabs:\n\n    *   A list item with a code block:\n\n            <code goes here>\n\n\nIt's worth noting that it's possible to trigger an ordered list by\naccident, by writing something like this:\n\n    1986. What a great season.\n\nIn other words, a *number-period-space* sequence at the beginning of a\nline. To avoid this, you can backslash-escape the period:\n\n    1986\\. What a great season.\n\n\n\n<h3 id=\"precode\">Code Blocks</h3>\n\nPre-formatted code blocks are used for writing about programming or\nmarkup source code. Rather than forming normal paragraphs, the lines\nof a code block are interpreted literally. Markdown wraps a code block\nin both `<pre>` and `<code>` tags.\n\nTo produce a code block in Markdown, simply indent every line of the\nblock by at least 4 spaces or 1 tab. For example, given this input:\n\n    This is a normal paragraph:\n\n        This is a code block.\n\nMarkdown will generate:\n\n    <p>This is a normal paragraph:</p>\n\n    <pre><code>This is a code block.\n    </code></pre>\n\nOne level of indentation -- 4 spaces or 1 tab -- is removed from each\nline of the code block. For example, this:\n\n    Here is an example of AppleScript:\n\n        tell application \"Foo\"\n            beep\n        end tell\n\nwill turn into:\n\n    <p>Here is an example of AppleScript:</p>\n\n    <pre><code>tell application \"Foo\"\n        beep\n    end tell\n    </code></pre>\n\nA code block continues until it reaches a line that is not indented\n(or the end of the article).\n\nWithin a code block, ampersands (`&`) and angle brackets (`<` and `>`)\nare automatically converted into HTML entities. This makes it very\neasy to include example HTML source code using Markdown -- just paste\nit and indent it, and Markdown will handle the hassle of encoding the\nampersands and angle brackets. For example, this:\n\n        <div class=\"footer\">\n            &copy; 2004 Foo Corporation\n        </div>\n\nwill turn into:\n\n    <pre><code>&lt;div class=\"footer\"&gt;\n        &amp;copy; 2004 Foo Corporation\n    &lt;/div&gt;\n    </code></pre>\n\nRegular Markdown syntax is not processed within code blocks. E.g.,\nasterisks are just literal asterisks within a code block. This means\nit's also easy to use Markdown to write about Markdown's own syntax.\n\n\n\n<h3 id=\"hr\">Horizontal Rules</h3>\n\nYou can produce a horizontal rule tag (`<hr />`) by placing three or\nmore hyphens, asterisks, or underscores on a line by themselves. If you\nwish, you may use spaces between the hyphens or asterisks. Each of the\nfollowing lines will produce a horizontal rule:\n\n    * * *\n\n    ***\n\n    *****\n\t\n    - - -\n\n    ---------------------------------------\n\n\t_ _ _\n\n\n* * *\n\n<h2 id=\"span\">Span Elements</h2>\n\n<h3 id=\"link\">Links</h3>\n\nMarkdown supports two style of links: *inline* and *reference*.\n\nIn both styles, the link text is delimited by [square brackets].\n\nTo create an inline link, use a set of regular parentheses immediately\nafter the link text's closing square bracket. Inside the parentheses,\nput the URL where you want the link to point, along with an *optional*\ntitle for the link, surrounded in quotes. For example:\n\n    This is [an example](http://example.com/ \"Title\") inline link.\n\n    [This link](http://example.net/) has no title attribute.\n\nWill produce:\n\n    <p>This is <a href=\"http://example.com/\" title=\"Title\">\n    an example</a> inline link.</p>\n\n    <p><a href=\"http://example.net/\">This link</a> has no\n    title attribute.</p>\n\nIf you're referring to a local resource on the same server, you can\nuse relative paths:\n\n    See my [About](/about/) page for details.\n\nReference-style links use a second set of square brackets, inside\nwhich you place a label of your choosing to identify the link:\n\n    This is [an example][id] reference-style link.\n\nYou can optionally use a space to separate the sets of brackets:\n\n    This is [an example] [id] reference-style link.\n\nThen, anywhere in the document, you define your link label like this,\non a line by itself:\n\n    [id]: http://example.com/  \"Optional Title Here\"\n\nThat is:\n\n*   Square brackets containing the link identifier (optionally\n    indented from the left margin using up to three spaces);\n*   followed by a colon;\n*   followed by one or more spaces (or tabs);\n*   followed by the URL for the link;\n*   optionally followed by a title attribute for the link, enclosed\n    in double or single quotes.\n\nThe link URL may, optionally, be surrounded by angle brackets:\n\n    [id]: <http://example.com/>  \"Optional Title Here\"\n\nYou can put the title attribute on the next line and use extra spaces\nor tabs for padding, which tends to look better with longer URLs:\n\n    [id]: http://example.com/longish/path/to/resource/here\n        \"Optional Title Here\"\n\nLink definitions are only used for creating links during Markdown\nprocessing, and are stripped from your document in the HTML output.\n\nLink definition names may constist of letters, numbers, spaces, and punctuation -- but they are *not* case sensitive. E.g. these two links:\n\n\t[link text][a]\n\t[link text][A]\n\nare equivalent.\n\nThe *implicit link name* shortcut allows you to omit the name of the\nlink, in which case the link text itself is used as the name.\nJust use an empty set of square brackets -- e.g., to link the word\n\"Google\" to the google.com web site, you could simply write:\n\n\t[Google][]\n\nAnd then define the link:\n\n\t[Google]: http://google.com/\n\nBecause link names may contain spaces, this shortcut even works for\nmultiple words in the link text:\n\n\tVisit [Daring Fireball][] for more information.\n\nAnd then define the link:\n\t\n\t[Daring Fireball]: http://daringfireball.net/\n\nLink definitions can be placed anywhere in your Markdown document. I\ntend to put them immediately after each paragraph in which they're\nused, but if you want, you can put them all at the end of your\ndocument, sort of like footnotes.\n\nHere's an example of reference links in action:\n\n    I get 10 times more traffic from [Google] [1] than from\n    [Yahoo] [2] or [MSN] [3].\n\n      [1]: http://google.com/        \"Google\"\n      [2]: http://search.yahoo.com/  \"Yahoo Search\"\n      [3]: http://search.msn.com/    \"MSN Search\"\n\nUsing the implicit link name shortcut, you could instead write:\n\n    I get 10 times more traffic from [Google][] than from\n    [Yahoo][] or [MSN][].\n\n      [google]: http://google.com/        \"Google\"\n      [yahoo]:  http://search.yahoo.com/  \"Yahoo Search\"\n      [msn]:    http://search.msn.com/    \"MSN Search\"\n\nBoth of the above examples will produce the following HTML output:\n\n    <p>I get 10 times more traffic from <a href=\"http://google.com/\"\n    title=\"Google\">Google</a> than from\n    <a href=\"http://search.yahoo.com/\" title=\"Yahoo Search\">Yahoo</a>\n    or <a href=\"http://search.msn.com/\" title=\"MSN Search\">MSN</a>.</p>\n\nFor comparison, here is the same paragraph written using\nMarkdown's inline link style:\n\n    I get 10 times more traffic from [Google](http://google.com/ \"Google\")\n    than from [Yahoo](http://search.yahoo.com/ \"Yahoo Search\") or\n    [MSN](http://search.msn.com/ \"MSN Search\").\n\nThe point of reference-style links is not that they're easier to\nwrite. The point is that with reference-style links, your document\nsource is vastly more readable. Compare the above examples: using\nreference-style links, the paragraph itself is only 81 characters\nlong; with inline-style links, it's 176 characters; and as raw HTML,\nit's 234 characters. In the raw HTML, there's more markup than there\nis text.\n\nWith Markdown's reference-style links, a source document much more\nclosely resembles the final output, as rendered in a browser. By\nallowing you to move the markup-related metadata out of the paragraph,\nyou can add links without interrupting the narrative flow of your\nprose.\n\n\n<h3 id=\"em\">Emphasis</h3>\n\nMarkdown treats asterisks (`*`) and underscores (`_`) as indicators of\nemphasis. Text wrapped with one `*` or `_` will be wrapped with an\nHTML `<em>` tag; double `*`'s or `_`'s will be wrapped with an HTML\n`<strong>` tag. E.g., this input:\n\n    *single asterisks*\n\n    _single underscores_\n\n    **double asterisks**\n\n    __double underscores__\n\nwill produce:\n\n    <em>single asterisks</em>\n\n    <em>single underscores</em>\n\n    <strong>double asterisks</strong>\n\n    <strong>double underscores</strong>\n\nYou can use whichever style you prefer; the lone restriction is that\nthe same character must be used to open and close an emphasis span.\n\nEmphasis can be used in the middle of a word:\n\n    un*fucking*believable\n\nBut if you surround an `*` or `_` with spaces, it'll be treated as a\nliteral asterisk or underscore.\n\nTo produce a literal asterisk or underscore at a position where it\nwould otherwise be used as an emphasis delimiter, you can backslash\nescape it:\n\n    \\*this text is surrounded by literal asterisks\\*\n\n\n\n<h3 id=\"code\">Code</h3>\n\nTo indicate a span of code, wrap it with backtick quotes (`` ` ``).\nUnlike a pre-formatted code block, a code span indicates code within a\nnormal paragraph. For example:\n\n    Use the `printf()` function.\n\nwill produce:\n\n    <p>Use the <code>printf()</code> function.</p>\n\nTo include a literal backtick character within a code span, you can use\nmultiple backticks as the opening and closing delimiters:\n\n    ``There is a literal backtick (`) here.``\n\nwhich will produce this:\n\n    <p><code>There is a literal backtick (`) here.</code></p>\n\nThe backtick delimiters surrounding a code span may include spaces --\none after the opening, one before the closing. This allows you to place\nliteral backtick characters at the beginning or end of a code span:\n\n\tA single backtick in a code span: `` ` ``\n\t\n\tA backtick-delimited string in a code span: `` `foo` ``\n\nwill produce:\n\n\t<p>A single backtick in a code span: <code>`</code></p>\n\t\n\t<p>A backtick-delimited string in a code span: <code>`foo`</code></p>\n\nWith a code span, ampersands and angle brackets are encoded as HTML\nentities automatically, which makes it easy to include example HTML\ntags. Markdown will turn this:\n\n    Please don't use any `<blink>` tags.\n\ninto:\n\n    <p>Please don't use any <code>&lt;blink&gt;</code> tags.</p>\n\nYou can write this:\n\n    `&#8212;` is the decimal-encoded equivalent of `&mdash;`.\n\nto produce:\n\n    <p><code>&amp;#8212;</code> is the decimal-encoded\n    equivalent of <code>&amp;mdash;</code>.</p>\n\n\n\n<h3 id=\"img\">Images</h3>\n\nAdmittedly, it's fairly difficult to devise a \"natural\" syntax for\nplacing images into a plain text document format.\n\nMarkdown uses an image syntax that is intended to resemble the syntax\nfor links, allowing for two styles: *inline* and *reference*.\n\nInline image syntax looks like this:\n\n    ![Alt text](/path/to/img.jpg)\n\n    ![Alt text](/path/to/img.jpg \"Optional title\")\n\nThat is:\n\n*   An exclamation mark: `!`;\n*   followed by a set of square brackets, containing the `alt`\n    attribute text for the image;\n*   followed by a set of parentheses, containing the URL or path to\n    the image, and an optional `title` attribute enclosed in double\n    or single quotes.\n\nReference-style image syntax looks like this:\n\n    ![Alt text][id]\n\nWhere \"id\" is the name of a defined image reference. Image references\nare defined using syntax identical to link references:\n\n    [id]: url/to/image  \"Optional title attribute\"\n\nAs of this writing, Markdown has no syntax for specifying the\ndimensions of an image; if this is important to you, you can simply\nuse regular HTML `<img>` tags.\n\n\n* * *\n\n\n<h2 id=\"misc\">Miscellaneous</h2>\n\n<h3 id=\"autolink\">Automatic Links</h3>\n\nMarkdown supports a shortcut style for creating \"automatic\" links for URLs and email addresses: simply surround the URL or email address with angle brackets. What this means is that if you want to show the actual text of a URL or email address, and also have it be a clickable link, you can do this:\n\n    <http://example.com/>\n    \nMarkdown will turn this into:\n\n    <a href=\"http://example.com/\">http://example.com/</a>\n\nAutomatic links for email addresses work similarly, except that\nMarkdown will also perform a bit of randomized decimal and hex\nentity-encoding to help obscure your address from address-harvesting\nspambots. For example, Markdown will turn this:\n\n    <address@example.com>\n\ninto something like this:\n\n    <a href=\"&#x6D;&#x61;i&#x6C;&#x74;&#x6F;:&#x61;&#x64;&#x64;&#x72;&#x65;\n    &#115;&#115;&#64;&#101;&#120;&#x61;&#109;&#x70;&#x6C;e&#x2E;&#99;&#111;\n    &#109;\">&#x61;&#x64;&#x64;&#x72;&#x65;&#115;&#115;&#64;&#101;&#120;&#x61;\n    &#109;&#x70;&#x6C;e&#x2E;&#99;&#111;&#109;</a>\n\nwhich will render in a browser as a clickable link to \"address@example.com\".\n\n(This sort of entity-encoding trick will indeed fool many, if not\nmost, address-harvesting bots, but it definitely won't fool all of\nthem. It's better than nothing, but an address published in this way\nwill probably eventually start receiving spam.)\n\n\n\n<h3 id=\"backslash\">Backslash Escapes</h3>\n\nMarkdown allows you to use backslash escapes to generate literal\ncharacters which would otherwise have special meaning in Markdown's\nformatting syntax. For example, if you wanted to surround a word with\nliteral asterisks (instead of an HTML `<em>` tag), you can backslashes\nbefore the asterisks, like this:\n\n    \\*literal asterisks\\*\n\nMarkdown provides backslash escapes for the following characters:\n\n    \\   backslash\n    `   backtick\n    *   asterisk\n    _   underscore\n    {}  curly braces\n    []  square brackets\n    ()  parentheses\n    #   hash mark\n\t+\tplus sign\n\t-\tminus sign (hyphen)\n    .   dot\n    !   exclamation mark\n\n") == "<h1>Markdown: Syntax</h1>\n\n<ul id=\"ProjectSubmenu\">\n    <li><a href=\"/projects/markdown/\" title=\"Markdown Project Page\">Main</a></li>\n    <li><a href=\"/projects/markdown/basics\" title=\"Markdown Basics\">Basics</a></li>\n    <li><a class=\"selected\" title=\"Markdown Syntax Documentation\">Syntax</a></li>\n    <li><a href=\"/projects/markdown/license\" title=\"Pricing and License Information\">License</a></li>\n    <li><a href=\"/projects/markdown/dingus\" title=\"Online Markdown Web Form\">Dingus</a></li>\n</ul>\n\n<ul>\n<li><a href=\"#overview\">Overview</a>\n<ul><li><a href=\"#philosophy\">Philosophy</a></li>\n<li><a href=\"#html\">Inline HTML</a></li>\n<li><a href=\"#autoescape\">Automatic Escaping for Special Characters</a></li></ul></li>\n<li><a href=\"#block\">Block Elements</a>\n<ul><li><a href=\"#p\">Paragraphs and Line Breaks</a></li>\n<li><a href=\"#header\">Headers</a></li>\n<li><a href=\"#blockquote\">Blockquotes</a></li>\n<li><a href=\"#list\">Lists</a></li>\n<li><a href=\"#precode\">Code Blocks</a></li>\n<li><a href=\"#hr\">Horizontal Rules</a></li></ul></li>\n<li><a href=\"#span\">Span Elements</a>\n<ul><li><a href=\"#link\">Links</a></li>\n<li><a href=\"#em\">Emphasis</a></li>\n<li><a href=\"#code\">Code</a></li>\n<li><a href=\"#img\">Images</a></li></ul></li>\n<li><a href=\"#misc\">Miscellaneous</a>\n<ul><li><a href=\"#backslash\">Backslash Escapes</a></li>\n<li><a href=\"#autolink\">Automatic Links</a></li></ul></li>\n</ul>\n\n<p><strong>Note:</strong> This document is itself written using Markdown; you\ncan <a href=\"/projects/markdown/syntax.text\">see the source for it by adding '.text' to the URL</a>.</p>\n\n<hr />\n\n<h2 id=\"overview\">Overview</h2>\n\n<h3 id=\"philosophy\">Philosophy</h3>\n\n<p>Markdown is intended to be as easy-to-read and easy-to-write as is feasible.</p>\n\n<p>Readability, however, is emphasized above all else. A Markdown-formatted\ndocument should be publishable as-is, as plain text, without looking\nlike it's been marked up with tags or formatting instructions. While\nMarkdown's syntax has been influenced by several existing text-to-HTML\nfilters -- including <a href=\"http://docutils.sourceforge.net/mirror/setext.html\">Setext</a>, <a href=\"http://www.aaronsw.com/2002/atx/\">atx</a>, <a href=\"http://textism.com/tools/textile/\">Textile</a>, <a href=\"http://docutils.sourceforge.net/rst.html\">reStructuredText</a>,\n<a href=\"http://www.triptico.com/software/grutatxt.html\">Grutatext</a>, and <a href=\"http://ettext.taint.org/doc/\">EtText</a> -- the single biggest source of\ninspiration for Markdown's syntax is the format of plain text email.</p>\n\n<p>To this end, Markdown's syntax is comprised entirely of punctuation\ncharacters, which punctuation characters have been carefully chosen so\nas to look like what they mean. E.g., asterisks around a word actually\nlook like *emphasis*. Markdown lists look like, well, lists. Even\nblockquotes look like quoted passages of text, assuming you've ever\nused email.</p>\n\n<h3 id=\"html\">Inline HTML</h3>\n\n<p>Markdown's syntax is intended for one purpose: to be used as a\nformat for <em>writing</em> for the web.</p>\n\n<p>Markdown is not a replacement for HTML, or even close to it. Its\nsyntax is very small, corresponding only to a very small subset of\nHTML tags. The idea is <em>not</em> to create a syntax that makes it easier\nto insert HTML tags. In my opinion, HTML tags are already easy to\ninsert. The idea for Markdown is to make it easy to read, write, and\nedit prose. HTML is a <em>publishing</em> format; Markdown is a <em>writing</em>\nformat. Thus, Markdown's formatting syntax only addresses issues that\ncan be conveyed in plain text.</p>\n\n<p>For any markup that is not covered by Markdown's syntax, you simply\nuse HTML itself. There's no need to preface it or delimit it to\nindicate that you're switching from Markdown to HTML; you just use\nthe tags.</p>\n\n<p>The only restrictions are that block-level HTML elements -- e.g. <code>&lt;div&gt;</code>,\n<code>&lt;table&gt;</code>, <code>&lt;pre&gt;</code>, <code>&lt;p&gt;</code>, etc. -- must be separated from surrounding\ncontent by blank lines, and the start and end tags of the block should\nnot be indented with tabs or spaces. Markdown is smart enough not\nto add extra (unwanted) <code>&lt;p&gt;</code> tags around HTML block-level tags.</p>\n\n<p>For example, to add an HTML table to a Markdown article:</p>\n\n<pre><code>This is a regular paragraph.\n\n&lt;table&gt;\n    &lt;tr&gt;\n        &lt;td&gt;Foo&lt;/td&gt;\n    &lt;/tr&gt;\n&lt;/table&gt;\n\nThis is another regular paragraph.\n</code></pre>\n\n<p>Note that Markdown formatting syntax is not processed within block-level\nHTML tags. E.g., you can't use Markdown-style <code>*emphasis*</code> inside an\nHTML block.</p>\n\n<p>Span-level HTML tags -- e.g. <code>&lt;span&gt;</code>, <code>&lt;cite&gt;</code>, or <code>&lt;del&gt;</code> -- can be\nused anywhere in a Markdown paragraph, list item, or header. If you\nwant, you can even use HTML tags instead of Markdown formatting; e.g. if\nyou'd prefer to use HTML <code>&lt;a&gt;</code> or <code>&lt;img&gt;</code> tags instead of Markdown's\nlink or image syntax, go right ahead.</p>\n\n<p>Unlike block-level HTML tags, Markdown syntax <em>is</em> processed within\nspan-level tags.</p>\n\n<h3 id=\"autoescape\">Automatic Escaping for Special Characters</h3>\n\n<p>In HTML, there are two characters that demand special treatment: <code>&lt;</code>\nand <code>&amp;</code>. Left angle brackets are used to start tags; ampersands are\nused to denote HTML entities. If you want to use them as literal\ncharacters, you must escape them as entities, e.g. <code>&amp;lt;</code>, and\n<code>&amp;amp;</code>.</p>\n\n<p>Ampersands in particular are bedeviling for web writers. If you want to\nwrite about 'AT&amp;T', you need to write '<code>AT&amp;amp;T</code>'. You even need to\nescape ampersands within URLs. Thus, if you want to link to:</p>\n\n<pre><code>http://images.google.com/images?num=30&amp;q=larry+bird\n</code></pre>\n\n<p>you need to encode the URL as:</p>\n\n<pre><code>http://images.google.com/images?num=30&amp;amp;q=larry+bird\n</code></pre>\n\n<p>in your anchor tag <code>href</code> attribute. Needless to say, this is easy to\nforget, and is probably the single most common source of HTML validation\nerrors in otherwise well-marked-up web sites.</p>\n\n<p>Markdown allows you to use these characters naturally, taking care of\nall the necessary escaping for you. If you use an ampersand as part of\nan HTML entity, it remains unchanged; otherwise it will be translated\ninto <code>&amp;amp;</code>.</p>\n\n<p>So, if you want to include a copyright symbol in your article, you can write:</p>\n\n<pre><code>&amp;copy;\n</code></pre>\n\n<p>and Markdown will leave it alone. But if you write:</p>\n\n<pre><code>AT&amp;T\n</code></pre>\n\n<p>Markdown will translate it to:</p>\n\n<pre><code>AT&amp;amp;T\n</code></pre>\n\n<p>Similarly, because Markdown supports <a href=\"#html\">inline HTML</a>, if you use\nangle brackets as delimiters for HTML tags, Markdown will treat them as\nsuch. But if you write:</p>\n\n<pre><code>4 &lt; 5\n</code></pre>\n\n<p>Markdown will translate it to:</p>\n\n<pre><code>4 &amp;lt; 5\n</code></pre>\n\n<p>However, inside Markdown code spans and blocks, angle brackets and\nampersands are <em>always</em> encoded automatically. This makes it easy to use\nMarkdown to write about HTML code. (As opposed to raw HTML, which is a\nterrible format for writing about HTML syntax, because every single <code>&lt;</code>\nand <code>&amp;</code> in your example code needs to be escaped.)</p>\n\n<hr />\n\n<h2 id=\"block\">Block Elements</h2>\n\n<h3 id=\"p\">Paragraphs and Line Breaks</h3>\n\n<p>A paragraph is simply one or more consecutive lines of text, separated\nby one or more blank lines. (A blank line is any line that looks like a\nblank line -- a line containing nothing but spaces or tabs is considered\nblank.) Normal paragraphs should not be intended with spaces or tabs.</p>\n\n<p>The implication of the \"one or more consecutive lines of text\" rule is\nthat Markdown supports \"hard-wrapped\" text paragraphs. This differs\nsignificantly from most other text-to-HTML formatters (including Movable\nType's \"Convert Line Breaks\" option) which translate every line break\ncharacter in a paragraph into a <code>&lt;br /&gt;</code> tag.</p>\n\n<p>When you <em>do</em> want to insert a <code>&lt;br /&gt;</code> break tag using Markdown, you\nend a line with two or more spaces, then type return.</p>\n\n<p>Yes, this takes a tad more effort to create a <code>&lt;br /&gt;</code>, but a simplistic\n\"every line break is a <code>&lt;br /&gt;</code>\" rule wouldn't work for Markdown.\nMarkdown's email-style <a href=\"#blockquote\">blockquoting</a> and multi-paragraph <a href=\"#list\">list items</a>\nwork best -- and look better -- when you format them with hard breaks.</p>\n\n<h3 id=\"header\">Headers</h3>\n\n<p>Markdown supports two styles of headers, <a href=\"http://docutils.sourceforge.net/mirror/setext.html\">Setext</a> and <a href=\"http://www.aaronsw.com/2002/atx/\">atx</a>.</p>\n\n<p>Setext-style headers are \"underlined\" using equal signs (for first-level\nheaders) and dashes (for second-level headers). For example:</p>\n\n<pre><code>This is an H1\n=============\n\nThis is an H2\n-------------\n</code></pre>\n\n<p>Any number of underlining <code>=</code>'s or <code>-</code>'s will work.</p>\n\n<p>Atx-style headers use 1-6 hash characters at the start of the line,\ncorresponding to header levels 1-6. For example:</p>\n\n<pre><code># This is an H1\n\n## This is an H2\n\n###### This is an H6\n</code></pre>\n\n<p>Optionally, you may \"close\" atx-style headers. This is purely\ncosmetic -- you can use this if you think it looks better. The\nclosing hashes don't even need to match the number of hashes\nused to open the header. (The number of opening hashes\ndetermines the header level.) :</p>\n\n<pre><code># This is an H1 #\n\n## This is an H2 ##\n\n### This is an H3 ######\n</code></pre>\n\n<h3 id=\"blockquote\">Blockquotes</h3>\n\n<p>Markdown uses email-style <code>&gt;</code> characters for blockquoting. If you're\nfamiliar with quoting passages of text in an email message, then you\nknow how to create a blockquote in Markdown. It looks best if you hard\nwrap the text and put a <code>&gt;</code> before every line:</p>\n\n<pre><code>&gt; This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,\n&gt; consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.\n&gt; Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.\n&gt; \n&gt; Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse\n&gt; id sem consectetuer libero luctus adipiscing.\n</code></pre>\n\n<p>Markdown allows you to be lazy and only put the <code>&gt;</code> before the first\nline of a hard-wrapped paragraph:</p>\n\n<pre><code>&gt; This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,\nconsectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.\nVestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.\n\n&gt; Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse\nid sem consectetuer libero luctus adipiscing.\n</code></pre>\n\n<p>Blockquotes can be nested (i.e. a blockquote-in-a-blockquote) by\nadding additional levels of <code>&gt;</code>:</p>\n\n<pre><code>&gt; This is the first level of quoting.\n&gt;\n&gt; &gt; This is nested blockquote.\n&gt;\n&gt; Back to the first level.\n</code></pre>\n\n<p>Blockquotes can contain other Markdown elements, including headers, lists,\nand code blocks:</p>\n\n<pre><code>&gt; ## This is a header.\n&gt; \n&gt; 1.   This is the first list item.\n&gt; 2.   This is the second list item.\n&gt; \n&gt; Here's some example code:\n&gt; \n&gt;     return shell_exec(\"echo $input | $markdown_script\");\n</code></pre>\n\n<p>Any decent text editor should make email-style quoting easy. For\nexample, with BBEdit, you can make a selection and choose Increase\nQuote Level from the Text menu.</p>\n\n<h3 id=\"list\">Lists</h3>\n\n<p>Markdown supports ordered (numbered) and unordered (bulleted) lists.</p>\n\n<p>Unordered lists use asterisks, pluses, and hyphens -- interchangably\n-- as list markers:</p>\n\n<pre><code>*   Red\n*   Green\n*   Blue\n</code></pre>\n\n<p>is equivalent to:</p>\n\n<pre><code>+   Red\n+   Green\n+   Blue\n</code></pre>\n\n<p>and:</p>\n\n<pre><code>-   Red\n-   Green\n-   Blue\n</code></pre>\n\n<p>Ordered lists use numbers followed by periods:</p>\n\n<pre><code>1.  Bird\n2.  McHale\n3.  Parish\n</code></pre>\n\n<p>It's important to note that the actual numbers you use to mark the\nlist have no effect on the HTML output Markdown produces. The HTML\nMarkdown produces from the above list is:</p>\n\n<pre><code>&lt;ol&gt;\n&lt;li&gt;Bird&lt;/li&gt;\n&lt;li&gt;McHale&lt;/li&gt;\n&lt;li&gt;Parish&lt;/li&gt;\n&lt;/ol&gt;\n</code></pre>\n\n<p>If you instead wrote the list in Markdown like this:</p>\n\n<pre><code>1.  Bird\n1.  McHale\n1.  Parish\n</code></pre>\n\n<p>or even:</p>\n\n<pre><code>3. Bird\n1. McHale\n8. Parish\n</code></pre>\n\n<p>you'd get the exact same HTML output. The point is, if you want to,\nyou can use ordinal numbers in your ordered Markdown lists, so that\nthe numbers in your source match the numbers in your published HTML.\nBut if you want to be lazy, you don't have to.</p>\n\n<p>If you do use lazy list numbering, however, you should still start the\nlist with the number 1. At some point in the future, Markdown may support\nstarting ordered lists at an arbitrary number.</p>\n\n<p>List markers typically start at the left margin, but may be indented by\nup to three spaces. List markers must be followed by one or more spaces\nor a tab.</p>\n\n<p>To make lists look nice, you can wrap items with hanging indents:</p>\n\n<pre><code>*   Lorem ipsum dolor sit amet, consectetuer adipiscing elit.\n    Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,\n    viverra nec, fringilla in, laoreet vitae, risus.\n*   Donec sit amet nisl. Aliquam semper ipsum sit amet velit.\n    Suspendisse id sem consectetuer libero luctus adipiscing.\n</code></pre>\n\n<p>But if you want to be lazy, you don't have to:</p>\n\n<pre><code>*   Lorem ipsum dolor sit amet, consectetuer adipiscing elit.\nAliquam hendrerit mi posuere lectus. Vestibulum enim wisi,\nviverra nec, fringilla in, laoreet vitae, risus.\n*   Donec sit amet nisl. Aliquam semper ipsum sit amet velit.\nSuspendisse id sem consectetuer libero luctus adipiscing.\n</code></pre>\n\n<p>If list items are separated by blank lines, Markdown will wrap the\nitems in <code>&lt;p&gt;</code> tags in the HTML output. For example, this input:</p>\n\n<pre><code>*   Bird\n*   Magic\n</code></pre>\n\n<p>will turn into:</p>\n\n<pre><code>&lt;ul&gt;\n&lt;li&gt;Bird&lt;/li&gt;\n&lt;li&gt;Magic&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre>\n\n<p>But this:</p>\n\n<pre><code>*   Bird\n\n*   Magic\n</code></pre>\n\n<p>will turn into:</p>\n\n<pre><code>&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;Bird&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Magic&lt;/p&gt;&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre>\n\n<p>List items may consist of multiple paragraphs. Each subsequent\nparagraph in a list item must be intended by either 4 spaces\nor one tab:</p>\n\n<pre><code>1.  This is a list item with two paragraphs. Lorem ipsum dolor\n    sit amet, consectetuer adipiscing elit. Aliquam hendrerit\n    mi posuere lectus.\n\n    Vestibulum enim wisi, viverra nec, fringilla in, laoreet\n    vitae, risus. Donec sit amet nisl. Aliquam semper ipsum\n    sit amet velit.\n\n2.  Suspendisse id sem consectetuer libero luctus adipiscing.\n</code></pre>\n\n<p>It looks nice if you indent every line of the subsequent\nparagraphs, but here again, Markdown will allow you to be\nlazy:</p>\n\n<pre><code>*   This is a list item with two paragraphs.\n\n    This is the second paragraph in the list item. You're\nonly required to indent the first line. Lorem ipsum dolor\nsit amet, consectetuer adipiscing elit.\n\n*   Another item in the same list.\n</code></pre>\n\n<p>To put a blockquote within a list item, the blockquote's <code>&gt;</code>\ndelimiters need to be indented:</p>\n\n<pre><code>*   A list item with a blockquote:\n\n    &gt; This is a blockquote\n    &gt; inside a list item.\n</code></pre>\n\n<p>To put a code block within a list item, the code block needs\nto be indented <em>twice</em> -- 8 spaces or two tabs:</p>\n\n<pre><code>*   A list item with a code block:\n\n        &lt;code goes here&gt;\n</code></pre>\n\n<p>It's worth noting that it's possible to trigger an ordered list by\naccident, by writing something like this:</p>\n\n<pre><code>1986. What a great season.\n</code></pre>\n\n<p>In other words, a <em>number-period-space</em> sequence at the beginning of a\nline. To avoid this, you can backslash-escape the period:</p>\n\n<pre><code>1986\\. What a great season.\n</code></pre>\n\n<h3 id=\"precode\">Code Blocks</h3>\n\n<p>Pre-formatted code blocks are used for writing about programming or\nmarkup source code. Rather than forming normal paragraphs, the lines\nof a code block are interpreted literally. Markdown wraps a code block\nin both <code>&lt;pre&gt;</code> and <code>&lt;code&gt;</code> tags.</p>\n\n<p>To produce a code block in Markdown, simply indent every line of the\nblock by at least 4 spaces or 1 tab. For example, given this input:</p>\n\n<pre><code>This is a normal paragraph:\n\n    This is a code block.\n</code></pre>\n\n<p>Markdown will generate:</p>\n\n<pre><code>&lt;p&gt;This is a normal paragraph:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;This is a code block.\n&lt;/code&gt;&lt;/pre&gt;\n</code></pre>\n\n<p>One level of indentation -- 4 spaces or 1 tab -- is removed from each\nline of the code block. For example, this:</p>\n\n<pre><code>Here is an example of AppleScript:\n\n    tell application \"Foo\"\n        beep\n    end tell\n</code></pre>\n\n<p>will turn into:</p>\n\n<pre><code>&lt;p&gt;Here is an example of AppleScript:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;tell application \"Foo\"\n    beep\nend tell\n&lt;/code&gt;&lt;/pre&gt;\n</code></pre>\n\n<p>A code block continues until it reaches a line that is not indented\n(or the end of the article).</p>\n\n<p>Within a code block, ampersands (<code>&amp;</code>) and angle brackets (<code>&lt;</code> and <code>&gt;</code>)\nare automatically converted into HTML entities. This makes it very\neasy to include example HTML source code using Markdown -- just paste\nit and indent it, and Markdown will handle the hassle of encoding the\nampersands and angle brackets. For example, this:</p>\n\n<pre><code>    &lt;div class=\"footer\"&gt;\n        &amp;copy; 2004 Foo Corporation\n    &lt;/div&gt;\n</code></pre>\n\n<p>will turn into:</p>\n\n<pre><code>&lt;pre&gt;&lt;code&gt;&amp;lt;div class=\"footer\"&amp;gt;\n    &amp;amp;copy; 2004 Foo Corporation\n&amp;lt;/div&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n</code></pre>\n\n<p>Regular Markdown syntax is not processed within code blocks. E.g.,\nasterisks are just literal asterisks within a code block. This means\nit's also easy to use Markdown to write about Markdown's own syntax.</p>\n\n<h3 id=\"hr\">Horizontal Rules</h3>\n\n<p>You can produce a horizontal rule tag (<code>&lt;hr /&gt;</code>) by placing three or\nmore hyphens, asterisks, or underscores on a line by themselves. If you\nwish, you may use spaces between the hyphens or asterisks. Each of the\nfollowing lines will produce a horizontal rule:</p>\n\n<pre><code>* * *\n\n***\n\n*****\n\n- - -\n\n---------------------------------------\n\n_ _ _\n</code></pre>\n\n<hr />\n\n<h2 id=\"span\">Span Elements</h2>\n\n<h3 id=\"link\">Links</h3>\n\n<p>Markdown supports two style of links: <em>inline</em> and <em>reference</em>.</p>\n\n<p>In both styles, the link text is delimited by [square brackets].</p>\n\n<p>To create an inline link, use a set of regular parentheses immediately\nafter the link text's closing square bracket. Inside the parentheses,\nput the URL where you want the link to point, along with an <em>optional</em>\ntitle for the link, surrounded in quotes. For example:</p>\n\n<pre><code>This is [an example](http://example.com/ \"Title\") inline link.\n\n[This link](http://example.net/) has no title attribute.\n</code></pre>\n\n<p>Will produce:</p>\n\n<pre><code>&lt;p&gt;This is &lt;a href=\"http://example.com/\" title=\"Title\"&gt;\nan example&lt;/a&gt; inline link.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"http://example.net/\"&gt;This link&lt;/a&gt; has no\ntitle attribute.&lt;/p&gt;\n</code></pre>\n\n<p>If you're referring to a local resource on the same server, you can\nuse relative paths:</p>\n\n<pre><code>See my [About](/about/) page for details.\n</code></pre>\n\n<p>Reference-style links use a second set of square brackets, inside\nwhich you place a label of your choosing to identify the link:</p>\n\n<pre><code>This is [an example][id] reference-style link.\n</code></pre>\n\n<p>You can optionally use a space to separate the sets of brackets:</p>\n\n<pre><code>This is [an example] [id] reference-style link.\n</code></pre>\n\n<p>Then, anywhere in the document, you define your link label like this,\non a line by itself:</p>\n\n<pre><code>[id]: http://example.com/  \"Optional Title Here\"\n</code></pre>\n\n<p>That is:</p>\n\n<ul>\n<li>Square brackets containing the link identifier (optionally\nindented from the left margin using up to three spaces);</li>\n<li>followed by a colon;</li>\n<li>followed by one or more spaces (or tabs);</li>\n<li>followed by the URL for the link;</li>\n<li>optionally followed by a title attribute for the link, enclosed\nin double or single quotes.</li>\n</ul>\n\n<p>The link URL may, optionally, be surrounded by angle brackets:</p>\n\n<pre><code>[id]: &lt;http://example.com/&gt;  \"Optional Title Here\"\n</code></pre>\n\n<p>You can put the title attribute on the next line and use extra spaces\nor tabs for padding, which tends to look better with longer URLs:</p>\n\n<pre><code>[id]: http://example.com/longish/path/to/resource/here\n    \"Optional Title Here\"\n</code></pre>\n\n<p>Link definitions are only used for creating links during Markdown\nprocessing, and are stripped from your document in the HTML output.</p>\n\n<p>Link definition names may constist of letters, numbers, spaces, and punctuation -- but they are <em>not</em> case sensitive. E.g. these two links:</p>\n\n<pre><code>[link text][a]\n[link text][A]\n</code></pre>\n\n<p>are equivalent.</p>\n\n<p>The <em>implicit link name</em> shortcut allows you to omit the name of the\nlink, in which case the link text itself is used as the name.\nJust use an empty set of square brackets -- e.g., to link the word\n\"Google\" to the google.com web site, you could simply write:</p>\n\n<pre><code>[Google][]\n</code></pre>\n\n<p>And then define the link:</p>\n\n<pre><code>[Google]: http://google.com/\n</code></pre>\n\n<p>Because link names may contain spaces, this shortcut even works for\nmultiple words in the link text:</p>\n\n<pre><code>Visit [Daring Fireball][] for more information.\n</code></pre>\n\n<p>And then define the link:</p>\n\n<pre><code>[Daring Fireball]: http://daringfireball.net/\n</code></pre>\n\n<p>Link definitions can be placed anywhere in your Markdown document. I\ntend to put them immediately after each paragraph in which they're\nused, but if you want, you can put them all at the end of your\ndocument, sort of like footnotes.</p>\n\n<p>Here's an example of reference links in action:</p>\n\n<pre><code>I get 10 times more traffic from [Google] [1] than from\n[Yahoo] [2] or [MSN] [3].\n\n  [1]: http://google.com/        \"Google\"\n  [2]: http://search.yahoo.com/  \"Yahoo Search\"\n  [3]: http://search.msn.com/    \"MSN Search\"\n</code></pre>\n\n<p>Using the implicit link name shortcut, you could instead write:</p>\n\n<pre><code>I get 10 times more traffic from [Google][] than from\n[Yahoo][] or [MSN][].\n\n  [google]: http://google.com/        \"Google\"\n  [yahoo]:  http://search.yahoo.com/  \"Yahoo Search\"\n  [msn]:    http://search.msn.com/    \"MSN Search\"\n</code></pre>\n\n<p>Both of the above examples will produce the following HTML output:</p>\n\n<pre><code>&lt;p&gt;I get 10 times more traffic from &lt;a href=\"http://google.com/\"\ntitle=\"Google\"&gt;Google&lt;/a&gt; than from\n&lt;a href=\"http://search.yahoo.com/\" title=\"Yahoo Search\"&gt;Yahoo&lt;/a&gt;\nor &lt;a href=\"http://search.msn.com/\" title=\"MSN Search\"&gt;MSN&lt;/a&gt;.&lt;/p&gt;\n</code></pre>\n\n<p>For comparison, here is the same paragraph written using\nMarkdown's inline link style:</p>\n\n<pre><code>I get 10 times more traffic from [Google](http://google.com/ \"Google\")\nthan from [Yahoo](http://search.yahoo.com/ \"Yahoo Search\") or\n[MSN](http://search.msn.com/ \"MSN Search\").\n</code></pre>\n\n<p>The point of reference-style links is not that they're easier to\nwrite. The point is that with reference-style links, your document\nsource is vastly more readable. Compare the above examples: using\nreference-style links, the paragraph itself is only 81 characters\nlong; with inline-style links, it's 176 characters; and as raw HTML,\nit's 234 characters. In the raw HTML, there's more markup than there\nis text.</p>\n\n<p>With Markdown's reference-style links, a source document much more\nclosely resembles the final output, as rendered in a browser. By\nallowing you to move the markup-related metadata out of the paragraph,\nyou can add links without interrupting the narrative flow of your\nprose.</p>\n\n<h3 id=\"em\">Emphasis</h3>\n\n<p>Markdown treats asterisks (<code>*</code>) and underscores (<code>_</code>) as indicators of\nemphasis. Text wrapped with one <code>*</code> or <code>_</code> will be wrapped with an\nHTML <code>&lt;em&gt;</code> tag; double <code>*</code>'s or <code>_</code>'s will be wrapped with an HTML\n<code>&lt;strong&gt;</code> tag. E.g., this input:</p>\n\n<pre><code>*single asterisks*\n\n_single underscores_\n\n**double asterisks**\n\n__double underscores__\n</code></pre>\n\n<p>will produce:</p>\n\n<pre><code>&lt;em&gt;single asterisks&lt;/em&gt;\n\n&lt;em&gt;single underscores&lt;/em&gt;\n\n&lt;strong&gt;double asterisks&lt;/strong&gt;\n\n&lt;strong&gt;double underscores&lt;/strong&gt;\n</code></pre>\n\n<p>You can use whichever style you prefer; the lone restriction is that\nthe same character must be used to open and close an emphasis span.</p>\n\n<p>Emphasis can be used in the middle of a word:</p>\n\n<pre><code>un*fucking*believable\n</code></pre>\n\n<p>But if you surround an <code>*</code> or <code>_</code> with spaces, it'll be treated as a\nliteral asterisk or underscore.</p>\n\n<p>To produce a literal asterisk or underscore at a position where it\nwould otherwise be used as an emphasis delimiter, you can backslash\nescape it:</p>\n\n<pre><code>\\*this text is surrounded by literal asterisks\\*\n</code></pre>\n\n<h3 id=\"code\">Code</h3>\n\n<p>To indicate a span of code, wrap it with backtick quotes (<code>`</code>).\nUnlike a pre-formatted code block, a code span indicates code within a\nnormal paragraph. For example:</p>\n\n<pre><code>Use the `printf()` function.\n</code></pre>\n\n<p>will produce:</p>\n\n<pre><code>&lt;p&gt;Use the &lt;code&gt;printf()&lt;/code&gt; function.&lt;/p&gt;\n</code></pre>\n\n<p>To include a literal backtick character within a code span, you can use\nmultiple backticks as the opening and closing delimiters:</p>\n\n<pre><code>``There is a literal backtick (`) here.``\n</code></pre>\n\n<p>which will produce this:</p>\n\n<pre><code>&lt;p&gt;&lt;code&gt;There is a literal backtick (`) here.&lt;/code&gt;&lt;/p&gt;\n</code></pre>\n\n<p>The backtick delimiters surrounding a code span may include spaces --\none after the opening, one before the closing. This allows you to place\nliteral backtick characters at the beginning or end of a code span:</p>\n\n<pre><code>A single backtick in a code span: `` ` ``\n\nA backtick-delimited string in a code span: `` `foo` ``\n</code></pre>\n\n<p>will produce:</p>\n\n<pre><code>&lt;p&gt;A single backtick in a code span: &lt;code&gt;`&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;A backtick-delimited string in a code span: &lt;code&gt;`foo`&lt;/code&gt;&lt;/p&gt;\n</code></pre>\n\n<p>With a code span, ampersands and angle brackets are encoded as HTML\nentities automatically, which makes it easy to include example HTML\ntags. Markdown will turn this:</p>\n\n<pre><code>Please don't use any `&lt;blink&gt;` tags.\n</code></pre>\n\n<p>into:</p>\n\n<pre><code>&lt;p&gt;Please don't use any &lt;code&gt;&amp;lt;blink&amp;gt;&lt;/code&gt; tags.&lt;/p&gt;\n</code></pre>\n\n<p>You can write this:</p>\n\n<pre><code>`&amp;#8212;` is the decimal-encoded equivalent of `&amp;mdash;`.\n</code></pre>\n\n<p>to produce:</p>\n\n<pre><code>&lt;p&gt;&lt;code&gt;&amp;amp;#8212;&lt;/code&gt; is the decimal-encoded\nequivalent of &lt;code&gt;&amp;amp;mdash;&lt;/code&gt;.&lt;/p&gt;\n</code></pre>\n\n<h3 id=\"img\">Images</h3>\n\n<p>Admittedly, it's fairly difficult to devise a \"natural\" syntax for\nplacing images into a plain text document format.</p>\n\n<p>Markdown uses an image syntax that is intended to resemble the syntax\nfor links, allowing for two styles: <em>inline</em> and <em>reference</em>.</p>\n\n<p>Inline image syntax looks like this:</p>\n\n<pre><code>![Alt text](/path/to/img.jpg)\n\n![Alt text](/path/to/img.jpg \"Optional title\")\n</code></pre>\n\n<p>That is:</p>\n\n<ul>\n<li>An exclamation mark: <code>!</code>;</li>\n<li>followed by a set of square brackets, containing the <code>alt</code>\nattribute text for the image;</li>\n<li>followed by a set of parentheses, containing the URL or path to\nthe image, and an optional <code>title</code> attribute enclosed in double\nor single quotes.</li>\n</ul>\n\n<p>Reference-style image syntax looks like this:</p>\n\n<pre><code>![Alt text][id]\n</code></pre>\n\n<p>Where \"id\" is the name of a defined image reference. Image references\nare defined using syntax identical to link references:</p>\n\n<pre><code>[id]: url/to/image  \"Optional title attribute\"\n</code></pre>\n\n<p>As of this writing, Markdown has no syntax for specifying the\ndimensions of an image; if this is important to you, you can simply\nuse regular HTML <code>&lt;img&gt;</code> tags.</p>\n\n<hr />\n\n<h2 id=\"misc\">Miscellaneous</h2>\n\n<h3 id=\"autolink\">Automatic Links</h3>\n\n<p>Markdown supports a shortcut style for creating \"automatic\" links for URLs and email addresses: simply surround the URL or email address with angle brackets. What this means is that if you want to show the actual text of a URL or email address, and also have it be a clickable link, you can do this:</p>\n\n<pre><code>&lt;http://example.com/&gt;\n</code></pre>\n\n<p>Markdown will turn this into:</p>\n\n<pre><code>&lt;a href=\"http://example.com/\"&gt;http://example.com/&lt;/a&gt;\n</code></pre>\n\n<p>Automatic links for email addresses work similarly, except that\nMarkdown will also perform a bit of randomized decimal and hex\nentity-encoding to help obscure your address from address-harvesting\nspambots. For example, Markdown will turn this:</p>\n\n<pre><code>&lt;address@example.com&gt;\n</code></pre>\n\n<p>into something like this:</p>\n\n<pre><code>&lt;a href=\"&amp;#x6D;&amp;#x61;i&amp;#x6C;&amp;#x74;&amp;#x6F;:&amp;#x61;&amp;#x64;&amp;#x64;&amp;#x72;&amp;#x65;\n&amp;#115;&amp;#115;&amp;#64;&amp;#101;&amp;#120;&amp;#x61;&amp;#109;&amp;#x70;&amp;#x6C;e&amp;#x2E;&amp;#99;&amp;#111;\n&amp;#109;\"&gt;&amp;#x61;&amp;#x64;&amp;#x64;&amp;#x72;&amp;#x65;&amp;#115;&amp;#115;&amp;#64;&amp;#101;&amp;#120;&amp;#x61;\n&amp;#109;&amp;#x70;&amp;#x6C;e&amp;#x2E;&amp;#99;&amp;#111;&amp;#109;&lt;/a&gt;\n</code></pre>\n\n<p>which will render in a browser as a clickable link to \"address@example.com\".</p>\n\n<p>(This sort of entity-encoding trick will indeed fool many, if not\nmost, address-harvesting bots, but it definitely won't fool all of\nthem. It's better than nothing, but an address published in this way\nwill probably eventually start receiving spam.)</p>\n\n<h3 id=\"backslash\">Backslash Escapes</h3>\n\n<p>Markdown allows you to use backslash escapes to generate literal\ncharacters which would otherwise have special meaning in Markdown's\nformatting syntax. For example, if you wanted to surround a word with\nliteral asterisks (instead of an HTML <code>&lt;em&gt;</code> tag), you can backslashes\nbefore the asterisks, like this:</p>\n\n<pre><code>\\*literal asterisks\\*\n</code></pre>\n\n<p>Markdown provides backslash escapes for the following characters:</p>\n\n<pre><code>\\   backslash\n`   backtick\n*   asterisk\n_   underscore\n{}  curly braces\n[]  square brackets\n()  parentheses\n#   hash mark\n+   plus sign\n-   minus sign (hyphen)\n.   dot\n!   exclamation mark\n</code></pre>"),
%%     ?_assert(conv("> foo\n>\n> > bar\n>\n> foo\n") == "<blockquote>\n  <p>foo</p>\n  \n  <blockquote>\n    <p>bar</p>\n  </blockquote>\n  \n  <p>foo</p>\n</blockquote>"),
%%     ?_assert(conv("## Unordered\n\nAsterisks tight:\n\n*\tasterisk 1\n*\tasterisk 2\n*\tasterisk 3\n\n\nAsterisks loose:\n\n*\tasterisk 1\n\n*\tasterisk 2\n\n*\tasterisk 3\n\n* * *\n\nPluses tight:\n\n+\tPlus 1\n+\tPlus 2\n+\tPlus 3\n\n\nPluses loose:\n\n+\tPlus 1\n\n+\tPlus 2\n\n+\tPlus 3\n\n* * *\n\n\nMinuses tight:\n\n-\tMinus 1\n-\tMinus 2\n-\tMinus 3\n\n\nMinuses loose:\n\n-\tMinus 1\n\n-\tMinus 2\n\n-\tMinus 3\n\n\n## Ordered\n\nTight:\n\n1.\tFirst\n2.\tSecond\n3.\tThird\n\nand:\n\n1. One\n2. Two\n3. Three\n\n\nLoose using tabs:\n\n1.\tFirst\n\n2.\tSecond\n\n3.\tThird\n\nand using spaces:\n\n1. One\n\n2. Two\n\n3. Three\n\nMultiple paragraphs:\n\n1.\tItem 1, graf one.\n\n\tItem 2. graf two. The quick brown fox jumped over the lazy dog's\n\tback.\n\t\n2.\tItem 2.\n\n3.\tItem 3.\n\n\n\n## Nested\n\n*\tTab\n\t*\tTab\n\t\t*\tTab\n\nHere's another:\n\n1. First\n2. Second:\n\t* Fee\n\t* Fie\n\t* Foe\n3. Third\n\nSame thing but with paragraphs:\n\n1. First\n\n2. Second:\n\t* Fee\n\t* Fie\n\t* Foe\n\n3. Third\n\n\nThis was an error in Markdown 1.0.1:\n\n*\tthis\n\n\t*\tsub\n\n\tthat\n") == "<h2>Unordered</h2>\n\n<p>Asterisks tight:</p>\n\n<ul>\n<li>asterisk 1</li>\n<li>asterisk 2</li>\n<li>asterisk 3</li>\n</ul>\n\n<p>Asterisks loose:</p>\n\n<ul>\n<li><p>asterisk 1</p></li>\n<li><p>asterisk 2</p></li>\n<li><p>asterisk 3</p></li>\n</ul>\n\n<hr />\n\n<p>Pluses tight:</p>\n\n<ul>\n<li>Plus 1</li>\n<li>Plus 2</li>\n<li>Plus 3</li>\n</ul>\n\n<p>Pluses loose:</p>\n\n<ul>\n<li><p>Plus 1</p></li>\n<li><p>Plus 2</p></li>\n<li><p>Plus 3</p></li>\n</ul>\n\n<hr />\n\n<p>Minuses tight:</p>\n\n<ul>\n<li>Minus 1</li>\n<li>Minus 2</li>\n<li>Minus 3</li>\n</ul>\n\n<p>Minuses loose:</p>\n\n<ul>\n<li><p>Minus 1</p></li>\n<li><p>Minus 2</p></li>\n<li><p>Minus 3</p></li>\n</ul>\n\n<h2>Ordered</h2>\n\n<p>Tight:</p>\n\n<ol>\n<li>First</li>\n<li>Second</li>\n<li>Third</li>\n</ol>\n\n<p>and:</p>\n\n<ol>\n<li>One</li>\n<li>Two</li>\n<li>Three</li>\n</ol>\n\n<p>Loose using tabs:</p>\n\n<ol>\n<li><p>First</p></li>\n<li><p>Second</p></li>\n<li><p>Third</p></li>\n</ol>\n\n<p>and using spaces:</p>\n\n<ol>\n<li><p>One</p></li>\n<li><p>Two</p></li>\n<li><p>Three</p></li>\n</ol>\n\n<p>Multiple paragraphs:</p>\n\n<ol>\n<li><p>Item 1, graf one.</p>\n\n<p>Item 2. graf two. The quick brown fox jumped over the lazy dog's\nback.</p></li>\n<li><p>Item 2.</p></li>\n<li><p>Item 3.</p></li>\n</ol>\n\n<h2>Nested</h2>\n\n<ul>\n<li>Tab\n<ul><li>Tab\n<ul><li>Tab</li></ul></li></ul></li>\n</ul>\n\n<p>Here's another:</p>\n\n<ol>\n<li>First</li>\n<li>Second:\n<ul><li>Fee</li>\n<li>Fie</li>\n<li>Foe</li></ul></li>\n<li>Third</li>\n</ol>\n\n<p>Same thing but with paragraphs:</p>\n\n<ol>\n<li><p>First</p></li>\n<li><p>Second:</p>\n\n<ul><li>Fee</li>\n<li>Fie</li>\n<li>Foe</li></ul></li>\n<li><p>Third</p></li>\n</ol>\n\n<p>This was an error in Markdown 1.0.1:</p>\n\n<ul>\n<li><p>this</p>\n\n<ul><li>sub</li></ul>\n\n<p>that</p></li>\n</ul>"),
%%     ?_assert(conv("***This is strong and em.***\n\nSo is ***this*** word.\n\n___This is strong and em.___\n\nSo is ___this___ word.\n") == "<p><strong><em>This is strong and em.</em></strong></p>\n\n<p>So is <strong><em>this</em></strong> word.</p>\n\n<p><strong><em>This is strong and em.</em></strong></p>\n\n<p>So is <strong><em>this</em></strong> word.</p>"),
%%     ?_assert(conv("+\tthis is a list item\n\tindented with tabs\n\n+   this is a list item\n    indented with spaces\n\nCode:\n\n\tthis code block is indented by one tab\n\nAnd:\n\n\t\tthis code block is indented by two tabs\n\nAnd:\n\n\t+\tthis is an example list item\n\t\tindented with tabs\n\t\n\t+   this is an example list item\n\t    indented with spaces\n") == "<ul>\n<li><p>this is a list item\nindented with tabs</p></li>\n<li><p>this is a list item\nindented with spaces</p></li>\n</ul>\n\n<p>Code:</p>\n\n<pre><code>this code block is indented by one tab\n</code></pre>\n\n<p>And:</p>\n\n<pre><code>    this code block is indented by two tabs\n</code></pre>\n\n<p>And:</p>\n\n<pre><code>+   this is an example list item\n    indented with tabs\n\n+   this is an example list item\n    indented with spaces\n</code></pre>"),
%%     ?_assert(conv("> A list within a blockquote:\n> \n> *\tasterisk 1\n> *\tasterisk 2\n> *\tasterisk 3\n") == "<blockquote>\n  <p>A list within a blockquote:</p>\n  \n  <ul>\n  <li>asterisk 1</li>\n  <li>asterisk 2</li>\n  <li>asterisk 3</li>\n  </ul>\n</blockquote>"),
%%     ?_assert(conv("ï»¿1. one\r\n\r\n        code<t>\r\n        indented 8 spaces<t>\r\n\r\n2. two\r\n\r\n        code<t>\r\n            idented-12-spaces<t>\r\n\r\n3. three\r\n\r\n        code<t>\r\n\r\n            indented-12-spaces<t>") == "<p>ï»¿1. one</p>\n\n<pre><code>    code&lt;t&gt;\n    indented 8 spaces&lt;t&gt;\n</code></pre>\n\n<ol>\n<li><p>two</p>\n\n<pre><code>code&lt;t&gt;\n    idented-12-spaces&lt;t&gt;\n</code></pre></li>\n<li><p>three</p>\n\n<pre><code>code&lt;t&gt;\n\n\n<pre><code>indented-12-spaces&amp;lt;t&amp;gt;\n</code></pre>\n\n</code></pre></li>\n</ol>"),
%%     ?_assert(conv("##Header##\r\r----------\r\rSome **bold** Some *italic* and [a link][1] \r\rA little code sample\r\r    </head>\r    <title>Web Page Title</title>\r    </head>\r\rA picture\r\r![alt text][2]\r\rA list\r\r- apples\r- oranges\r- eggs\r\rA numbered list\r\r1. a\r2. b\r3. c\r\rA little quote\r\r> It is now time for all good men to come to the aid of their country. \r\rA final paragraph.\r\r  [1]: http://www.google.com\r  [2]: http://www.google.com/intl/en_ALL/images/logo.gif") == "<h2>Header</h2>\n\n<hr />\n\n<p>Some <strong>bold</strong> Some <em>italic</em> and <a href=\"http://www.google.com\">a link</a> </p>\n\n<p>A little code sample</p>\n\n<pre><code>&lt;/head&gt;\n&lt;title&gt;Web Page Title&lt;/title&gt;\n&lt;/head&gt;\n</code></pre>\n\n<p>A picture</p>\n\n<p><img src=\"http://www.google.com/intl/en_ALL/images/logo.gif\" alt=\"alt text\" title=\"\" /></p>\n\n<p>A list</p>\n\n<ul>\n<li>apples</li>\n<li>oranges</li>\n<li>eggs</li>\n</ul>\n\n<p>A numbered list</p>\n\n<ol>\n<li>a</li>\n<li>b</li>\n<li>c</li>\n</ol>\n\n<p>A little quote</p>\n\n<blockquote>\n  <p>It is now time for all good men to come to the aid of their country. </p>\n</blockquote>\n\n<p>A final paragraph.</p>"),
%%     ?_assert(conv("##Header##\r\n\r\n----------\r\n\r\nSome **bold** Some *italic* and [a link][1] \r\n\r\nA little code sample\r\n\r\n    </head>\r\n    <title>Web Page Title</title>\r\n    </head>\r\n\r\nA picture\r\n\r\n![alt text][2]\r\n\r\nA list\r\n\r\n- apples\r\n- oranges\r\n- eggs\r\n\r\nA numbered list\r\n\r\n1. a\r\n2. b\r\n3. c\r\n\r\nA little quote\r\n\r\n> It is now time for all good men to come to the aid of their country. \r\n\r\nA final paragraph.\r\n\r\n  [1]: http://www.google.com\r\n  [2]: http://www.google.com/intl/en_ALL/images/logo.gif") == "<h2>Header</h2>\n\n<hr />\n\n<p>Some <strong>bold</strong> Some <em>italic</em> and <a href=\"http://www.google.com\">a link</a> </p>\n\n<p>A little code sample</p>\n\n<pre><code>&lt;/head&gt;\n&lt;title&gt;Web Page Title&lt;/title&gt;\n&lt;/head&gt;\n</code></pre>\n\n<p>A picture</p>\n\n<p><img src=\"http://www.google.com/intl/en_ALL/images/logo.gif\" alt=\"alt text\" title=\"\" /></p>\n\n<p>A list</p>\n\n<ul>\n<li>apples</li>\n<li>oranges</li>\n<li>eggs</li>\n</ul>\n\n<p>A numbered list</p>\n\n<ol>\n<li>a</li>\n<li>b</li>\n<li>c</li>\n</ol>\n\n<p>A little quote</p>\n\n<blockquote>\n  <p>It is now time for all good men to come to the aid of their country. </p>\n</blockquote>\n\n<p>A final paragraph.</p>"),
%%     ?_assert(conv("##Header##\n\n----------\n\nSome **bold** Some *italic* and [a link][1] \n\nA little code sample\n\n    </head>\n    <title>Web Page Title</title>\n    </head>\n\nA picture\n\n![alt text][2]\n\nA list\n\n- apples\n- oranges\n- eggs\n\nA numbered list\n\n1. a\n2. b\n3. c\n\nA little quote\n\n> It is now time for all good men to come to the aid of their country. \n\nA final paragraph.\n\n  [1]: http://www.google.com\n  [2]: http://www.google.com/intl/en_ALL/images/logo.gif") == "<h2>Header</h2>\n\n<hr />\n\n<p>Some <strong>bold</strong> Some <em>italic</em> and <a href=\"http://www.google.com\">a link</a> </p>\n\n<p>A little code sample</p>\n\n<pre><code>&lt;/head&gt;\n&lt;title&gt;Web Page Title&lt;/title&gt;\n&lt;/head&gt;\n</code></pre>\n\n<p>A picture</p>\n\n<p><img src=\"http://www.google.com/intl/en_ALL/images/logo.gif\" alt=\"alt text\" title=\"\" /></p>\n\n<p>A list</p>\n\n<ul>\n<li>apples</li>\n<li>oranges</li>\n<li>eggs</li>\n</ul>\n\n<p>A numbered list</p>\n\n<ol>\n<li>a</li>\n<li>b</li>\n<li>c</li>\n</ol>\n\n<p>A little quote</p>\n\n<blockquote>\n  <p>It is now time for all good men to come to the aid of their country. </p>\n</blockquote>\n\n<p>A final paragraph.</p>"),
%%     ?_assert(conv("Markdown\n========\n\nVersion 1.0.1 - Tue 14 Dec 2004\n\nby John Gruber  \n<http://daringfireball.net/>\n\n\nIntroduction\n------------\n\nMarkdown is a text-to-HTML conversion tool for web writers. Markdown\nallows you to write using an easy-to-read, easy-to-write plain text\nformat, then convert it to structurally valid XHTML (or HTML).\n\nThus, \"Markdown\" is two things: a plain text markup syntax, and a\nsoftware tool, written in Perl, that converts the plain text markup \nto HTML.\n\nMarkdown works both as a Movable Type plug-in and as a standalone Perl\nscript -- which means it can also be used as a text filter in BBEdit\n(or any other application that supporst filters written in Perl).\n\nFull documentation of Markdown's syntax and configuration options is\navailable on the web: <http://daringfireball.net/projects/markdown/>.\n(Note: this readme file is formatted in Markdown.)\n\n\n\nInstallation and Requirements\n-----------------------------\n\nMarkdown requires Perl 5.6.0 or later. Welcome to the 21st Century.\nMarkdown also requires the standard Perl library module `Digest::MD5`. \n\n\n### Movable Type ###\n\nMarkdown works with Movable Type version 2.6 or later (including \nMT 3.0 or later).\n\n1.  Copy the \"Markdown.pl\" file into your Movable Type \"plugins\"\n    directory. The \"plugins\" directory should be in the same directory\n    as \"mt.cgi\"; if the \"plugins\" directory doesn't already exist, use\n    your FTP program to create it. Your installation should look like\n    this:\n\n        (mt home)/plugins/Markdown.pl\n\n2.  Once installed, Markdown will appear as an option in Movable Type's\n    Text Formatting pop-up menu. This is selectable on a per-post basis.\n    Markdown translates your posts to HTML when you publish; the posts\n    themselves are stored in your MT database in Markdown format.\n\n3.  If you also install SmartyPants 1.5 (or later), Markdown will offer\n    a second text formatting option: \"Markdown with SmartyPants\". This\n    option is the same as the regular \"Markdown\" formatter, except that\n    automatically uses SmartyPants to create typographically correct\n    curly quotes, em-dashes, and ellipses. See the SmartyPants web page\n    for more information: <http://daringfireball.net/projects/smartypants/>\n\n4.  To make Markdown (or \"Markdown with SmartyPants\") your default\n    text formatting option for new posts, go to Weblog Config ->\n    Preferences.\n\nNote that by default, Markdown produces XHTML output. To configure\nMarkdown to produce HTML 4 output, see \"Configuration\", below.\n\n\n### Blosxom ###\n\nMarkdown works with Blosxom version 2.x.\n\n1.  Rename the \"Markdown.pl\" plug-in to \"Markdown\" (case is\n    important). Movable Type requires plug-ins to have a \".pl\"\n    extension; Blosxom forbids it.\n\n2.  Copy the \"Markdown\" plug-in file to your Blosxom plug-ins folder.\n    If you're not sure where your Blosxom plug-ins folder is, see the\n    Blosxom documentation for information.\n\n3.  That's it. The entries in your weblog will now automatically be\n    processed by Markdown.\n\n4.  If you'd like to apply Markdown formatting only to certain posts,\n    rather than all of them, see Jason Clark's instructions for using\n    Markdown in conjunction with Blosxom's Meta plugin:\n    \n    <http://jclark.org/weblog/WebDev/Blosxom/Markdown.html>\n\n\n### BBEdit ###\n\nMarkdown works with BBEdit 6.1 or later on Mac OS X. (It also works\nwith BBEdit 5.1 or later and MacPerl 5.6.1 on Mac OS 8.6 or later.)\n\n1.  Copy the \"Markdown.pl\" file to appropriate filters folder in your\n    \"BBEdit Support\" folder. On Mac OS X, this should be:\n\n        BBEdit Support/Unix Support/Unix Filters/\n\n    See the BBEdit documentation for more details on the location of\n    these folders.\n\n    You can rename \"Markdown.pl\" to whatever you wish.\n\n2.  That's it. To use Markdown, select some text in a BBEdit document,\n    then choose Markdown from the Filters sub-menu in the \"#!\" menu, or\n    the Filters floating palette\n\n\n\nConfiguration\n-------------\n\nBy default, Markdown produces XHTML output for tags with empty elements.\nE.g.:\n\n    <br />\n\nMarkdown can be configured to produce HTML-style tags; e.g.:\n\n    <br>\n\n\n### Movable Type ###\n\nYou need to use a special `MTMarkdownOptions` container tag in each\nMovable Type template where you want HTML 4-style output:\n\n    <MTMarkdownOptions output='html4'>\n        ... put your entry content here ...\n    </MTMarkdownOptions>\n\nThe easiest way to use MTMarkdownOptions is probably to put the\nopening tag right after your `<body>` tag, and the closing tag right\nbefore `</body>`.\n\nTo suppress Markdown processing in a particular template, i.e. to\npublish the raw Markdown-formatted text without translation into\n(X)HTML, set the `output` attribute to 'raw':\n\n    <MTMarkdownOptions output='raw'>\n        ... put your entry content here ...\n    </MTMarkdownOptions>\n\n\n### Command-Line ###\n\nUse the `--html4tags` command-line switch to produce HTML output from a\nUnix-style command line. E.g.:\n\n    % perl Markdown.pl --html4tags foo.text\n\nType `perldoc Markdown.pl`, or read the POD documentation within the\nMarkdown.pl source code for more information.\n\n\n\nBugs\n----\n\nTo file bug reports or feature requests please send email to:\nmarkdown@daringfireball.net.\n\n\n\nVersion History\n---------------\n\n1.0.1 (14 Dec 2004):\n\n+\tChanged the syntax rules for code blocks and spans. Previously,\n\tbackslash escapes for special Markdown characters were processed\n\teverywhere other than within inline HTML tags. Now, the contents\n\tof code blocks and spans are no longer processed for backslash\n\tescapes. This means that code blocks and spans are now treated\n\tliterally, with no special rules to worry about regarding\n\tbackslashes.\n\n\t**NOTE**: This changes the syntax from all previous versions of\n\tMarkdown. Code blocks and spans involving backslash characters\n\twill now generate different output than before.\n\n+\tTweaked the rules for link definitions so that they must occur\n\twithin three spaces of the left margin. Thus if you indent a link\n\tdefinition by four spaces or a tab, it will now be a code block.\n\t\n\t\t   [a]: /url/  \"Indented 3 spaces, this is a link def\"\n\n\t\t    [b]: /url/  \"Indented 4 spaces, this is a code block\"\n\t\n\t**IMPORTANT**: This may affect existing Markdown content if it\n\tcontains link definitions indented by 4 or more spaces.\n\n+\tAdded `>`, `+`, and `-` to the list of backslash-escapable\n\tcharacters. These should have been done when these characters\n\twere added as unordered list item markers.\n\n+\tTrailing spaces and tabs following HTML comments and `<hr/>` tags\n\tare now ignored.\n\n+\tInline links using `<` and `>` URL delimiters weren't working:\n\n\t\tlike [this](<http://example.com/>)\n\n+\tAdded a bit of tolerance for trailing spaces and tabs after\n\tMarkdown hr's.\n\n+\tFixed bug where auto-links were being processed within code spans:\n\n\t\tlike this: `<http://example.com/>`\n\n+\tSort-of fixed a bug where lines in the middle of hard-wrapped\n\tparagraphs, which lines look like the start of a list item,\n\twould accidentally trigger the creation of a list. E.g. a\n\tparagraph that looked like this:\n\n\t\tI recommend upgrading to version\n\t\t8. Oops, now this line is treated\n\t\tas a sub-list.\n\n\tThis is fixed for top-level lists, but it can still happen for\n\tsub-lists. E.g., the following list item will not be parsed\n\tproperly:\n\n\t\t+\tI recommend upgrading to version\n\t\t\t8. Oops, now this line is treated\n\t\t\tas a sub-list.\n\n\tGiven Markdown's list-creation rules, I'm not sure this can\n\tbe fixed.\n\n+\tStandalone HTML comments are now handled; previously, they'd get\n\twrapped in a spurious `<p>` tag.\n\n+\tFix for horizontal rules preceded by 2 or 3 spaces.\n\n+\t`<hr>` HTML tags in must occur within three spaces of left\n\tmargin. (With 4 spaces or a tab, they should be code blocks, but\n\tweren't before this fix.)\n\n+\tCapitalized \"With\" in \"Markdown With SmartyPants\" for\n\tconsistency with the same string label in SmartyPants.pl.\n\t(This fix is specific to the MT plug-in interface.)\n\n+\tAuto-linked email address can now optionally contain\n\ta 'mailto:' protocol. I.e. these are equivalent:\n\n\t\t<mailto:user@example.com>\n\t\t<user@example.com>\n\n+\tFixed annoying bug where nested lists would wind up with\n\tspurious (and invalid) `<p>` tags.\n\n+\tYou can now write empty links:\n\n\t\t[like this]()\n\n\tand they'll be turned into anchor tags with empty href attributes.\n\tThis should have worked before, but didn't.\n\n+\t`***this***` and `___this___` are now turned into\n\n\t\t<strong><em>this</em></strong>\n\n\tInstead of\n\n\t\t<strong><em>this</strong></em>\n\n\twhich isn't valid. (Thanks to Michel Fortin for the fix.)\n\n+\tAdded a new substitution in `_EncodeCode()`: s/\\$/&#036;/g; This\n\tis only for the benefit of Blosxom users, because Blosxom\n\t(sometimes?) interpolates Perl scalars in your article bodies.\n\n+\tFixed problem for links defined with urls that include parens, e.g.:\n\n\t\t[1]: http://sources.wikipedia.org/wiki/Middle_East_Policy_(Chomsky)\n\n\t\"Chomsky\" was being erroneously treated as the URL's title.\n\n+\tAt some point during 1.0's beta cycle, I changed every sub's\n\targument fetching from this idiom:\n\n\t\tmy $text = shift;\n\n\tto:\n\n\t\tmy $text = shift || return '';\n\n\tThe idea was to keep Markdown from doing any work in a sub\n\tif the input was empty. This introduced a bug, though:\n\tif the input to any function was the single-character string\n\t\"0\", it would also evaluate as false and return immediately.\n\tHow silly. Now fixed.\n\n\n\nDonations\n---------\n\nDonations to support Markdown's development are happily accepted. See:\n<http://daringfireball.net/projects/markdown/> for details.\n\n\n\nCopyright and License\n---------------------\n\nCopyright (c) 2003-2004 John Gruber   \n<http://daringfireball.net/>   \nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are\nmet:\n\n* Redistributions of source code must retain the above copyright notice,\n  this list of conditions and the following disclaimer.\n\n* Redistributions in binary form must reproduce the above copyright\n  notice, this list of conditions and the following disclaimer in the\n  documentation and/or other materials provided with the distribution.\n\n* Neither the name \"Markdown\" nor the names of its contributors may\n  be used to endorse or promote products derived from this software\n  without specific prior written permission.\n\nThis software is provided by the copyright holders and contributors \"as\nis\" and any express or implied warranties, including, but not limited\nto, the implied warranties of merchantability and fitness for a\nparticular purpose are disclaimed. In no event shall the copyright owner\nor contributors be liable for any direct, indirect, incidental, special,\nexemplary, or consequential damages (including, but not limited to,\nprocurement of substitute goods or services; loss of use, data, or\nprofits; or business interruption) however caused and on any theory of\nliability, whether in contract, strict liability, or tort (including\nnegligence or otherwise) arising in any way out of the use of this\nsoftware, even if advised of the possibility of such damage.\n") == "<h1>Markdown</h1>\n\n<p>Version 1.0.1 - Tue 14 Dec 2004</p>\n\n<p>by John Gruber <br />\n<a href=\"http://daringfireball.net/\">http://daringfireball.net/</a></p>\n\n<h2>Introduction</h2>\n\n<p>Markdown is a text-to-HTML conversion tool for web writers. Markdown\nallows you to write using an easy-to-read, easy-to-write plain text\nformat, then convert it to structurally valid XHTML (or HTML).</p>\n\n<p>Thus, \"Markdown\" is two things: a plain text markup syntax, and a\nsoftware tool, written in Perl, that converts the plain text markup \nto HTML.</p>\n\n<p>Markdown works both as a Movable Type plug-in and as a standalone Perl\nscript -- which means it can also be used as a text filter in BBEdit\n(or any other application that supporst filters written in Perl).</p>\n\n<p>Full documentation of Markdown's syntax and configuration options is\navailable on the web: <a href=\"http://daringfireball.net/projects/markdown/\">http://daringfireball.net/projects/markdown/</a>.\n(Note: this readme file is formatted in Markdown.)</p>\n\n<h2>Installation and Requirements</h2>\n\n<p>Markdown requires Perl 5.6.0 or later. Welcome to the 21st Century.\nMarkdown also requires the standard Perl library module <code>Digest::MD5</code>. </p>\n\n<h3>Movable Type</h3>\n\n<p>Markdown works with Movable Type version 2.6 or later (including \nMT 3.0 or later).</p>\n\n<ol>\n<li><p>Copy the \"Markdown.pl\" file into your Movable Type \"plugins\"\ndirectory. The \"plugins\" directory should be in the same directory\nas \"mt.cgi\"; if the \"plugins\" directory doesn't already exist, use\nyour FTP program to create it. Your installation should look like\nthis:</p>\n\n<pre><code>(mt home)/plugins/Markdown.pl\n</code></pre></li>\n<li><p>Once installed, Markdown will appear as an option in Movable Type's\nText Formatting pop-up menu. This is selectable on a per-post basis.\nMarkdown translates your posts to HTML when you publish; the posts\nthemselves are stored in your MT database in Markdown format.</p></li>\n<li><p>If you also install SmartyPants 1.5 (or later), Markdown will offer\na second text formatting option: \"Markdown with SmartyPants\". This\noption is the same as the regular \"Markdown\" formatter, except that\nautomatically uses SmartyPants to create typographically correct\ncurly quotes, em-dashes, and ellipses. See the SmartyPants web page\nfor more information: <a href=\"http://daringfireball.net/projects/smartypants/\">http://daringfireball.net/projects/smartypants/</a></p></li>\n<li><p>To make Markdown (or \"Markdown with SmartyPants\") your default\ntext formatting option for new posts, go to Weblog Config ->\nPreferences.</p></li>\n</ol>\n\n<p>Note that by default, Markdown produces XHTML output. To configure\nMarkdown to produce HTML 4 output, see \"Configuration\", below.</p>\n\n<h3>Blosxom</h3>\n\n<p>Markdown works with Blosxom version 2.x.</p>\n\n<ol>\n<li><p>Rename the \"Markdown.pl\" plug-in to \"Markdown\" (case is\nimportant). Movable Type requires plug-ins to have a \".pl\"\nextension; Blosxom forbids it.</p></li>\n<li><p>Copy the \"Markdown\" plug-in file to your Blosxom plug-ins folder.\nIf you're not sure where your Blosxom plug-ins folder is, see the\nBlosxom documentation for information.</p></li>\n<li><p>That's it. The entries in your weblog will now automatically be\nprocessed by Markdown.</p></li>\n<li><p>If you'd like to apply Markdown formatting only to certain posts,\nrather than all of them, see Jason Clark's instructions for using\nMarkdown in conjunction with Blosxom's Meta plugin:</p>\n\n<p><a href=\"http://jclark.org/weblog/WebDev/Blosxom/Markdown.html\">http://jclark.org/weblog/WebDev/Blosxom/Markdown.html</a></p></li>\n</ol>\n\n<h3>BBEdit</h3>\n\n<p>Markdown works with BBEdit 6.1 or later on Mac OS X. (It also works\nwith BBEdit 5.1 or later and MacPerl 5.6.1 on Mac OS 8.6 or later.)</p>\n\n<ol>\n<li><p>Copy the \"Markdown.pl\" file to appropriate filters folder in your\n\"BBEdit Support\" folder. On Mac OS X, this should be:</p>\n\n<pre><code>BBEdit Support/Unix Support/Unix Filters/\n</code></pre>\n\n<p>See the BBEdit documentation for more details on the location of\nthese folders.</p>\n\n<p>You can rename \"Markdown.pl\" to whatever you wish.</p></li>\n<li><p>That's it. To use Markdown, select some text in a BBEdit document,\nthen choose Markdown from the Filters sub-menu in the \"#!\" menu, or\nthe Filters floating palette</p></li>\n</ol>\n\n<h2>Configuration</h2>\n\n<p>By default, Markdown produces XHTML output for tags with empty elements.\nE.g.:</p>\n\n<pre><code>&lt;br /&gt;\n</code></pre>\n\n<p>Markdown can be configured to produce HTML-style tags; e.g.:</p>\n\n<pre><code>&lt;br&gt;\n</code></pre>\n\n<h3>Movable Type</h3>\n\n<p>You need to use a special <code>MTMarkdownOptions</code> container tag in each\nMovable Type template where you want HTML 4-style output:</p>\n\n<pre><code>&lt;MTMarkdownOptions output='html4'&gt;\n    ... put your entry content here ...\n&lt;/MTMarkdownOptions&gt;\n</code></pre>\n\n<p>The easiest way to use MTMarkdownOptions is probably to put the\nopening tag right after your <code>&lt;body&gt;</code> tag, and the closing tag right\nbefore <code>&lt;/body&gt;</code>.</p>\n\n<p>To suppress Markdown processing in a particular template, i.e. to\npublish the raw Markdown-formatted text without translation into\n(X)HTML, set the <code>output</code> attribute to 'raw':</p>\n\n<pre><code>&lt;MTMarkdownOptions output='raw'&gt;\n    ... put your entry content here ...\n&lt;/MTMarkdownOptions&gt;\n</code></pre>\n\n<h3>Command-Line</h3>\n\n<p>Use the <code>--html4tags</code> command-line switch to produce HTML output from a\nUnix-style command line. E.g.:</p>\n\n<pre><code>% perl Markdown.pl --html4tags foo.text\n</code></pre>\n\n<p>Type <code>perldoc Markdown.pl</code>, or read the POD documentation within the\nMarkdown.pl source code for more information.</p>\n\n<h2>Bugs</h2>\n\n<p>To file bug reports or feature requests please send email to:\nmarkdown@daringfireball.net.</p>\n\n<h2>Version History</h2>\n\n<p>1.0.1 (14 Dec 2004):</p>\n\n<ul>\n<li><p>Changed the syntax rules for code blocks and spans. Previously,\nbackslash escapes for special Markdown characters were processed\neverywhere other than within inline HTML tags. Now, the contents\nof code blocks and spans are no longer processed for backslash\nescapes. This means that code blocks and spans are now treated\nliterally, with no special rules to worry about regarding\nbackslashes.</p>\n\n<p><strong>NOTE</strong>: This changes the syntax from all previous versions of\nMarkdown. Code blocks and spans involving backslash characters\nwill now generate different output than before.</p></li>\n<li><p>Tweaked the rules for link definitions so that they must occur\nwithin three spaces of the left margin. Thus if you indent a link\ndefinition by four spaces or a tab, it will now be a code block.</p>\n\n<pre><code>   [a]: /url/  \"Indented 3 spaces, this is a link def\"\n\n\n<pre><code>[b]: /url/  \"Indented 4 spaces, this is a code block\"\n</code></pre>\n\n</code></pre>\n\n<p><strong>IMPORTANT</strong>: This may affect existing Markdown content if it\ncontains link definitions indented by 4 or more spaces.</p></li>\n<li><p>Added <code>&gt;</code>, <code>+</code>, and <code>-</code> to the list of backslash-escapable\ncharacters. These should have been done when these characters\nwere added as unordered list item markers.</p></li>\n<li><p>Trailing spaces and tabs following HTML comments and <code>&lt;hr/&gt;</code> tags\nare now ignored.</p></li>\n<li><p>Inline links using <code>&lt;</code> and <code>&gt;</code> URL delimiters weren't working:</p>\n\n<pre><code>like [this](&lt;http://example.com/&gt;)\n</code></pre></li>\n<li><p>Added a bit of tolerance for trailing spaces and tabs after\nMarkdown hr's.</p></li>\n<li><p>Fixed bug where auto-links were being processed within code spans:</p>\n\n<pre><code>like this: `&lt;http://example.com/&gt;`\n</code></pre></li>\n<li><p>Sort-of fixed a bug where lines in the middle of hard-wrapped\nparagraphs, which lines look like the start of a list item,\nwould accidentally trigger the creation of a list. E.g. a\nparagraph that looked like this:</p>\n\n<pre><code>I recommend upgrading to version\n8. Oops, now this line is treated\nas a sub-list.\n</code></pre>\n\n<p>This is fixed for top-level lists, but it can still happen for\nsub-lists. E.g., the following list item will not be parsed\nproperly:</p>\n\n<pre><code>+   I recommend upgrading to version\n    8. Oops, now this line is treated\n    as a sub-list.\n</code></pre>\n\n<p>Given Markdown's list-creation rules, I'm not sure this can\nbe fixed.</p></li>\n<li><p>Standalone HTML comments are now handled; previously, they'd get\nwrapped in a spurious <code>&lt;p&gt;</code> tag.</p></li>\n<li><p>Fix for horizontal rules preceded by 2 or 3 spaces.</p></li>\n<li><p><code>&lt;hr&gt;</code> HTML tags in must occur within three spaces of left\nmargin. (With 4 spaces or a tab, they should be code blocks, but\nweren't before this fix.)</p></li>\n<li><p>Capitalized \"With\" in \"Markdown With SmartyPants\" for\nconsistency with the same string label in SmartyPants.pl.\n(This fix is specific to the MT plug-in interface.)</p></li>\n<li><p>Auto-linked email address can now optionally contain\na 'mailto:' protocol. I.e. these are equivalent:</p>\n\n<pre><code>&lt;mailto:user@example.com&gt;\n&lt;user@example.com&gt;\n</code></pre></li>\n<li><p>Fixed annoying bug where nested lists would wind up with\nspurious (and invalid) <code>&lt;p&gt;</code> tags.</p></li>\n<li><p>You can now write empty links:</p>\n\n<pre><code>[like this]()\n</code></pre>\n\n<p>and they'll be turned into anchor tags with empty href attributes.\nThis should have worked before, but didn't.</p></li>\n<li><p><code>***this***</code> and <code>___this___</code> are now turned into</p>\n\n<pre><code>&lt;strong&gt;&lt;em&gt;this&lt;/em&gt;&lt;/strong&gt;\n</code></pre>\n\n<p>Instead of</p>\n\n<pre><code>&lt;strong&gt;&lt;em&gt;this&lt;/strong&gt;&lt;/em&gt;\n</code></pre>\n\n<p>which isn't valid. (Thanks to Michel Fortin for the fix.)</p></li>\n<li><p>Added a new substitution in <code>_EncodeCode()</code>: s/\\$/&#036;/g; This\nis only for the benefit of Blosxom users, because Blosxom\n(sometimes?) interpolates Perl scalars in your article bodies.</p></li>\n<li><p>Fixed problem for links defined with urls that include parens, e.g.:</p>\n\n<pre><code>[1]: http://sources.wikipedia.org/wiki/Middle_East_Policy_(Chomsky)\n</code></pre>\n\n<p>\"Chomsky\" was being erroneously treated as the URL's title.</p></li>\n<li><p>At some point during 1.0's beta cycle, I changed every sub's\nargument fetching from this idiom:</p>\n\n<pre><code>my $text = shift;\n</code></pre>\n\n<p>to:</p>\n\n<pre><code>my $text = shift || return '';\n</code></pre>\n\n<p>The idea was to keep Markdown from doing any work in a sub\nif the input was empty. This introduced a bug, though:\nif the input to any function was the single-character string\n\"0\", it would also evaluate as false and return immediately.\nHow silly. Now fixed.</p></li>\n</ul>\n\n<h2>Donations</h2>\n\n<p>Donations to support Markdown's development are happily accepted. See:\n<a href=\"http://daringfireball.net/projects/markdown/\">http://daringfireball.net/projects/markdown/</a> for details.</p>\n\n<h2>Copyright and License</h2>\n\n<p>Copyright (c) 2003-2004 John Gruber <br />\n<a href=\"http://daringfireball.net/\">http://daringfireball.net/</a> <br />\nAll rights reserved.</p>\n\n<p>Redistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are\nmet:</p>\n\n<ul>\n<li><p>Redistributions of source code must retain the above copyright notice,\nthis list of conditions and the following disclaimer.</p></li>\n<li><p>Redistributions in binary form must reproduce the above copyright\nnotice, this list of conditions and the following disclaimer in the\ndocumentation and/or other materials provided with the distribution.</p></li>\n<li><p>Neither the name \"Markdown\" nor the names of its contributors may\nbe used to endorse or promote products derived from this software\nwithout specific prior written permission.</p></li>\n</ul>\n\n<p>This software is provided by the copyright holders and contributors \"as\nis\" and any express or implied warranties, including, but not limited\nto, the implied warranties of merchantability and fitness for a\nparticular purpose are disclaimed. In no event shall the copyright owner\nor contributors be liable for any direct, indirect, incidental, special,\nexemplary, or consequential damages (including, but not limited to,\nprocurement of substitute goods or services; loss of use, data, or\nprofits; or business interruption) however caused and on any theory of\nliability, whether in contract, strict liability, or tort (including\nnegligence or otherwise) arising in any way out of the use of this\nsoftware, even if advised of the possibility of such damage.</p>"),
%%     ?_assert(conv("Tricky combinaisons:\r\rbackslash with \\\\-- two dashes\r\rbackslash with \\\\> greater than\r\r\\\\\\[test](not a link)\r\r\\\\\\*no emphasis*") == "<p>Tricky combinaisons:</p>\n\n<p>backslash with \\-- two dashes</p>\n\n<p>backslash with \\> greater than</p>\n\n<p>\\[test](not a link)</p>\n\n<p>\\*no emphasis*</p>"),
%%     ?_assert(conv("From `<!--` to `-->`\non two lines.\n\nFrom `<!--`\nto `-->`\non three lines.\n") == "<p>From <code>&lt;!--</code> to <code>--&gt;</code>\non two lines.</p>\n\n<p>From <code>&lt;!--</code>\nto <code>--&gt;</code>\non three lines.</p>"),
%%     ?_assert(conv("\n*\tList Item:\n\n\t\tcode block\n\n\t\twith a blank line\n\n\twithin a list item.") == "<ul>\n<li><p>List Item:</p>\n\n<pre><code>code block\n\n\nwith a blank line\n</code></pre>\n\n<p>within a list item.</p></li>\n</ul>"),
%     ?_assert(conv("Combined emphasis:\n\n1.  ***test test***\n2.  ___test test___\n3.  *test **test***\n4.  **test *test***\n5.  ***test* test**\n6.  ***test** test*\n7.  ***test* test**\n8.  **test *test***\n9.  *test **test***\n10. _test __test___\n11. __test _test___\n12. ___test_ test__\n13. ___test__ test_\n14. ___test_ test__\n15. __test _test___\n16. _test __test___\n\n\nIncorrect nesting:\n\n1.  *test  **test*  test**\n2.  _test  __test_  test__\n3.  **test  *test** test*\n4.  __test  _test__ test_\n5.  *test   *test*  test*\n6.  _test   _test_  test_\n7.  **test **test** test**\n8.  __test __test__ test__\n\n\n\nNo emphasis:\n\n1.  test*  test  *test\n2.  test** test **test\n3.  test_  test  _test\n4.  test__ test __test\n\n\n\nMiddle-word emphasis (asterisks):\n\n1.  *a*b\n2.   a*b*\n3.   a*b*c\n4. **a**b\n5.   a**b**\n6.   a**b**c\n\n\nMiddle-word emphasis (underscore):\n\n1.  _a_b\n2.   a_b_\n3.   a_b_c\n4. __a__b\n5.   a__b__\n6.   a__b__c\n\nmy_precious_file.txt\n\n\n## Tricky Cases\n\nE**. **Test** TestTestTest\n\nE**. **Test** Test Test Test\n") == "<p>Combined emphasis:</p>\n\n<ol>\n<li><strong><em>test test</em></strong></li>\n<li><strong><em>test test</em></strong></li>\n<li><em>test <strong>test</em></strong></li>\n<li><strong>test <em>test</em></strong></li>\n<li><strong><em>test</em> test</strong></li>\n<li><strong><em>test</strong> test</em></li>\n<li><strong><em>test</em> test</strong></li>\n<li><strong>test <em>test</em></strong></li>\n<li><em>test <strong>test</em></strong></li>\n<li><em>test <strong>test</em></strong></li>\n<li><strong>test <em>test</em></strong></li>\n<li><strong><em>test</em> test</strong></li>\n<li><strong><em>test</strong> test</em></li>\n<li><strong><em>test</em> test</strong></li>\n<li><strong>test <em>test</em></strong></li>\n<li><em>test <strong>test</em></strong></li>\n</ol>\n\n<p>Incorrect nesting:</p>\n\n<ol>\n<li><em>test  <strong>test</em>  test</strong></li>\n<li><em>test  <strong>test</em>  test</strong></li>\n<li><strong>test  <em>test</strong> test</em></li>\n<li><strong>test  <em>test</strong> test</em></li>\n<li><em>test   *test</em>  test*</li>\n<li><em>test   _test</em>  test_</li>\n<li><strong>test <em>*test</strong> test</em>*</li>\n<li><strong>test <em>_test</strong> test</em>_</li>\n</ol>\n\n<p>No emphasis:</p>\n\n<ol>\n<li>test*  test  *test</li>\n<li>test<em>* test *</em>test</li>\n<li>test_  test  _test</li>\n<li>test<em>_ test _</em>test</li>\n</ol>\n\n<p>Middle-word emphasis (asterisks):</p>\n\n<ol>\n<li><em>a</em>b</li>\n<li>a<em>b</em></li>\n<li>a<em>b</em>c</li>\n<li><strong>a</strong>b</li>\n<li>a<strong>b</strong></li>\n<li>a<strong>b</strong>c</li>\n</ol>\n\n<p>Middle-word emphasis (underscore):</p>\n\n<ol>\n<li><em>a</em>b</li>\n<li>a<em>b</em></li>\n<li>a<em>b</em>c</li>\n<li><strong>a</strong>b</li>\n<li>a<strong>b</strong></li>\n<li>a<strong>b</strong>c</li>\n</ol>\n\n<p>my<em>precious</em>file.txt</p>\n\n<h2>Tricky Cases</h2>\n\n<p>E<strong>. **Test</strong> TestTestTest</p>\n\n<p>E<strong>. **Test</strong> Test Test Test</p>"),
%%     ?_assert(conv("Header\r======\r\rHeader\r------\r\r### Header\n\n - - -\n\nHeader\r======\rParagraph\r\rHeader\r------\rParagraph\r\r### Header\rParagraph\n\n - - -\n\nParagraph\rHeader\r======\rParagraph\r\rParagraph\rHeader\r------\rParagraph\r\rParagraph\r### Header\rParagraph") == "<h1>Header</h1>\n\n<h2>Header</h2>\n\n<h3>Header</h3>\n\n<hr />\n\n<h1>Header</h1>\n\n<p>Paragraph</p>\n\n<h2>Header</h2>\n\n<p>Paragraph</p>\n\n<h3>Header</h3>\n\n<p>Paragraph</p>\n\n<hr />\n\n<p>Paragraph</p>\n\n<h1>Header</h1>\n\n<p>Paragraph</p>\n\n<p>Paragraph</p>\n\n<h2>Header</h2>\n\n<p>Paragraph</p>\n\n<p>Paragraph</p>\n\n<h3>Header</h3>\n\n<p>Paragraph</p>"),
%%   ?_assert(conv("Horizontal rules:\n\n- - -\n \n* * *\n \n***\n \n---\n \n___\n\nNot horizontal rules (testing for a bug in 1.0.1j):\n\n+++\n\n,,,\n\n===\n\n???\n\nAAA\n\njjj\n\nj j j\n\nn n n\n") == "<p>Horizontal rules:</p>\n\n<hr />\n\n<hr />\n\n<hr />\n\n<hr />\n\n<hr />\n\n<p>Not horizontal rules (testing for a bug in 1.0.1j):</p>\n\n<p>+++</p>\n\n<p>,,,</p>\n\n<p>===</p>\n\n<p>???</p>\n\n<p>AAA</p>\n\n<p>jjj</p>\n\n<p>j j j</p>\n\n<p>n n n</p>"),
%%     ?_assert(conv("With some attributes:\n\n<div id=\"test\">\n\tfoo\n</div>\n\n<div id=\"test\"\n     class=\"nono\">\n\tfoo\n</div>\n\t\nHr's:\n\n<hr class=\"foo\"\n    id=\"bar\" >\n") == "<p>With some attributes:</p>\n\n<div id=\"test\">\n    foo\n</div>\n\n<div id=\"test\"\n     class=\"nono\">\n    foo\n</div>\n\n<p>Hr's:</p>\n\n<hr class=\"foo\"\n    id=\"bar\" >"),
%%     ?_assert(conv("<abbr title=\"` **Attribute Content Is Not A Code Span** `\">ACINACS</abbr>\n\n<abbr title=\"`first backtick!\">SB</abbr> \n<abbr title=\"`second backtick!\">SB</abbr>") == "<p><abbr title=\"`**Attribute Content Is Not A Code Span**`\">ACINACS</abbr></p>\n\n<p><abbr title=\"`first backtick!\"&gt;SB&lt;/abbr&gt; \n&lt;abbr title=\"`second backtick!\">SB</abbr></p>"),
%%     ?_assert(conv("Paragraph one.\n\n<!-- double--dash (invalid SGML comment) -->\n\nParagraph two.\n\n<!-- enclosed tag </div> -->\n\nThe end.\n") == "<p>Paragraph one.</p>\n\n<!-- double--dash (invalid SGML comment) -->\n\n<p>Paragraph two.</p>\n\n<!-- enclosed tag </div> -->\n\n<p>The end.</p>"),
%%     ?_assert(conv("Here is a block tag ins:\n\n<ins>\n<p>Some text</p>\n</ins>\n\n<ins>And here it is inside a paragraph.</ins>\n\nAnd here it is <ins>in the middle of</ins> a paragraph.\n\n<del>\n<p>Some text</p>\n</del>\n\n<del>And here is ins as a paragraph.</del>\n\nAnd here it is <del>in the middle of</del> a paragraph.\n") == "<p>Here is a block tag ins:</p>\n\n<ins>\n<p>Some text</p>\n</ins>\n\n<p><ins>And here it is inside a paragraph.</ins></p>\n\n<p>And here it is <ins>in the middle of</ins> a paragraph.</p>\n\n<del>\n<p>Some text</p>\n</del>\n\n<p><del>And here is ins as a paragraph.</del></p>\n\n<p>And here it is <del>in the middle of</del> a paragraph.</p>"),
%%     ?_assert(conv("[silly URL w/ angle brackets](<?}]*+|&)>).\n") == "<p><a href=\"?}]*+|&amp;\">silly URL w/ angle brackets</a>>).</p>"),
%%     ?_assert(conv("# Character Escapes\n\nThe MD5 value for `+` is \"26b17225b626fb9238849fd60eabdf60\".\n\n# HTML Blocks\n\n<p>test</p>\n\nThe MD5 value for `<p>test</p>` is:\n\n6205333b793f34273d75379350b36826") == "<h1>Character Escapes</h1>\n\n<p>The MD5 value for <code>+</code> is \"26b17225b626fb9238849fd60eabdf60\".</p>\n\n<h1>HTML Blocks</h1>\n\n<p>test</p>\n\n<p>The MD5 value for <code>&lt;p&gt;test&lt;/p&gt;</code> is:</p>\n\n<p>6205333b793f34273d75379350b36826</p>"),
%%     ?_assert(conv("Valid nesting:\n\n**[Link](url)**\n\n[**Link**](url)\n\n**[**Link**](url)**\n\nInvalid nesting:\n\n[[Link](url)](url)") == "<p>Valid nesting:</p>\n\n<p><strong><a href=\"url\">Link</a></strong></p>\n\n<p><a href=\"url\"><strong>Link</strong></a></p>\n\n<p><strong><a href=\"url\"></strong>Link<strong></a></strong></p>\n\n<p>Invalid nesting:</p>\n\n<p><a href=\"url\">[Link](url)</a></p>"),
%%     ?_assert(conv("This tests for a bug where quotes escaped by PHP when using \n`preg_replace` with the `/e` modifier must be correctly unescaped\n(hence the `_UnslashQuotes` function found only in PHP Markdown).\n\n\n\nHeaders below should appear exactly as they are typed (no backslash\nadded or removed).\n\nHeader \"quoted\\\" again \\\\\"\"\n===========================\n\nHeader \"quoted\\\" again \\\\\"\"\n---------------------------\n\n### Header \"quoted\\\" again \\\\\"\" ###\n\n\n\nTest with tabs for `_Detab`:\n\n\tCode\t'block'\twith\tsome\t\"tabs\"\tand\t\"quotes\"\n") == "<p>This tests for a bug where quotes escaped by PHP when using \n<code>preg_replace</code> with the <code>/e</code> modifier must be correctly unescaped\n(hence the <code>_UnslashQuotes</code> function found only in PHP Markdown).</p>\n\n<p>Headers below should appear exactly as they are typed (no backslash\nadded or removed).</p>\n\n<h1>Header \"quoted\\\" again \\\"\"</h1>\n\n<h2>Header \"quoted\\\" again \\\"\"</h2>\n\n<h3>Header \"quoted\\\" again \\\"\"</h3>\n\n<p>Test with tabs for <code>_Detab</code>:</p>\n\n<pre><code>Code    'block' with    some    \"tabs\"  and \"quotes\"\n</code></pre>"),
%%     ?_assert(conv("[Inline link 1 with parens](/url\\(test\\) \"title\").\n\n[Inline link 2 with parens](</url\\(test\\)> \"title\").\n\n[Inline link 3 with non-escaped parens](/url(test) \"title\").\n\n[Inline link 4 with non-escaped parens](</url(test)> \"title\").\n\n[Reference link 1 with parens][1].\n\n[Reference link 2 with parens][2].\n\n  [1]: /url(test) \"title\"\n  [2]: </url(test)> \"title\"\n") == "<p><a href=\"/url(test)\" title=\"title\">Inline link 1 with parens</a>.</p>\n\n<p><a href=\"/url\\(test\\\">Inline link 2 with parens</a>> \"title\").</p>\n\n<p><a href=\"/url(test\">Inline link 3 with non-escaped parens</a> \"title\").</p>\n\n<p><a href=\"/url(test\">Inline link 4 with non-escaped parens</a>> \"title\").</p>\n\n<p><a href=\"/url\" title=\"test) &quot;title\">Reference link 1 with parens</a>.</p>\n\n<p><a href=\"/url\" title=\"test)> &quot;title\">Reference link 2 with parens</a>.</p>"),
   ?_assert(conv("Paragraph and no space:\r* ciao\r\rParagraph and 1 space:\r * ciao\r\rParagraph and 3 spaces:\r  * ciao\r\rParagraph and 4 spaces:\r   * ciao\r\rParagraph before header:\r#Header\r\rParagraph before blockquote:\r>Some quote.\r") == "<p>Paragraph and no space:\n* ciao</p>\n\n<p>Paragraph and 1 space:\n * ciao</p>\n\n<p>Paragraph and 3 spaces:\n  * ciao</p>\n\n<p>Paragraph and 4 spaces:\n   * ciao</p>\n\n<p>Paragraph before header:</p>\n\n<h1>Header</h1>\n\n<p>Paragraph before blockquote:</p>\n\n<blockquote>\n  <p>Some quote.</p>\n</blockquote>")
    ].

utf8_test() ->
    [?_assertEqual("<p>†</p>", conv_utf8("†"))].

